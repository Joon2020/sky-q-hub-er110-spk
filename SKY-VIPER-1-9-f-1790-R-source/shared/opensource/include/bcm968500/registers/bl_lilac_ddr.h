/*
* <:copyright-BRCM:2012:DUAL/GPL:standard
* 
*    Copyright (c) 2012 Broadcom Corporation
*    All Rights Reserved
* 
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License, version 2, as published by
* the Free Software Foundation (the "GPL").
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* 
* A copy of the GPL is available at http://www.broadcom.com/licenses/GPLv2.php, or by
* writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* Boston, MA 02111-1307, USA.
* 
* :> 
*/

#ifndef __DDR_H_INCLUDED
#define __DDR_H_INCLUDED

/*  File automatically generated by Reggae at 29/01/2012  07:34:36   */

#include "stt_basic_defs.h"
#include "access_macros.h"
#include "packing.h"

/*****************************************************************************************/
/* The DDR bridge and controller support both DDR2 and DDR3 standards for 16 and 8 bit D */
/* DR devices with sizes of up to 4Gigabit.    The Synopsys PCTL DDR controller is respo */
/* nsible for managing the DDR interface.    The DDR bridge is responsible for translati */
/* ng the different clients commands to the controller. It includes several additional f */
/* eatures such as arbitration, data coherency mechanisms, address mapping, frequency sy */
/* nchronization and PM counters.                                                        */
/*****************************************************************************************/

/*****************************************************************************************/
/* Blocks offsets                                                                        */
/*****************************************************************************************/
#define CE_DDR_CONTROLLER_OFFSET	( 0x18001000 )
#define CE_DDR_BRIDGE_OFFSET	( 0x18001800 )
/*****************************************************************************************/
/* Functions offsets and addresses                                                       */
/*****************************************************************************************/
#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_OFFSET 	( 0x00000000 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_OPERATIONAL_STATE_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_INITIALIZATION_OFFSET 	( 0x00000040 )
#define CE_DDR_CONTROLLER_INITIALIZATION_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_INITIALIZATION_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_OFFSET 	( 0x00000080 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_DTU_1_OFFSET 	( 0x00000094 )
#define CE_DDR_CONTROLLER_DTU_1_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_DTU_1_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_OFFSET 	( 0x000000C0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_TIMING_REGISTERS_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_DTU_2_OFFSET 	( 0x00000170 )
#define CE_DDR_CONTROLLER_DTU_2_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_DTU_2_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_PHY_STATUS_OFFSET 	( 0x00000240 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_PHY_STATUS_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_CONTROLLER_IP_CONFIGURATION_OFFSET 	( 0x000003F8 )
#define CE_DDR_CONTROLLER_IP_CONFIGURATION_ADDRESS	( CE_DDR_CONTROLLER_OFFSET + CE_DDR_CONTROLLER_IP_CONFIGURATION_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_BRIDGE_GENERAL_CONFIG_OFFSET 	( 0x00000000 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_ADDRESS	( CE_DDR_BRIDGE_OFFSET + CE_DDR_BRIDGE_GENERAL_CONFIG_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_BRIDGE_ARBITRATION_OFFSET 	( 0x00000040 )
#define CE_DDR_BRIDGE_ARBITRATION_ADDRESS	( CE_DDR_BRIDGE_OFFSET + CE_DDR_BRIDGE_ARBITRATION_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_BRIDGE_ADDR_MAP_OFFSET 	( 0x00000170 )
#define CE_DDR_BRIDGE_ADDR_MAP_ADDRESS	( CE_DDR_BRIDGE_OFFSET + CE_DDR_BRIDGE_ADDR_MAP_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_BRIDGE_SPECIAL_CMDS_OFFSET 	( 0x00000190 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_ADDRESS	( CE_DDR_BRIDGE_OFFSET + CE_DDR_BRIDGE_SPECIAL_CMDS_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_BRIDGE_PM_OFFSET 	( 0x00000200 )
#define CE_DDR_BRIDGE_PM_ADDRESS	( CE_DDR_BRIDGE_OFFSET + CE_DDR_BRIDGE_PM_OFFSET )

#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

#define CE_DDR_BRIDGE_TEST_MODE_OFFSET 	( 0x00000500 )
#define CE_DDR_BRIDGE_TEST_MODE_ADDRESS	( CE_DDR_BRIDGE_OFFSET + CE_DDR_BRIDGE_TEST_MODE_OFFSET )

#endif /* __MIPS */

/*   'i' is block index    */
/*   'j' is function index */
/*   'e' is function entry */
/*   'k' is register index */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* SCFG                                                                                  */
/* Enables/disables the hardware low-power interface.                                    */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_R0_DEFAULT_VALUE                         ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_R0_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_HW_LOW_POWER_EN_DISABLE_VALUE            ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_HW_LOW_POWER_EN_ENABLE_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_HW_LOW_POWER_EN_ENABLE_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_ADDRESS   	( CE_DDR_CONTROLLER_OPERATIONAL_STATE_ADDRESS + CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_OFFSET )
#define BL_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0             	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* hw_low_power_en */
	stt_uint32 hw_low_power_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_DTE ;


/*****************************************************************************************/
/* SCTL                                                                                  */
/* This register moves the PCTL from one state to another.    for the state machine deta */
/* ils please refer to the PCTL databook.                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_STATE_CMD_INIT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_STATE_CMD_INIT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_STATE_CMD_CFG_VALUE              ( 0x1 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_STATE_CMD_GO_VALUE               ( 0x2 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_STATE_CMD_SLEEP_VALUE            ( 0x3 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_STATE_CMD_WAKEUP_VALUE           ( 0x4 )


#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_ADDRESS   	( CE_DDR_CONTROLLER_OPERATIONAL_STATE_ADDRESS + CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_OFFSET )
#define BL_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0       	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* state_cmd */
	stt_uint32 state_cmd	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_DTE ;


/*****************************************************************************************/
/* STAT                                                                                  */
/* This register provides information about the current state of the PCTL.               */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_R0_DEFAULT_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_R0_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_INIT_MEM_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_INIT_MEM_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_CONFIG_VALUE               ( 0x1 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_CONFIG_REQ_VALUE           ( 0x2 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_ACCESS_VALUE               ( 0x3 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_ACCESS_REQ_VALUE           ( 0x4 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_LOW_POWER_VALUE            ( 0x5 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_LOW_POWER_ENTRY_REQ_VALUE  ( 0x6 )
#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_CTL_STAT_LOW_POWER_EXIT_REQ_VALUE   ( 0x7 )


#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_OFFSET ( 0x00000008 )

#define CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_ADDRESS   	( CE_DDR_CONTROLLER_OPERATIONAL_STATE_ADDRESS + CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_OFFSET )
#define BL_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_OPERATIONAL_STATE_STAT_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0      	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ctl_stat */
	stt_uint32 ctl_stat	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_OPERATIONAL_STATE_STAT_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* MCMD                                                                                  */
/* This register provides software with a method to program memory commands to the memor */
/* y devices for initialization and mode register programming through the direct memory  */
/* command channel. Writes to this register are ignored when MCMD[31] is set to 1&#146;b */
/* 1.                                                                                    */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_START_CMD_IDLE_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_START_CMD_IDLE_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_START_CMD_START_VALUE              ( 0x1 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_R1_DEFAULT_VALUE                   ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_R1_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_ADD_DEL_MIN_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_ADD_DEL_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_ADD_DEL_MAX_VALUE              ( 0xA )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_RANK_SEL_RANK_0_VALUE              ( 0x1 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_RANK_SEL_RANK_0_VALUE_RESET_VALUE  ( 0x1 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_BANK_ADDR_MR0_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_BANK_ADDR_MR0_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_BANK_ADDR_MR1_VALUE                ( 0x1 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_BANK_ADDR_MR2_VALUE                ( 0x2 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_BANK_ADDR_MR3_VALUE                ( 0x3 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_ADDR_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_ADDR_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_R0_DEFAULT_VALUE                   ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_R0_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_OPCODE_NOP_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_OPCODE_NOP_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_OPCODE_PREA_VALUE              ( 0x1 )
#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_CMD_OPCODE_REF_VALUE               ( 0x2 )


#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_INITIALIZATION_MCMD_ADDRESS   	( CE_DDR_CONTROLLER_INITIALIZATION_ADDRESS + CE_DDR_CONTROLLER_INITIALIZATION_MCMD_OFFSET )
#define BL_DDR_CONTROLLER_INITIALIZATION_MCMD_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_INITIALIZATION_MCMD_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_INITIALIZATION_MCMD_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_INITIALIZATION_MCMD_ADDRESS ), (v) )

typedef struct
{
	/* start_cmd */
	stt_uint32 start_cmd  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r1         	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cmd_add_del */
	stt_uint32 cmd_add_del	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rank_sel */
	stt_uint32 rank_sel   	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bank_addr */
	stt_uint32 bank_addr  	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cmd_addr */
	stt_uint32 cmd_addr   	: 13 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cmd_opcode */
	stt_uint32 cmd_opcode 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_INITIALIZATION_MCMD_DTE ;


/*****************************************************************************************/
/* POWCTL                                                                                */
/* This register is used during the memory initialization sequence in order to start the */
/*  memory power up sequence.                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_R0_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_R0_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_POWER_UP_START_END_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_POWER_UP_START_END_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_POWER_UP_START_START_VALUE           ( 0x1 )


#define CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_ADDRESS   	( CE_DDR_CONTROLLER_INITIALIZATION_ADDRESS + CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_OFFSET )
#define BL_DDR_CONTROLLER_INITIALIZATION_POWCTL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_INITIALIZATION_POWCTL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_INITIALIZATION_POWCTL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0            	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* power_up_start */
	stt_uint32 power_up_start	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_INITIALIZATION_POWCTL_DTE ;


/*****************************************************************************************/
/* POWSTAT                                                                               */
/* Power Up Status Register. Used in the power-up sequence for the SW to observe the pow */
/* er-up status.                                                                         */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_R0_DEFAULT_VALUE                              ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_R0_DEFAULT_VALUE_RESET_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_PHY_CALIBDONE_NOT_DONE_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_PHY_CALIBDONE_NOT_DONE_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_PHY_CALIBDONE_DONE_VALUE                      ( 0x1 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_POWER_UP_DONE_NOT_PERFORMED_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_POWER_UP_DONE_NOT_PERFORMED_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_POWER_UP_DONE_PORFORMED_VALUE                 ( 0x1 )


#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_OFFSET ( 0x00000008 )

#define CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_ADDRESS   	( CE_DDR_CONTROLLER_INITIALIZATION_ADDRESS + CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_OFFSET )
#define BL_DDR_CONTROLLER_INITIALIZATION_POWSTAT_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_INITIALIZATION_POWSTAT_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_INITIALIZATION_POWSTAT_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0           	: 30 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* phy_calibdone */
	stt_uint32 phy_calibdone	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* power_up_done */
	stt_uint32 power_up_done	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_INITIALIZATION_POWSTAT_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* MCFG                                                                                  */
/* This register configures the memory  related attributes of PCTL.                      */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_R4_DEFAULT_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_R4_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_TFAW_CFG_TRRDX4_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_TFAW_CFG_TRRDX5_VALUE               ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_TFAW_CFG_TRRDX5_VALUE_RESET_VALUE   ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_TFAW_CFG_TRRDX6_VALUE               ( 0x2 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_EXIT_MODE_SLOW_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_EXIT_MODE_SLOW_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_EXIT_MODE_FAST_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_TYPE_PRECHARGE_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_TYPE_PRECHARGE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_TYPE_ACTIVE_VALUE                ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_IDLE_DISABLE_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PD_IDLE_DISABLE_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PAGE_POLICY_OPEN_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PAGE_POLICY_OPEN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_PAGE_POLICY_CLOSE_VALUE             ( 0x2 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_DDR3_EN_DDR2_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_DDR3_EN_DDR2_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_DDR3_EN_DDR3_VALUE                  ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_R0_DEFAULT_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_R0_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_TWO_T_EN_DISABLE_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_TWO_T_EN_DISABLE_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_TWO_T_EN_ENABLE_VALUE               ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_BL8INT_EN_DISABLE_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_BL8INT_EN_DISABLE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_BL8INT_EN_ENABLE_VALUE              ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_BC4OTF_EN_DISABLE_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_BC4OTF_EN_DISABLE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_BC4OTF_EN_ENABLE_VALUE              ( 0x1 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_MEM_BL_BL4_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_MEM_BL_BL4_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_MEM_BL_BL8_VALUE                    ( 0x1 )


#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_ADDRESS   	( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ADDRESS + CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_OFFSET )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r4          	: 12 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tfaw_cfg */
	stt_uint32 tfaw_cfg    	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pd_exit_mode */
	stt_uint32 pd_exit_mode	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pd_type */
	stt_uint32 pd_type     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pd_idle */
	stt_uint32 pd_idle     	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* page_policy */
	stt_uint32 page_policy 	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr3_en */
	stt_uint32 ddr3_en     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* two_t_en */
	stt_uint32 two_t_en    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bl8int_en */
	stt_uint32 bl8int_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bc4otf_en */
	stt_uint32 bc4otf_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mem_bl */
	stt_uint32 mem_bl      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_DTE ;


/*****************************************************************************************/
/* PPCFG                                                                                 */
/* Partially Populated Memory Configuration                                              */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_R1_DEFAULT_VALUE                   ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_R1_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_RPMEM_EN_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_RPMEM_EN_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_R0_DEFAULT_VALUE                   ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_R0_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )


#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_ADDRESS   	( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ADDRESS + CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_OFFSET )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r1      	: 23 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rpmem_en */
	stt_uint32 rpmem_en	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_DTE ;


/*****************************************************************************************/
/* MSTAT                                                                                 */
/* This register provides information about the current status of the memory.            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_R0_DEFAULT_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_R0_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_POWER_DOWN_ACTIVE_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_POWER_DOWN_ACTIVE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_POWER_DOWN_POWER_DOWN_VALUE         ( 0x1 )


#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_OFFSET ( 0x00000008 )

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_ADDRESS   	( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ADDRESS + CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_OFFSET )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0        	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* power_down */
	stt_uint32 power_down	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_DTE ;


/*****************************************************************************************/
/* ODTCFG                                                                                */
/* This register gives the user full flexibility to set the desired termination value on */
/*  the memories during  write/read accesses. The register also allows the user to speci */
/* fy the logic level on the ODT signal for each  rank in the system during writes, read */
/* s and no activity.                                                                    */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_R0_DEFAULT_VALUE                               ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_R0_DEFAULT_VALUE_RESET_VALUE                   ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_DEFAULT_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_DEFAULT_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_WRITE_SEL_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_WRITE_SEL_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_WRITE_NSEL_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_WRITE_NSEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_READ_SEL_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_READ_SEL_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_READ_NSEL_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_RANK0_ODT_READ_NSEL_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )


#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_OFFSET ( 0x0000000C )

#define CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_ADDRESS   	( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ADDRESS + CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_OFFSET )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0                  	: 27 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rank0_odt_default */
	stt_uint32 rank0_odt_default   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rank0_odt_write_sel */
	stt_uint32 rank0_odt_write_sel 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rank0_odt_write_nsel */
	stt_uint32 rank0_odt_write_nsel	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rank0_odt_read_sel */
	stt_uint32 rank0_odt_read_sel  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rank0_odt_read_nsel */
	stt_uint32 rank0_odt_read_nsel 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* DTUPDES                                                                               */
/* DTU Status Register                                                                   */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_R0_DEFAULT_VALUE                              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_R0_DEFAULT_VALUE_RESET_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_RD_BEAT_MISSING_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_RD_BEAT_MISSING_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_EAFFL_DEFAULT_VALUE                       ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_EAFFL_DEFAULT_VALUE_RESET_VALUE           ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_RANDOM_ERROR_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_RANDOM_ERROR_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B7_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B7_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B6_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B6_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B5_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B5_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B4_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B4_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B3_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B3_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B2_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B2_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B1_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B1_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B0_DEFAULT_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_DTU_ERR_B0_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_DTU_1_DTUPDES_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUPDES_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUPDES_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPDES_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUPDES_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPDES_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0                 	: 18 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_beat_missing */
	stt_uint32 dtu_rd_beat_missing	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_eaffl */
	stt_uint32 dtu_eaffl          	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_random_error */
	stt_uint32 dtu_random_error   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b7 */
	stt_uint32 dtu_err_b7         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b6 */
	stt_uint32 dtu_err_b6         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b5 */
	stt_uint32 dtu_err_b5         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b4 */
	stt_uint32 dtu_err_b4         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b3 */
	stt_uint32 dtu_err_b3         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b2 */
	stt_uint32 dtu_err_b2         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b1 */
	stt_uint32 dtu_err_b1         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_err_b0 */
	stt_uint32 dtu_err_b0         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUPDES_DTE ;


/*****************************************************************************************/
/* DTUNA                                                                                 */
/* DTU Number of Random Addresses Created Register                                       */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUNA_DTU_NUM_ADDRESS_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUNA_DTU_NUM_ADDRESS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_1_DTUNA_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_DTU_1_DTUNA_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUNA_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUNA_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUNA_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUNA_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUNA_ADDRESS ), (v) )

typedef struct
{
	/* dtu_num_address */
	stt_uint32 dtu_num_address	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUNA_DTE ;


/*****************************************************************************************/
/* DTUNE                                                                                 */
/* DTU Number of Errors Register                                                         */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUNE_DTU_NUM_ERRORS_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUNE_DTU_NUM_ERRORS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_1_DTUNE_OFFSET ( 0x00000008 )

#define CE_DDR_CONTROLLER_DTU_1_DTUNE_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUNE_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUNE_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUNE_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUNE_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUNE_ADDRESS ), (v) )

typedef struct
{
	/* dtu_num_errors */
	stt_uint32 dtu_num_errors	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUNE_DTE ;


/*****************************************************************************************/
/* DTUPRD0                                                                               */
/* DTU Parallel Read 0 Register                                                          */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD0_DTU_ALLBITS_1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD0_DTU_ALLBITS_1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD0_DTU_ALLBITS_0_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD0_DTU_ALLBITS_0_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_1_DTUPRD0_OFFSET ( 0x0000000C )

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD0_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUPRD0_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD0_ADDRESS ), (v) )

typedef struct
{
	/* dtu_allbits_1 */
	stt_uint32 dtu_allbits_1	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_allbits_0 */
	stt_uint32 dtu_allbits_0	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUPRD0_DTE ;


/*****************************************************************************************/
/* DTUPRD1                                                                               */
/* DTU Parallel Read 1 Register                                                          */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD1_DTU_ALLBITS_3_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD1_DTU_ALLBITS_3_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD1_DTU_ALLBITS_2_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD1_DTU_ALLBITS_2_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_1_DTUPRD1_OFFSET ( 0x00000010 )

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD1_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUPRD1_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD1_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD1_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD1_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD1_ADDRESS ), (v) )

typedef struct
{
	/* dtu_allbits_3 */
	stt_uint32 dtu_allbits_3	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_allbits_2 */
	stt_uint32 dtu_allbits_2	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUPRD1_DTE ;


/*****************************************************************************************/
/* DTUPRD2                                                                               */
/* DTU Parallel Read 2 Register                                                          */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD2_DTU_ALLBITS_5_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD2_DTU_ALLBITS_5_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD2_DTU_ALLBITS_4_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD2_DTU_ALLBITS_4_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_1_DTUPRD2_OFFSET ( 0x00000014 )

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD2_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUPRD2_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD2_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD2_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD2_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD2_ADDRESS ), (v) )

typedef struct
{
	/* dtu_allbits_5 */
	stt_uint32 dtu_allbits_5	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_allbits_4 */
	stt_uint32 dtu_allbits_4	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUPRD2_DTE ;


/*****************************************************************************************/
/* DTUPRD3                                                                               */
/* DTU Parallel Read 3 Register                                                          */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD3_DTU_ALLBITS_7_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD3_DTU_ALLBITS_7_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD3_DTU_ALLBITS_6_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUPRD3_DTU_ALLBITS_6_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_1_DTUPRD3_OFFSET ( 0x00000018 )

#define CE_DDR_CONTROLLER_DTU_1_DTUPRD3_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUPRD3_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD3_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD3_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUPRD3_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUPRD3_ADDRESS ), (v) )

typedef struct
{
	/* dtu_allbits_7 */
	stt_uint32 dtu_allbits_7	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_allbits_6 */
	stt_uint32 dtu_allbits_6	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUPRD3_DTE ;


/*****************************************************************************************/
/* DTUAWDT                                                                               */
/* DTU Address Width Register                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R3_DEFAULT_VALUE                                 ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R3_DEFAULT_VALUE_RESET_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_NUMBER_RANKS_DEFAULT_VALUE                       ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_NUMBER_RANKS_DEFAULT_VALUE_RESET_VALUE           ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_NUMBER_RANKS_RANK_1_VALUE                        ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_NUMBER_RANKS_RANK_2_VALUE                        ( 0x1 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_NUMBER_RANKS_RANK_3_VALUE                        ( 0x2 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_NUMBER_RANKS_RANK_4_VALUE                        ( 0x3 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R2_DEFAULT_VALUE                                 ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R2_DEFAULT_VALUE_RESET_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ROW_ADDR_WIDTH_WIDTH_13BITS_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ROW_ADDR_WIDTH_WIDTH_14BITS_VALUE                ( 0x1 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ROW_ADDR_WIDTH_WIDTH_15BITS_VALUE                ( 0x2 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ROW_ADDR_WIDTH_WIDTH_15BITS_VALUE_RESET_VALUE    ( 0x2 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ROW_ADDR_WIDTH_WIDTH_16BITS_VALUE                ( 0x3 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R1_DEFAULT_VALUE                                 ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R1_DEFAULT_VALUE_RESET_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_BANK_ADDR_WIDTH_WIDTH_2BITS_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_BANK_ADDR_WIDTH_WIDTH_3BITS_VALUE                ( 0x1 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_BANK_ADDR_WIDTH_WIDTH_3BITS_VALUE_RESET_VALUE    ( 0x1 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R0_DEFAULT_VALUE                                 ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_R0_DEFAULT_VALUE_RESET_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_COLUMN_ADDR_WIDTH_WIDTH_9BITS_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_COLUMN_ADDR_WIDTH_WIDTH_10BITS_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_COLUMN_ADDR_WIDTH_WIDTH_10BITS_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_OFFSET ( 0x0000001C )

#define CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ADDRESS   	( CE_DDR_CONTROLLER_DTU_1_ADDRESS + CE_DDR_CONTROLLER_DTU_1_DTUAWDT_OFFSET )
#define BL_DDR_CONTROLLER_DTU_1_DTUAWDT_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_1_DTUAWDT_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_1_DTUAWDT_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r3               	: 21 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* number_ranks */
	stt_uint32 number_ranks     	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r2               	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* row_addr_width */
	stt_uint32 row_addr_width   	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r1               	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bank_addr_width */
	stt_uint32 bank_addr_width  	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0               	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* column_addr_width */
	stt_uint32 column_addr_width	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTUAWDT_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* TOGCNT1U                                                                              */
/* This register programs the internal 1us timer. The value should be updated every time */
/*  the frequency of  p_clk/p_clk_en changes. The counter is clocked by the APB clock, w */
/* hich is defined by p_clk enabled by  p_clk_en                                         */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_R0_DEFAULT_VALUE                            ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_R0_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_TOGGLE_COUNTER_1U_DEFAULT_VALUE             ( 0x64 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_TOGGLE_COUNTER_1U_DEFAULT_VALUE_RESET_VALUE ( 0x64 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0               	: 22 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* toggle_counter_1u */
	stt_uint32 toggle_counter_1u	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_DTE ;


/*****************************************************************************************/
/* TINIT                                                                                 */
/* This register programs the internal initialization timer.                             */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_T_INIT_DEFAULT_VALUE             ( 0xC8 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_T_INIT_DEFAULT_VALUE_RESET_VALUE ( 0xC8 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TINIT_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0    	: 23 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_init */
	stt_uint32 t_init	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TINIT_DTE ;


/*****************************************************************************************/
/* TRSTH                                                                                 */
/* Reset High Time Register                                                              */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_T_RSTH_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_T_RSTH_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_OFFSET ( 0x00000008 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0    	: 22 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rsth */
	stt_uint32 t_rsth	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_DTE ;


/*****************************************************************************************/
/* TOGCNT100N                                                                            */
/* This register programs the internal 100ns timer. The value should be updated every ti */
/* me the frequency of  p_clk/p_clk_en changes. The purpose of this register is to drive */
/*  a togcnt100n counter, which drives the  counter for the average periodic refresh int */
/* erval timer (TREFI).                                                                  */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_R0_DEFAULT_VALUE                              ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_R0_DEFAULT_VALUE_RESET_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_TOGGLE_COUNTER_100N_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_TOGGLE_COUNTER_100N_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_OFFSET ( 0x0000000C )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0                 	: 25 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* toggle_counter_100n */
	stt_uint32 toggle_counter_100n	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_DTE ;


/*****************************************************************************************/
/* TREFI                                                                                 */
/* t_refi Timing Register                                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_T_REFI_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_T_REFI_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_OFFSET ( 0x00000010 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TREFI_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0    	: 24 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_refi */
	stt_uint32 t_refi	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TREFI_DTE ;


/*****************************************************************************************/
/* TMRD                                                                                  */
/* t_mrd Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_T_MRD_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_T_MRD_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_OFFSET ( 0x00000014 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TMRD_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_mrd */
	stt_uint32 t_mrd	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TMRD_DTE ;


/*****************************************************************************************/
/* TRFC                                                                                  */
/* t_rfc Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_T_RFC_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_T_RFC_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_OFFSET ( 0x00000018 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRFC_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 23 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rfc */
	stt_uint32 t_rfc	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRFC_DTE ;


/*****************************************************************************************/
/* TRP                                                                                   */
/* t_trp Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_R0_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_R0_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_T_RP_DEFAULT_VALUE             ( 0x6 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_T_RP_DEFAULT_VALUE_RESET_VALUE ( 0x6 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_OFFSET ( 0x0000001C )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRP_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRP_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRP_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0  	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rp */
	stt_uint32 t_rp	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRP_DTE ;


/*****************************************************************************************/
/* TRTW                                                                                  */
/* t_rtw Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_T_RTW_DEFAULT_VALUE             ( 0x2 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_T_RTW_DEFAULT_VALUE_RESET_VALUE ( 0x2 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_OFFSET ( 0x00000020 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTW_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rtw */
	stt_uint32 t_rtw	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRTW_DTE ;


/*****************************************************************************************/
/* TAL                                                                                   */
/* AL Register                                                                           */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_R0_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_R0_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_T_AL_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_T_AL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_OFFSET ( 0x00000024 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TAL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TAL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TAL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0  	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_al */
	stt_uint32 t_al	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TAL_DTE ;


/*****************************************************************************************/
/* TCL                                                                                   */
/* CL Timing Register                                                                    */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_R0_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_R0_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_T_CL_DEFAULT_VALUE             ( 0x4 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_T_CL_DEFAULT_VALUE_RESET_VALUE ( 0x4 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_OFFSET ( 0x00000028 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0  	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_cl */
	stt_uint32 t_cl	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TCL_DTE ;


/*****************************************************************************************/
/* TCWL                                                                                  */
/* CWL Timing Register                                                                   */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_T_CWL_DEFAULT_VALUE             ( 0x3 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_T_CWL_DEFAULT_VALUE_RESET_VALUE ( 0x3 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_OFFSET ( 0x0000002C )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCWL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_cwl */
	stt_uint32 t_cwl	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TCWL_DTE ;


/*****************************************************************************************/
/* TRAS                                                                                  */
/* t_ras Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_T_RAS_DEFAULT_VALUE             ( 0x10 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_T_RAS_DEFAULT_VALUE_RESET_VALUE ( 0x10 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_OFFSET ( 0x00000030 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRAS_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 27 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_ras */
	stt_uint32 t_ras	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRAS_DTE ;


/*****************************************************************************************/
/* TRC                                                                                   */
/* t_rc Timing Register                                                                  */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_R0_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_R0_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_T_RC_DEFAULT_VALUE             ( 0x16 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_T_RC_DEFAULT_VALUE_RESET_VALUE ( 0x16 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_OFFSET ( 0x00000034 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRC_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRC_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRC_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0  	: 26 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rc */
	stt_uint32 t_rc	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRC_DTE ;


/*****************************************************************************************/
/* TRCD                                                                                  */
/* t_rcd Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_T_RCD_DEFAULT_VALUE             ( 0x6 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_T_RCD_DEFAULT_VALUE_RESET_VALUE ( 0x6 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_OFFSET ( 0x00000038 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRCD_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rcd */
	stt_uint32 t_rcd	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRCD_DTE ;


/*****************************************************************************************/
/* TRRD                                                                                  */
/* t_rrd Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_T_RRD_DEFAULT_VALUE             ( 0x4 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_T_RRD_DEFAULT_VALUE_RESET_VALUE ( 0x4 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_OFFSET ( 0x0000003C )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRRD_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rrd */
	stt_uint32 t_rrd	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRRD_DTE ;


/*****************************************************************************************/
/* TRTP                                                                                  */
/* t_rtp Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_T_RTP_DEFAULT_VALUE             ( 0x3 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_T_RTP_DEFAULT_VALUE_RESET_VALUE ( 0x3 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_OFFSET ( 0x00000040 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRTP_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rtp */
	stt_uint32 t_rtp	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRTP_DTE ;


/*****************************************************************************************/
/* TWR                                                                                   */
/* t_wr Register                                                                         */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_R0_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_R0_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_T_WR_DEFAULT_VALUE             ( 0x6 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_T_WR_DEFAULT_VALUE_RESET_VALUE ( 0x6 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_OFFSET ( 0x00000044 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TWR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TWR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TWR_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0  	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_wr */
	stt_uint32 t_wr	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TWR_DTE ;


/*****************************************************************************************/
/* TWTR                                                                                  */
/* t_wtr Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_T_WTR_DEFAULT_VALUE             ( 0x4 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_T_WTR_DEFAULT_VALUE_RESET_VALUE ( 0x4 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_OFFSET ( 0x00000048 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TWTR_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_wtr */
	stt_uint32 t_wtr	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TWTR_DTE ;


/*****************************************************************************************/
/* TEXSR                                                                                 */
/* t_exsr Timing Register                                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_T_EXSR_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_T_EXSR_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_OFFSET ( 0x0000004C )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0    	: 22 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_exsr */
	stt_uint32 t_exsr	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_DTE ;


/*****************************************************************************************/
/* TXP                                                                                   */
/* t_xp Timing Register                                                                  */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_R0_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_R0_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_T_XP_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_T_XP_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_OFFSET ( 0x00000050 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TXP_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TXP_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TXP_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0  	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_xp */
	stt_uint32 t_xp	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TXP_DTE ;


/*****************************************************************************************/
/* TXPDLL                                                                                */
/* Slow Exit-Precharge Power Down  Timing Register                                       */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_T_XPDLL_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_T_XPDLL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_OFFSET ( 0x00000054 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0     	: 26 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_xpdll */
	stt_uint32 t_xpdll	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_DTE ;


/*****************************************************************************************/
/* TZQCS                                                                                 */
/* t_zqcs Timing Register                                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_T_ZQCS_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_T_ZQCS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_OFFSET ( 0x00000058 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0    	: 25 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_zqcs */
	stt_uint32 t_zqcs	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_DTE ;


/*****************************************************************************************/
/* TZQCSI                                                                                */
/* t_zqcsi Timing Register                                                               */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_T_ZQCSI_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_T_ZQCSI_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_OFFSET ( 0x0000005C )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_ADDRESS ), (v) )

typedef struct
{
	/* t_zqcsi */
	stt_uint32 t_zqcsi	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_DTE ;


/*****************************************************************************************/
/* TDQS                                                                                  */
/* t_dqs Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_T_DQS_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_T_DQS_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_OFFSET ( 0x00000060 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TDQS_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_dqs */
	stt_uint32 t_dqs	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TDQS_DTE ;


/*****************************************************************************************/
/* TCKSRE                                                                                */
/* _cksre Timing Register                                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_T_CKSRE_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_T_CKSRE_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_OFFSET ( 0x00000064 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0     	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_cksre */
	stt_uint32 t_cksre	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_DTE ;


/*****************************************************************************************/
/* TCKSRX                                                                                */
/* t_cksrx Timing Register                                                               */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_T_CKSRX_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_T_CKSRX_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_OFFSET ( 0x00000068 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0     	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_cksrx */
	stt_uint32 t_cksrx	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_DTE ;


/*****************************************************************************************/
/* TCKE                                                                                  */
/* t_cke Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_T_CKE_DEFAULT_VALUE             ( 0x3 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_T_CKE_DEFAULT_VALUE_RESET_VALUE ( 0x3 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_OFFSET ( 0x0000006C )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TCKE_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_cke */
	stt_uint32 t_cke	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TCKE_DTE ;


/*****************************************************************************************/
/* TMOD                                                                                  */
/* t_mod Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_R0_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_R0_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_T_MOD_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_T_MOD_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_OFFSET ( 0x00000070 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TMOD_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0   	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_mod */
	stt_uint32 t_mod	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TMOD_DTE ;


/*****************************************************************************************/
/* TRSTL                                                                                 */
/* Reset Low Timing Register                                                             */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_T_RSTL_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_T_RSTL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_OFFSET ( 0x00000074 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0    	: 25 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_rstl */
	stt_uint32 t_rstl	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_DTE ;


/*****************************************************************************************/
/* TZQCL                                                                                 */
/* t_zqcl Timing Register                                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_R0_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_R0_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_T_ZQCL_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_T_ZQCL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_OFFSET ( 0x00000078 )

#define CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_ADDRESS   	( CE_DDR_CONTROLLER_TIMING_REGISTERS_ADDRESS + CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_OFFSET )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0    	: 22 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_zqcl */
	stt_uint32 t_zqcl	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* DWLCFG0                                                                               */
/* DWLCFG0                                                                               */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG0_R0_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG0_R0_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG0_T_ADWL_VEC_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG0_T_ADWL_VEC_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DWLCFG0_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG0_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DWLCFG0_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG0_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0        	: 23 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_adwl_vec */
	stt_uint32 t_adwl_vec	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DWLCFG0_DTE ;


/*****************************************************************************************/
/* DWLCFG1                                                                               */
/* DWLCFG1                                                                               */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG1_R0_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG1_R0_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG1_T_ADWL_VEC_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG1_T_ADWL_VEC_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DWLCFG1_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG1_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DWLCFG1_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG1_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG1_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG1_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG1_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0        	: 23 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_adwl_vec */
	stt_uint32 t_adwl_vec	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DWLCFG1_DTE ;


/*****************************************************************************************/
/* DWLCFG2                                                                               */
/* DWLCFG2                                                                               */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG2_R0_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG2_R0_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG2_T_ADWL_VEC_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG2_T_ADWL_VEC_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DWLCFG2_OFFSET ( 0x00000008 )

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG2_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DWLCFG2_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG2_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG2_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG2_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG2_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0        	: 23 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_adwl_vec */
	stt_uint32 t_adwl_vec	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DWLCFG2_DTE ;


/*****************************************************************************************/
/* DWLCFG3                                                                               */
/* DWLCFG3                                                                               */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG3_R0_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG3_R0_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG3_T_ADWL_VEC_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DWLCFG3_T_ADWL_VEC_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DWLCFG3_OFFSET ( 0x0000000C )

#define CE_DDR_CONTROLLER_DTU_2_DWLCFG3_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DWLCFG3_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG3_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG3_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DWLCFG3_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DWLCFG3_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0        	: 23 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* t_adwl_vec */
	stt_uint32 t_adwl_vec	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DWLCFG3_DTE ;


/*****************************************************************************************/
/* DTUWACTL                                                                              */
/* DTU Write Address Control                                                             */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_RANK_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_RANK_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_ROW_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_ROW_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_BANK_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_BANK_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_COL_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_DTU_WR_COL_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_OFFSET ( 0x00000090 )

#define CE_DDR_CONTROLLER_DTU_2_DTUWACTL_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUWACTL_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUWACTL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWACTL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUWACTL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWACTL_ADDRESS ), (v) )

typedef struct
{
	/* dtu_wr_rank */
	stt_uint32 dtu_wr_rank	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_row */
	stt_uint32 dtu_wr_row 	: 17 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_bank */
	stt_uint32 dtu_wr_bank	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_col */
	stt_uint32 dtu_wr_col 	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUWACTL_DTE ;


/*****************************************************************************************/
/* DTURACTL                                                                              */
/* DTU Read Address Control Register                                                     */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_RANK_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_RANK_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_ROW_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_ROW_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_BANK_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_BANK_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_COL_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_DTU_RD_COL_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_OFFSET ( 0x00000094 )

#define CE_DDR_CONTROLLER_DTU_2_DTURACTL_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTURACTL_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTURACTL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTURACTL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTURACTL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTURACTL_ADDRESS ), (v) )

typedef struct
{
	/* dtu_rd_rank */
	stt_uint32 dtu_rd_rank	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_row */
	stt_uint32 dtu_rd_row 	: 17 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_bank */
	stt_uint32 dtu_rd_bank	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_col */
	stt_uint32 dtu_rd_col 	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTURACTL_DTE ;


/*****************************************************************************************/
/* DTUCFG                                                                                */
/* DTU Configuration                                                                     */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_R0_DEFAULT_VALUE                              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_R0_DEFAULT_VALUE_RESET_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_ROW_INCREMENTS_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_ROW_INCREMENTS_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_WR_MULTI_RD_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_WR_MULTI_RD_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_DATA_MASK_EN_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_DATA_MASK_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_TARGET_LANE_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_TARGET_LANE_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_GENERATE_RANDOM_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_GENERATE_RANDOM_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_INCR_BANKS_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_INCR_BANKS_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_INCR_COLS_DEFAULT_VALUE                   ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_INCR_COLS_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_NALEN_DEFAULT_VALUE                       ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_NALEN_DEFAULT_VALUE_RESET_VALUE           ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_ENABLE_DISABLE_VALUE                      ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_ENABLE_DISABLE_VALUE_RESET_VALUE          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_DTU_ENABLE_ENABLE_VALUE                       ( 0x1 )


#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_OFFSET ( 0x00000098 )

#define CE_DDR_CONTROLLER_DTU_2_DTUCFG_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUCFG_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUCFG_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUCFG_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUCFG_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUCFG_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0                 	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_row_increments */
	stt_uint32 dtu_row_increments 	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_multi_rd */
	stt_uint32 dtu_wr_multi_rd    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_data_mask_en */
	stt_uint32 dtu_data_mask_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_target_lane */
	stt_uint32 dtu_target_lane    	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_generate_random */
	stt_uint32 dtu_generate_random	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_incr_banks */
	stt_uint32 dtu_incr_banks     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_incr_cols */
	stt_uint32 dtu_incr_cols      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_nalen */
	stt_uint32 dtu_nalen          	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_enable */
	stt_uint32 dtu_enable         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUCFG_DTE ;


/*****************************************************************************************/
/* DTUECTL                                                                               */
/* DTU Execute Control Register                                                          */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_R0_DEFAULT_VALUE                          ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_R0_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_WR_MULTI_RD_RST_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_WR_MULTI_RD_RST_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_RUN_ERR_REPORTS_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_RUN_ERR_REPORTS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_RUN_DTU_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_RUN_DTU_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_OFFSET ( 0x0000009C )

#define CE_DDR_CONTROLLER_DTU_2_DTUECTL_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUECTL_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUECTL_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUECTL_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUECTL_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUECTL_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0             	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* wr_multi_rd_rst */
	stt_uint32 wr_multi_rd_rst	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* run_err_reports */
	stt_uint32 run_err_reports	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* run_dtu */
	stt_uint32 run_dtu        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUECTL_DTE ;


/*****************************************************************************************/
/* DTUWD0                                                                                */
/* DTU Write Data #0 Register                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE3_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE3_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE2_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE2_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE0_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_DTU_WR_BYTE0_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_OFFSET ( 0x000000A0 )

#define CE_DDR_CONTROLLER_DTU_2_DTUWD0_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUWD0_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD0_ADDRESS ), (v) )

typedef struct
{
	/* dtu_wr_byte3 */
	stt_uint32 dtu_wr_byte3	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte2 */
	stt_uint32 dtu_wr_byte2	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte1 */
	stt_uint32 dtu_wr_byte1	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte0 */
	stt_uint32 dtu_wr_byte0	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUWD0_DTE ;


/*****************************************************************************************/
/* DTUWD1                                                                                */
/* DTU Write Data #1 Register                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE7_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE7_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE6_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE6_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE5_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE5_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE4_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_DTU_WR_BYTE4_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_OFFSET ( 0x000000A4 )

#define CE_DDR_CONTROLLER_DTU_2_DTUWD1_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUWD1_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD1_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD1_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD1_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD1_ADDRESS ), (v) )

typedef struct
{
	/* dtu_wr_byte7 */
	stt_uint32 dtu_wr_byte7	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte6 */
	stt_uint32 dtu_wr_byte6	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte5 */
	stt_uint32 dtu_wr_byte5	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte4 */
	stt_uint32 dtu_wr_byte4	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUWD1_DTE ;


/*****************************************************************************************/
/* DTUWD2                                                                                */
/* DTU Write Data #2 Register                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE11_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE11_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE10_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE10_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE9_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE9_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE8_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_DTU_WR_BYTE8_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_OFFSET ( 0x000000A8 )

#define CE_DDR_CONTROLLER_DTU_2_DTUWD2_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUWD2_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD2_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD2_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD2_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD2_ADDRESS ), (v) )

typedef struct
{
	/* dtu_wr_byte11 */
	stt_uint32 dtu_wr_byte11	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte10 */
	stt_uint32 dtu_wr_byte10	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte9 */
	stt_uint32 dtu_wr_byte9 	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte8 */
	stt_uint32 dtu_wr_byte8 	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUWD2_DTE ;


/*****************************************************************************************/
/* DTUWD3                                                                                */
/* DTU Write Data #3 Register                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE15_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE15_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE14_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE14_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE13_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE13_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE12_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_DTU_WR_BYTE12_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_OFFSET ( 0x000000AC )

#define CE_DDR_CONTROLLER_DTU_2_DTUWD3_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUWD3_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD3_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD3_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUWD3_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWD3_ADDRESS ), (v) )

typedef struct
{
	/* dtu_wr_byte15 */
	stt_uint32 dtu_wr_byte15	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte14 */
	stt_uint32 dtu_wr_byte14	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte13 */
	stt_uint32 dtu_wr_byte13	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_wr_byte12 */
	stt_uint32 dtu_wr_byte12	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUWD3_DTE ;


/*****************************************************************************************/
/* DTUWDM                                                                                */
/* DTU Write Data Mask Register                                                          */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUWDM_R0_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWDM_R0_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWDM_DM_WR_BYTE_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUWDM_DM_WR_BYTE_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUWDM_OFFSET ( 0x000000B0 )

#define CE_DDR_CONTROLLER_DTU_2_DTUWDM_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUWDM_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUWDM_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWDM_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUWDM_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUWDM_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0        	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dm_wr_byte */
	stt_uint32 dm_wr_byte	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUWDM_DTE ;


/*****************************************************************************************/
/* DTURD0                                                                                */
/* DTU Read Data #0 Register                                                             */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE3_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE3_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE2_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE2_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE0_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD0_DTU_RD_BYTE0_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTURD0_OFFSET ( 0x000000B4 )

#define CE_DDR_CONTROLLER_DTU_2_DTURD0_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTURD0_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTURD0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTURD0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD0_ADDRESS ), (v) )

typedef struct
{
	/* dtu_rd_byte3 */
	stt_uint32 dtu_rd_byte3	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte2 */
	stt_uint32 dtu_rd_byte2	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte1 */
	stt_uint32 dtu_rd_byte1	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte0 */
	stt_uint32 dtu_rd_byte0	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTURD0_DTE ;


/*****************************************************************************************/
/* DTURD1                                                                                */
/* DTU Read Data #1 Register                                                             */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE7_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE7_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE6_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE6_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE5_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE5_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE4_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD1_DTU_RD_BYTE4_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTURD1_OFFSET ( 0x000000B8 )

#define CE_DDR_CONTROLLER_DTU_2_DTURD1_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTURD1_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTURD1_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD1_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTURD1_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD1_ADDRESS ), (v) )

typedef struct
{
	/* dtu_rd_byte7 */
	stt_uint32 dtu_rd_byte7	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte6 */
	stt_uint32 dtu_rd_byte6	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte5 */
	stt_uint32 dtu_rd_byte5	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte4 */
	stt_uint32 dtu_rd_byte4	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTURD1_DTE ;


/*****************************************************************************************/
/* DTURD2                                                                                */
/* DTU Read Data #2 Register                                                             */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE11_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE11_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE10_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE10_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE9_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE9_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE8_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD2_DTU_RD_BYTE8_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTURD2_OFFSET ( 0x000000BC )

#define CE_DDR_CONTROLLER_DTU_2_DTURD2_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTURD2_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTURD2_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD2_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTURD2_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD2_ADDRESS ), (v) )

typedef struct
{
	/* dtu_rd_byte11 */
	stt_uint32 dtu_rd_byte11	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte10 */
	stt_uint32 dtu_rd_byte10	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte9 */
	stt_uint32 dtu_rd_byte9 	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte8 */
	stt_uint32 dtu_rd_byte8 	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTURD2_DTE ;


/*****************************************************************************************/
/* DTURD3                                                                                */
/* DTU Read Data #3 Register                                                             */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE15_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE15_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE14_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE14_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE13_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE13_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE12_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTURD3_DTU_RD_BYTE12_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTURD3_OFFSET ( 0x000000C0 )

#define CE_DDR_CONTROLLER_DTU_2_DTURD3_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTURD3_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTURD3_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD3_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTURD3_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTURD3_ADDRESS ), (v) )

typedef struct
{
	/* dtu_rd_byte15 */
	stt_uint32 dtu_rd_byte15	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte14 */
	stt_uint32 dtu_rd_byte14	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte13 */
	stt_uint32 dtu_rd_byte13	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtu_rd_byte12 */
	stt_uint32 dtu_rd_byte12	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTURD3_DTE ;


/*****************************************************************************************/
/* DTULFSRWD                                                                             */
/* DTU LFSR Seed for Write Data Generation Register                                      */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTULFSRWD_DTU_LFSR_WSEED_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTULFSRWD_DTU_LFSR_WSEED_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTULFSRWD_OFFSET ( 0x000000C4 )

#define CE_DDR_CONTROLLER_DTU_2_DTULFSRWD_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTULFSRWD_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTULFSRWD_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTULFSRWD_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTULFSRWD_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTULFSRWD_ADDRESS ), (v) )

typedef struct
{
	/* dtu_lfsr_wseed */
	stt_uint32 dtu_lfsr_wseed	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTULFSRWD_DTE ;


/*****************************************************************************************/
/* DTULFSRRD                                                                             */
/* DTU LFSR Seed for Read Data Generation Register                                       */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTULFSRRD_DTU_LFSR_RSEED_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTULFSRRD_DTU_LFSR_RSEED_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTULFSRRD_OFFSET ( 0x000000C8 )

#define CE_DDR_CONTROLLER_DTU_2_DTULFSRRD_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTULFSRRD_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTULFSRRD_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTULFSRRD_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTULFSRRD_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTULFSRRD_ADDRESS ), (v) )

typedef struct
{
	/* dtu_lfsr_rseed */
	stt_uint32 dtu_lfsr_rseed	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTULFSRRD_DTE ;


/*****************************************************************************************/
/* DTUEAF                                                                                */
/* DTU Error Address FIFO Register                                                       */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_RANK_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_RANK_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_ROW_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_ROW_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_BANK_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_BANK_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_COLUMN_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_EA_COLUMN_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_OFFSET ( 0x000000CC )

#define CE_DDR_CONTROLLER_DTU_2_DTUEAF_ADDRESS   	( CE_DDR_CONTROLLER_DTU_2_ADDRESS + CE_DDR_CONTROLLER_DTU_2_DTUEAF_OFFSET )
#define BL_DDR_CONTROLLER_DTU_2_DTUEAF_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_DTU_2_DTUEAF_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_DTU_2_DTUEAF_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_DTU_2_DTUEAF_ADDRESS ), (v) )

typedef struct
{
	/* ea_rank */
	stt_uint32 ea_rank  	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ea_row */
	stt_uint32 ea_row   	: 17 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ea_bank */
	stt_uint32 ea_bank  	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ea_column */
	stt_uint32 ea_column	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTUEAF_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* PHYCR                                                                                 */
/* PHY Configuration Register                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DTT_DEFAULT_VALUE                       ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DTT_DEFAULT_VALUE_RESET_VALUE           ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_R1_DEFAULT_VALUE                        ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_R1_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ADT_EN_DISABLE_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ADT_EN_ENABLE_VALUE                     ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ADT_EN_ENABLE_VALUE_RESET_VALUE         ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_R0_DEFAULT_VALUE                        ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_R0_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_CMD_DLL_SRST_DEFAULT_VALUE              ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_CMD_DLL_SRST_DEFAULT_VALUE_RESET_VALUE  ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_BYTE_DLL_SRST_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_BYTE_DLL_SRST_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ITMRST_DEFAULT_VALUE                    ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ITMRST_DEFAULT_VALUE_RESET_VALUE        ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTCMP_DISABLE_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTCMP_ENABLE_VALUE                     ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTCMP_ENABLE_VALUE_RESET_VALUE         ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTLM_NO_LIMIT_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTLM_NO_LIMIT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTLM_DRIFT_90DEG_VALUE                 ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTLM_DRIFT_180DEG_VALUE                ( 0x2 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DFTLM_DRIFT_270DEG_VALUE                ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DQSCFG_ACTIVE_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DQSCFG_ACTIVE_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_DQSCFG_PASSIVE_VALUE                    ( 0x1 )


#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_PHYCR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_PHYCR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_PHYCR_ADDRESS ), (v) )

typedef struct
{
	/* dtt */
	stt_uint32 dtt          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r1           	: 22 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* adt_en */
	stt_uint32 adt_en       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cmd_dll_srst */
	stt_uint32 cmd_dll_srst 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* byte_dll_srst */
	stt_uint32 byte_dll_srst	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* itmrst */
	stt_uint32 itmrst       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dftcmp */
	stt_uint32 dftcmp       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dftlm */
	stt_uint32 dftlm        	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqscfg */
	stt_uint32 dqscfg       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_PHYCR_DTE ;


/*****************************************************************************************/
/* PHYSR                                                                                 */
/* This register is normally read-only but is reset to zeros when written to and allows  */
/* the error flags to be  cleared.                                                       */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_R2_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_R2_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_BYP_HLD_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_BYP_HLD_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_ADT_ACTIVE_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_ADT_ACTIVE_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_R1_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_R1_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DTIERR_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DTIERR_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DTERR_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DTERR_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_R0_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_R0_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DFTERR_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DFTERR_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DRIFT_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_DRIFT_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )


#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_PHYSR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_PHYSR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_PHYSR_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r2        	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* byp_hld */
	stt_uint32 byp_hld   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* adt_active */
	stt_uint32 adt_active	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r1        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dtierr */
	stt_uint32 dtierr    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dterr */
	stt_uint32 dterr     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dfterr */
	stt_uint32 dfterr    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* drift */
	stt_uint32 drift     	: 18 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_PHYSR_DTE ;


/*****************************************************************************************/
/* IOCR                                                                                  */
/* I/O Configuration Register                                                            */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_CMD_OE_CTL_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_CMD_OE_CTL_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_AUTO_CMD_IDDQ_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_AUTO_CMD_IDDQ_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_AUTO_BYTE_IDDQ_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_AUTO_BYTE_IDDQ_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_AUTO_BYTE_DLL_BYP_INACTIVE_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_AUTO_BYTE_DLL_BYP_INACTIVE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_AUTO_BYTE_DLL_BYP_ACTIVE_VALUE               ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_DLL_BYP_UNAFFECTED_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_DLL_BYP_UNAFFECTED_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_DLL_BYP_BYPASS_VALUE                    ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_CMD_SSTL_IDDQ_UNAFFECTED_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_CMD_SSTL_IDDQ_UNAFFECTED_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_CMD_SSTL_IDDQ_IDDQ_VALUE                     ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_SSTL_IDDQ_UNAFFECTED_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_SSTL_IDDQ_UNAFFECTED_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_SSTL_IDDQ_IDDQ_VALUE                    ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_TEST_EN_DISABLE_VALUE                        ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_TEST_EN_DISABLE_VALUE_RESET_VALUE            ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_TEST_EN_ENABLE_VALUE                         ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_R1_DEFAULT_VALUE                             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_R1_DEFAULT_VALUE_RESET_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_OE_CTL_DEFAULT_VALUE                    ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_BYTE_OE_CTL_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_R0_DEFAULT_VALUE                             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_R0_DEFAULT_VALUE_RESET_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_SIO_DEFAULT_VALUE                            ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_SIO_DEFAULT_VALUE_RESET_VALUE                ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_DS_DEFAULT_VALUE                             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_DS_DEFAULT_VALUE_RESET_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_DYN_SOC_ODT_DEFAULT_VALUE                    ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_DYN_SOC_ODT_DEFAULT_VALUE_RESET_VALUE        ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_SOC_ODT_EN_DEFAULT_VALUE                     ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_SOC_ODT_EN_DEFAULT_VALUE_RESET_VALUE         ( 0x1 )


#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_OFFSET ( 0x00000008 )

#define CE_DDR_CONTROLLER_PHY_STATUS_IOCR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_IOCR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_IOCR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_IOCR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_IOCR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_IOCR_ADDRESS ), (v) )

typedef struct
{
	/* cmd_oe_ctl */
	stt_uint32 cmd_oe_ctl       	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* auto_cmd_iddq */
	stt_uint32 auto_cmd_iddq    	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* auto_byte_iddq */
	stt_uint32 auto_byte_iddq   	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* auto_byte_dll_byp */
	stt_uint32 auto_byte_dll_byp	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* byte_dll_byp */
	stt_uint32 byte_dll_byp     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cmd_sstl_iddq */
	stt_uint32 cmd_sstl_iddq    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* byte_sstl_iddq */
	stt_uint32 byte_sstl_iddq   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* test_en */
	stt_uint32 test_en          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r1               	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* byte_oe_ctl */
	stt_uint32 byte_oe_ctl      	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0               	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sio */
	stt_uint32 sio              	: 9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ds */
	stt_uint32 ds               	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dyn_soc_odt */
	stt_uint32 dyn_soc_odt      	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* soc_odt_en */
	stt_uint32 soc_odt_en       	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_IOCR_DTE ;


/*****************************************************************************************/
/* RSLR0                                                                                 */
/* Rank 0 System Latency Register    NOTE! As these registers are dynamically updated ou */
/* tside of the SIU block, there is an additional latency  when updating the register va */
/* lues after a software write. To ensure reliable operation, at least two  p_clk cycles */
/*  must be allowed between consecutive writes and reads to a single RSLR register.      */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_R0_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_R0_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_SL1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_SL1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_SL0_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_SL0_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_OFFSET ( 0x0000000C )

#define CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_RSLR0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_RSLR0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_RSLR0_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0 	: 26 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sl1 */
	stt_uint32 sl1	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sl0 */
	stt_uint32 sl0	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_RSLR0_DTE ;


/*****************************************************************************************/
/* RDGR0                                                                                 */
/* Rank 0 DQS Gating Register    As these registers are dynamically updated outside of t */
/* he SIU block, there is an additional latency  when updating the register values after */
/*  a software write. To ensure reliable operation, at least two  p_clk cycles must be a */
/* llowed between consecutive writes and reads to a single RDGR register.                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_DQSSEL1_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_DQSSEL1_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_DQSSEL0_DEFAULT_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_DQSSEL0_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_OFFSET ( 0x0000001C )

#define CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_RDGR0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_RDGR0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_RDGR0_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0     	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqssel1 */
	stt_uint32 dqssel1	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqssel0 */
	stt_uint32 dqssel0	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_RDGR0_DTE ;


/*****************************************************************************************/
/* ZQCR                                                                                  */
/* ZQ Control Register                                                                   */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_TRIG_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_TRIG_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_R1_DEFAULT_VALUE                          ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_R1_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_CLK_SEL_DIV_BY_32_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_CLK_SEL_DIV_BY_32_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_CLK_SEL_DIV_BY_64_VALUE             ( 0x1 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_OVRD_EN_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_OVRD_EN_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZPROG_DEFAULT_VALUE                       ( 0x7B )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZPROG_DEFAULT_VALUE_RESET_VALUE           ( 0x7B )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_OVRD_DATA_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ZCTRL_OVRD_DATA_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_OFFSET ( 0x0000002C )

#define CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_ZQCR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_ZQCR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_ZQCR_ADDRESS ), (v) )

typedef struct
{
	/* zctrl_trig */
	stt_uint32 zctrl_trig     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r1             	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* zctrl_clk_sel */
	stt_uint32 zctrl_clk_sel  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* zctrl_ovrd_en */
	stt_uint32 zctrl_ovrd_en  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* zprog */
	stt_uint32 zprog          	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* zctrl_ovrd_data */
	stt_uint32 zctrl_ovrd_data	: 20 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_ZQCR_DTE ;


/*****************************************************************************************/
/* ZQSR                                                                                  */
/* ZQ Status Register                                                                    */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ZCTRL_DONE_DEFAULT_VALUE                 ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ZCTRL_DONE_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ZCTRL_ERROR_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ZCTRL_ERROR_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_R0_DEFAULT_VALUE                         ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_R0_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_TERM_PU_STATUS_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_TERM_PU_STATUS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_TERM_PD_STATUS_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_TERM_PD_STATUS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_DRV_PU_STATUS_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_DRV_PU_STATUS_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_DRV_PD_STATUS_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_DRV_PD_STATUS_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ZCTRL_INT_DEFAULT_VALUE                  ( 0x14A )
#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ZCTRL_INT_DEFAULT_VALUE_RESET_VALUE      ( 0x14A )


#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_OFFSET ( 0x00000030 )

#define CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_ZQSR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_ZQSR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_ZQSR_ADDRESS ), (v) )

typedef struct
{
	/* zctrl_done */
	stt_uint32 zctrl_done    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* zctrl_error */
	stt_uint32 zctrl_error   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0            	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* term_pu_status */
	stt_uint32 term_pu_status	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* term_pd_status */
	stt_uint32 term_pd_status	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* drv_pu_status */
	stt_uint32 drv_pu_status 	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* drv_pd_status */
	stt_uint32 drv_pd_status 	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* zctrl_int */
	stt_uint32 zctrl_int     	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_ZQSR_DTE ;


/*****************************************************************************************/
/* DLLCR                                                                                 */
/* DLL Control Register                                                                  */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR_DLL_CTRL_DEFAULT_VALUE             ( 0x3737000 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR_DLL_CTRL_DEFAULT_VALUE_RESET_VALUE ( 0x3737000 )


#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR_OFFSET ( 0x00000040 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DLLCR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR_ADDRESS ), (v) )

typedef struct
{
	/* dll_ctrl */
	stt_uint32 dll_ctrl	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DLLCR_DTE ;


/*****************************************************************************************/
/* DLLCR0                                                                                */
/* DLL 0 Control Register                                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_DD_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_DD_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_DRSVD_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_DRSVD_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_ATESTEN_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_ATESTEN_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_PHASE_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_PHASE_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_SSTART_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_SSTART_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_MFWDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_MFWDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_MFBDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_MFBDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_SFWDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_SFWDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_SFBDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_SFBDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )


#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_OFFSET ( 0x00000044 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR0_ADDRESS ), (v) )

typedef struct
{
	/* dd */
	stt_uint32 dd     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0     	: 11 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* drsvd */
	stt_uint32 drsvd  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* atesten */
	stt_uint32 atesten	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* phase */
	stt_uint32 phase  	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sstart */
	stt_uint32 sstart 	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mfwdly */
	stt_uint32 mfwdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mfbdly */
	stt_uint32 mfbdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sfwdly */
	stt_uint32 sfwdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sfbdly */
	stt_uint32 sfbdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DLLCR0_DTE ;


/*****************************************************************************************/
/* DLLCR1                                                                                */
/* DLL 1 Control Register                                                                */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_DD_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_DD_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_DRSVD_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_DRSVD_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_ATESTEN_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_ATESTEN_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_PHASE_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_PHASE_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_SSTART_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_SSTART_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_MFWDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_MFWDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_MFBDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_MFBDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_SFWDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_SFWDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_SFBDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_SFBDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )


#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_OFFSET ( 0x00000048 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR1_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR1_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR1_ADDRESS ), (v) )

typedef struct
{
	/* dd */
	stt_uint32 dd     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0     	: 11 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* drsvd */
	stt_uint32 drsvd  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* atesten */
	stt_uint32 atesten	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* phase */
	stt_uint32 phase  	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sstart */
	stt_uint32 sstart 	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mfwdly */
	stt_uint32 mfwdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mfbdly */
	stt_uint32 mfbdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sfwdly */
	stt_uint32 sfwdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sfbdly */
	stt_uint32 sfbdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DLLCR1_DTE ;


/*****************************************************************************************/
/* DLLCR9                                                                                */
/* DLL Control Register 9 (2-8 are reserved for supporting devices with data bus wider t */
/* han 16 bit).                                                                          */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_DD_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_DD_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_R4_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_R4_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_DRSVD_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_DRSVD_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_ATESTEN_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_ATESTEN_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_R2_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_R2_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_MFWDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_MFWDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_MFBDLY_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_MFBDLY_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )


#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_OFFSET ( 0x00000068 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR9_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DLLCR9_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DLLCR9_ADDRESS ), (v) )

typedef struct
{
	/* dd */
	stt_uint32 dd     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r4     	: 11 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* drsvd */
	stt_uint32 drsvd  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* atesten */
	stt_uint32 atesten	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r2     	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mfwdly */
	stt_uint32 mfwdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mfbdly */
	stt_uint32 mfbdly 	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RESERVED */
	stt_uint32 r0     	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DLLCR9_DTE ;


/*****************************************************************************************/
/* DQTR0                                                                                 */
/* DQ 0 Timing Register    DQ Delay. Used to adjust the delay of the data relative to th */
/* e nominal  delay that is matched to the delay of the data strobes through the slave   */
/* DLL and clock tree. Every four bits of this register control the delay of a  differen */
/* t data bit in the byte. dqdly0 controls the delay of data bit [0],  dqdly1 controls d */
/* ata bit [1], etc. The lower two bits of the dqdly for each  DQ bit controls the delay */
/*  for the data clocked by DQS, while the higher  two bits control the delay for the da */
/* ta clocked by DQS_n.  Valid settings for each 2-bit control field:  2b00 = nominal de */
/* lay  2b01 = nominal delay + 1 step  2b10 = nominal delay + 2 steps  2b11 = nominal de */
/* lay + 3 steps                                                                         */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY7_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY7_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY6_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY6_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY5_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY5_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY4_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY4_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY3_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY3_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY2_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY2_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY1_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY1_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY0_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_DQDLY0_DEFAULT_VALUE_RESET_VALUE ( 0xF )


#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_OFFSET ( 0x00000080 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQTR0_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQTR0_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQTR0_ADDRESS ), (v) )

typedef struct
{
	/* dqdly7 */
	stt_uint32 dqdly7	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly6 */
	stt_uint32 dqdly6	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly5 */
	stt_uint32 dqdly5	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly4 */
	stt_uint32 dqdly4	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly3 */
	stt_uint32 dqdly3	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly2 */
	stt_uint32 dqdly2	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly1 */
	stt_uint32 dqdly1	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly0 */
	stt_uint32 dqdly0	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DQTR0_DTE ;


/*****************************************************************************************/
/* DQTR1                                                                                 */
/* DQ 1 Timing Register    DQ Delay. Used to adjust the delay of the data relative to th */
/* e nominal  delay that is matched to the delay of the data strobes through the slave   */
/* DLL and clock tree. Every four bits of this register control the delay of a  differen */
/* t data bit in the byte. dqdly0 controls the delay of data bit [0],  dqdly1 controls d */
/* ata bit [1], etc. The lower two bits of the dqdly for each  DQ bit controls the delay */
/*  for the data clocked by DQS, while the higher  two bits control the delay for the da */
/* ta clocked by DQS_n.  Valid settings for each 2-bit control field:  2b00 = nominal de */
/* lay  2b01 = nominal delay + 1 step  2b10 = nominal delay + 2 steps  2b11 = nominal de */
/* lay + 3 steps                                                                         */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY7_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY7_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY6_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY6_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY5_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY5_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY4_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY4_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY3_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY3_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY2_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY2_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY1_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY1_DEFAULT_VALUE_RESET_VALUE ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY0_DEFAULT_VALUE             ( 0xF )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_DQDLY0_DEFAULT_VALUE_RESET_VALUE ( 0xF )


#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_OFFSET ( 0x00000084 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQTR1_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQTR1_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQTR1_ADDRESS ), (v) )

typedef struct
{
	/* dqdly7 */
	stt_uint32 dqdly7	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly6 */
	stt_uint32 dqdly6	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly5 */
	stt_uint32 dqdly5	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly4 */
	stt_uint32 dqdly4	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly3 */
	stt_uint32 dqdly3	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly2 */
	stt_uint32 dqdly2	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly1 */
	stt_uint32 dqdly1	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqdly0 */
	stt_uint32 dqdly0	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DQTR1_DTE ;


/*****************************************************************************************/
/* DQSTR                                                                                 */
/* DQS Timing Register                                                                   */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_DQSDLY1_DEFAULT_VALUE             ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_DQSDLY1_DEFAULT_VALUE_RESET_VALUE ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_DQSDLY0_DEFAULT_VALUE             ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_DQSDLY0_DEFAULT_VALUE_RESET_VALUE ( 0x3 )


#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_OFFSET ( 0x000000A4 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQSTR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQSTR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQSTR_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0     	: 26 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqsdly1 */
	stt_uint32 dqsdly1	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqsdly0 */
	stt_uint32 dqsdly0	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DQSTR_DTE ;


/*****************************************************************************************/
/* DQSNTR                                                                                */
/* DQS_n Timing Register                                                                 */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_R0_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_R0_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_DQSDLY1_DEFAULT_VALUE             ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_DQSDLY1_DEFAULT_VALUE_RESET_VALUE ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_DQSDLY0_DEFAULT_VALUE             ( 0x3 )
#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_DQSDLY0_DEFAULT_VALUE_RESET_VALUE ( 0x3 )


#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_OFFSET ( 0x000000A8 )

#define CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_ADDRESS   	( CE_DDR_CONTROLLER_PHY_STATUS_ADDRESS + CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_OFFSET )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQSNTR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_PHY_STATUS_DQSNTR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_PHY_STATUS_DQSNTR_ADDRESS ), (v) )

typedef struct
{
	/* RESERVED */
	stt_uint32 r0     	: 26 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqsdly1 */
	stt_uint32 dqsdly1	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dqsdly0 */
	stt_uint32 dqsdly0	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DQSNTR_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* IPVR                                                                                  */
/* IP Version Register                                                                   */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_IP_VERSION_DEFAULT_VALUE             ( 0x3134302A )
#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_IP_VERSION_DEFAULT_VALUE_RESET_VALUE ( 0x3134302A )


#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_OFFSET ( 0x00000000 )

#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_ADDRESS   	( CE_DDR_CONTROLLER_IP_CONFIGURATION_ADDRESS + CE_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_OFFSET )
#define BL_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_IP_CONFIGURATION_IPVR_ADDRESS ), (v) )

typedef struct
{
	/* ip_version */
	stt_uint32 ip_version	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_IP_CONFIGURATION_IPVR_DTE ;


/*****************************************************************************************/
/* IPTR                                                                                  */
/* IP Type Register                                                                      */
/*****************************************************************************************/

#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_IP_TYPE_DEFAULT_VALUE             ( 0x44574300 )
#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_IP_TYPE_DEFAULT_VALUE_RESET_VALUE ( 0x44574300 )


#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_OFFSET ( 0x00000004 )

#define CE_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_ADDRESS   	( CE_DDR_CONTROLLER_IP_CONFIGURATION_ADDRESS + CE_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_OFFSET )
#define BL_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_READ( r ) 	BL_READ_32( ( CE_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_ADDRESS ), (r) )
#define BL_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_WRITE( v )	BL_WRITE_32( ( CE_DDR_CONTROLLER_IP_CONFIGURATION_IPTR_ADDRESS ), (v) )

typedef struct
{
	/* ip_type */
	stt_uint32 ip_type	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_IP_CONFIGURATION_IPTR_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* DDR_parameters                                                                        */
/* DDR type (DDR2 or DDR3) and DDR data bus width (8 or 16 bits).                        */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_R1_DEFAULT_VALUE                    ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_R1_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_TYPE_DDR2_VALUE                     ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_TYPE_DDR3_VALUE                     ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_TYPE_DDR3_VALUE_RESET_VALUE         ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_WIDTH_DDR_16_BITS_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_WIDTH_DDR_16_BITS_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_WIDTH_DDR_8_BITS_VALUE              ( 0x1 )


#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_OFFSET ( 0x00000000 )

#define CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_ADDRESS   	( CE_DDR_BRIDGE_GENERAL_CONFIG_ADDRESS + CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_OFFSET )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1   	: 30 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DDR_TYPE */
	stt_uint32 type 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DDR_memory_width */
	stt_uint32 width	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_DTE ;


/*****************************************************************************************/
/* SLOW_CLIENT_EN                                                                        */
/* A slow client is a client which is frequency is lower than half of the DDR frequency. */
/*  This kind of client is treated differently that fast clients. It has some limitation */
/* s which damage its performance but make sure that it wont block fast clients.  The ma */
/* in limitation for slow client is that its maximum length of requests should not excee */
/* d 64bytes.    This register determine which DDR client should be treated as slow clie */
/* nt.                                                                                   */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_R2_R1_VALUE                        ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_R2_R1_VALUE_RESET_VALUE            ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U10_FAST_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U10_FAST_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U10_SLOW_VALUE             ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U9_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U9_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U9_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U8_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U8_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U8_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U7_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U7_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U7_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U6_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U6_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U6_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U5_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U5_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U5_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U4_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U4_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U4_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U3_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U3_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U3_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U2_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U2_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U2_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U1_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U1_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U1_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U0_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U0_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_RD_U0_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_R1_R1_VALUE                        ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_R1_R1_VALUE_RESET_VALUE            ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U10_FAST_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U10_FAST_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U10_SLOW_VALUE             ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U9_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U9_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U9_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U8_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U8_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U8_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U7_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U7_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U7_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U6_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U6_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U6_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U5_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U5_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U5_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U4_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U4_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U4_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U3_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U3_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U3_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U2_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U2_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U2_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U1_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U1_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U1_SLOW_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U0_FAST_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U0_FAST_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_SLOW_WR_U0_SLOW_VALUE              ( 0x1 )


#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_OFFSET ( 0x00000004 )

#define CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_ADDRESS   	( CE_DDR_BRIDGE_GENERAL_CONFIG_ADDRESS + CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_OFFSET )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r2         	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U10 */
	stt_uint32 slow_rd_u10	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U9 */
	stt_uint32 slow_rd_u9 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U8 */
	stt_uint32 slow_rd_u8 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U7 */
	stt_uint32 slow_rd_u7 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U6 */
	stt_uint32 slow_rd_u6 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U5 */
	stt_uint32 slow_rd_u5 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U4 */
	stt_uint32 slow_rd_u4 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U3 */
	stt_uint32 slow_rd_u3 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U2 */
	stt_uint32 slow_rd_u2 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U1 */
	stt_uint32 slow_rd_u1 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_RD_EN_U0 */
	stt_uint32 slow_rd_u0 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1         	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U10 */
	stt_uint32 slow_wr_u10	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U9 */
	stt_uint32 slow_wr_u9 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U8 */
	stt_uint32 slow_wr_u8 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U7 */
	stt_uint32 slow_wr_u7 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U6 */
	stt_uint32 slow_wr_u6 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U5 */
	stt_uint32 slow_wr_u5 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U4 */
	stt_uint32 slow_wr_u4 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U3 */
	stt_uint32 slow_wr_u3 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U2 */
	stt_uint32 slow_wr_u2 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U1 */
	stt_uint32 slow_wr_u1 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_WR_EN_U0 */
	stt_uint32 slow_wr_u0 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_DTE ;


/*****************************************************************************************/
/* Bridge_features_enable                                                                */
/* This register enables the different bridge features:  1. Address permutation, which m */
/* anipulates the row and bank address bits in order to achieve higher DDR bus utilizati */
/* on.  2. Data coherency mechanism, which makes sure that a later read request will not */
/*  be executed before a former write request to the same DDR page.                      */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_R1_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_R1_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_SPLIT_2K_DISABLE_VALUE            ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_SPLIT_2K_ENABLE_VALUE             ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_SPLIT_2K_ENABLE_VALUE_RESET_VALUE ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_SPLIT_1K_DISABLE_VALUE            ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_SPLIT_1K_ENABLE_VALUE             ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_SPLIT_1K_ENABLE_VALUE_RESET_VALUE ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_R2_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_R2_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_DCEN_DISABLE_VALUE                ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_DCEN_DISABLE_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_DCEN_ENABLE_VALUE                 ( 0x1 )


#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_OFFSET ( 0x00000008 )

#define CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_ADDRESS   	( CE_DDR_BRIDGE_GENERAL_CONFIG_ADDRESS + CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_OFFSET )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1      	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SPLIT_2K_EN */
	stt_uint32 split_2k	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SPLIT_1K_EN */
	stt_uint32 split_1k	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r2      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* data_coherency_enable */
	stt_uint32 dcen    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_DTE ;


/*****************************************************************************************/
/* Data_coherency_enable_per_user                                                        */
/* The data coherency mechanism compares each  read request of a certain user upon any c */
/* urrently pending write requests of any one of the other users. If there is a pending  */
/* write request to the same DDR page of the read request, the read request will be dela */
/* yed until the write request will be executed.    In some cases, where the coherency i */
/* s kept in other manners, one might want to avoid the coherency check of a certain use */
/* r against any one of the other users. This register array enables it.    There are 11 */
/*  registers in the array, one for each user:  User0 - MIPS C  User1 - MIPS D  user2 -  */
/* MIPS D DMA  user3 - DSP  User4 - Runner A  User5 - Runner B  User6 - PCIE A  User7 -  */
/* PCIE B  User8 - USB A  User9 - USB B  User10 - DMA    Each register holds 11 bits, re */
/* presenting the 11 users in the same order as above.  Each bit enables the coherency c */
/* heck between the registers represented user and the bits represented user, for exampl */
/* e:    bit 5 in register 0 enables the coherency check between a read request of MIPS  */
/* C and write requests of Runner B.    If one wishes to avoid any coherency checks betw */
/* een Runner B and MIPS C, he should deassert bit 5 in register 0 and bit 0 in register */
/*  5.                                                                                   */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_R1_DEFAULT_VALUE                  ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_R1_DEFAULT_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DMA_DISABLE_VALUE                 ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DMA_DISABLE_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DMA_ENABLE_VALUE                  ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_USBB_DISABLE_VALUE                ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_USBB_DISABLE_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_USBB_ENABLE_VALUE                 ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_USBA_DISABLE_VALUE                ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_USBA_DISABLE_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_USBA_ENABLE_VALUE                 ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_PCIEB_DISABLE_VALUE               ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_PCIEB_DISABLE_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_PCIEB_ENABLE_VALUE                ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_PCIEA_DISABLE_VALUE               ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_PCIEA_DISABLE_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_PCIEA_ENABLE_VALUE                ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_RUNNERB_DISABLE_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_RUNNERB_DISABLE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_RUNNERB_ENABLE_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_RUNNERA_DISABLE_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_RUNNERA_DISABLE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_RUNNERA_ENABLE_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DSP_DISABLE_VALUE                 ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DSP_DISABLE_VALUE_RESET_VALUE     ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DSP_ENABLE_VALUE                  ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSDMA_DISABLE_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSDMA_DISABLE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSDMA_ENABLE_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSD_DISABLE_VALUE               ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSD_DISABLE_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSD_ENABLE_VALUE                ( 0x1 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSC_DISABLE_VALUE               ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSC_DISABLE_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_MIPSC_ENABLE_VALUE                ( 0x1 )


#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_OFFSET ( 0x00000010 )

#define CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_ADDRESS        	( CE_DDR_BRIDGE_GENERAL_CONFIG_ADDRESS + CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_OFFSET )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_ADDRESS ), (i), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1     	: 21 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dma_enable */
	stt_uint32 dma    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_b_enable */
	stt_uint32 usbb   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_a_enable */
	stt_uint32 usba   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pcie_b_enable */
	stt_uint32 pcieb  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pcie_a_enable */
	stt_uint32 pciea  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* runner_b_enable */
	stt_uint32 runnerb	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* runner_a_enable */
	stt_uint32 runnera	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_enable */
	stt_uint32 dsp    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_dma_enable */
	stt_uint32 mipsdma	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_enable */
	stt_uint32 mipsd  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_c_enable */
	stt_uint32 mipsc  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* fixed_priority                                                                        */
/* The arbitration is done in two stages:  1. fixed priority, which chooses the clients  */
/* with the highest priority among all the clients which have a pending requests.  2. we */
/* ighted round robin between all the users with the same priority.    This array of reg */
/* istersr enables configuring of the fixed priority per client.    For each client one  */
/* should configure two priorities:  1. TAP - priority (out of 11 levels) when the user  */
/* has tokens in both of its buckets in its dual token bucket rate limiter  2. NTP - pri */
/* ority (out 0f 2 levels) when the user does not have tokens in at least one of its buc */
/* kets.    The configuration of the priority is in one hot style, where each bit repres */
/* ents a priority level.  For example in TAP - 0x10000000000 is highest, 0x00000000001  */
/* is lowest.    The order of clients in this array and in all the next arrays is:  User */
/* 0 - MIPS C  User1 - MIPS D  user2 - MIPS D DMA  user3 - DSP  User4 - Runner A  User5  */
/* - Runner B  User6 - PCIE A  User7 - PCIE B  User8 - USB A  User9 - USB B  User10 - DM */
/* A                                                                                     */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_PRI_R1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PRI_R1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PRI_NTP_LOWEST_VALUE             ( 0x1 )
#define CE_DDR_BRIDGE_ARBITRATION_PRI_NTP_LOWEST_VALUE_RESET_VALUE ( 0x1 )
#define CE_DDR_BRIDGE_ARBITRATION_PRI_NTP_HIGHEST_VALUE            ( 0x80 )
#define CE_DDR_BRIDGE_ARBITRATION_PRI_TAP_LOWEST_VALUE             ( 0x1 )
#define CE_DDR_BRIDGE_ARBITRATION_PRI_TAP_LOWEST_VALUE_RESET_VALUE ( 0x1 )
#define CE_DDR_BRIDGE_ARBITRATION_PRI_TAP_HIGHEST_VALUE            ( 0x80 )


#define CE_DDR_BRIDGE_ARBITRATION_PRI_OFFSET ( 0x00000000 )

#define CE_DDR_BRIDGE_ARBITRATION_PRI_ADDRESS        	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_PRI_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_PRI_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ARBITRATION_PRI_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_PRI_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ARBITRATION_PRI_ADDRESS ), (i), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1 	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* No_token_priority */
	stt_uint32 ntp	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Token_available_priority */
	stt_uint32 tap	: 8 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_PRI_DTE ;


/*****************************************************************************************/
/* Weight_of_user_in_weighted_round_robin                                                */
/* When arbitration is done, after choosing the clients with the highest priority, the a */
/* rbiter chooses between them according to weighted round robin.    This array of regis */
/* ters enable coniguration of the weight per user.     The weight means the number of c */
/* onsequent requests be served once the client gains arbitration before moving to the n */
/* ext client with the same priority.    The actual number of consecutive requests to be */
/*  served is weight +1.                                                                 */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_WEIGHT_R1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_WEIGHT_R1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_WEIGHT_WEIGHT_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_WEIGHT_WEIGHT_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_WEIGHT_WEIGHT_MAX_VALUE             ( 0x7 )


#define CE_DDR_BRIDGE_ARBITRATION_WEIGHT_OFFSET ( 0x00000030 )

#define CE_DDR_BRIDGE_ARBITRATION_WEIGHT_ADDRESS        	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_WEIGHT_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_WEIGHT_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ARBITRATION_WEIGHT_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_WEIGHT_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ARBITRATION_WEIGHT_ADDRESS ), (i), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1    	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* weight_of_client_in_round_robin */
	stt_uint32 weight	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_WEIGHT_DTE ;


/*****************************************************************************************/
/* Dual_token_bucket_configuration                                                       */
/* The dual-koten bucket trate limiter per user works in the following manner.    Each u */
/* ser has two buckets of tokens:  1. CIR - is a bucket which represents the constant ba */
/* ndwidth the client requires  2. PIR - is a bucket which represents the burst bandwidt */
/* h the client requires    Each bucket has a configurable size and a configurable rate  */
/* of filling.    Upon serving a request of a user, an amount of tokens, which can be co */
/* nstant or data dependant, is reduced from both buckets.    If one of the buckets is e */
/* mpty, the clients priority is changed to be its NTP priority, one of 2 levels of low  */
/* priority (instead of TAP, one of 11 levels of higher priorities)    All the buckets o */
/* f all users are filled once every configurable-sized time window (different window si */
/* ze for CIR and for PIR).    This array of registers holds two configurations:  1. ena */
/* ble/disable of the rate limiter per user  2. decision whether the cost of each reques */
/* t served is constant (with a cnfigurable cost per user) or depends also in the amount */
/*  of data in the request.                                                              */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_R1_DEFAULT_VALUE                     ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_R1_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_BYTE_COST_EN_FIXED_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_BYTE_COST_EN_FIXED_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_BYTE_COST_EN_FIXED_WITH_BYTES_VALUE  ( 0x1 )
#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_DTBEN_DISABLE_VALUE                  ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_DTBEN_DISABLE_VALUE_RESET_VALUE      ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_DTBEN_ENABLE_VALUE                   ( 0x1 )


#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_OFFSET ( 0x00000060 )

#define CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_ADDRESS        	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ARBITRATION_DTB_CONFIG_ADDRESS ), (i), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1          	: 30 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Byte_cost_enable */
	stt_uint32 byte_cost_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Dual_token_bucket_enable */
	stt_uint32 dtben       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_DTB_CONFIG_DTE ;


/*****************************************************************************************/
/* CIR_bucket_parameters                                                                 */
/* The CIR bucket should represent the constant bW the client requires.    This array of */
/*  registers allow configuration of the size and rate of the CIR bucket of each user.   */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_CIR_RATE_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_CIR_RATE_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_CIR_RATE_MAX_VALUE             ( 0xFFFF )
#define CE_DDR_BRIDGE_ARBITRATION_CIR_SIZE_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_CIR_SIZE_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_CIR_SIZE_MAX_VALUE             ( 0xFFFF )


#define CE_DDR_BRIDGE_ARBITRATION_CIR_OFFSET ( 0x00000090 )

#define CE_DDR_BRIDGE_ARBITRATION_CIR_ADDRESS        	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_CIR_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_CIR_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ARBITRATION_CIR_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_CIR_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ARBITRATION_CIR_ADDRESS ), (i), (v) )

typedef struct
{
	/* CIR_rate */
	stt_uint32 rate	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* CIR_size */
	stt_uint32 size	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_CIR_DTE ;


/*****************************************************************************************/
/* PIR_bucket_parameters                                                                 */
/* The PIR bucket should represent the peak (burst)  BW the client requires.    This arr */
/* ay of registers allow configuration of the size and rate of the PIR bucket of each us */
/* er.                                                                                   */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_PIR_RATE_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PIR_RATE_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PIR_RATE_MAX_VALUE             ( 0xFFFF )
#define CE_DDR_BRIDGE_ARBITRATION_PIR_SIZE_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PIR_SIZE_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PIR_SIZE_MAX_VALUE             ( 0xFFFF )


#define CE_DDR_BRIDGE_ARBITRATION_PIR_OFFSET ( 0x000000C0 )

#define CE_DDR_BRIDGE_ARBITRATION_PIR_ADDRESS        	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_PIR_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_PIR_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ARBITRATION_PIR_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_PIR_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ARBITRATION_PIR_ADDRESS ), (i), (v) )

typedef struct
{
	/* PIR_rate */
	stt_uint32 rate	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* PIR_size */
	stt_uint32 size	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_PIR_DTE ;


/*****************************************************************************************/
/* Fixed_cost_size                                                                       */
/* The number of tokens to be reduced from both bucketd upon serving a request of a clie */
/* nt.                                                                                   */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_COST_R1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_COST_R1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_COST_COST_MIN_VALUE               ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_COST_COST_MIN_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_COST_COST_MAX_VALUE               ( 0xFFFF )


#define CE_DDR_BRIDGE_ARBITRATION_COST_OFFSET ( 0x000000F0 )

#define CE_DDR_BRIDGE_ARBITRATION_COST_ADDRESS        	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_COST_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_COST_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ARBITRATION_COST_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_COST_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ARBITRATION_COST_ADDRESS ), (i), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1  	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Fixed_cost_size */
	stt_uint32 cost	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_COST_DTE ;


/*****************************************************************************************/
/* Size_of_CIR_update_time_window                                                        */
/* All the CIR buckets of all the users are filled at the same clock once every time win */
/* dow.  This register allow configuration of the time window size in DDR bridge clock c */
/* ycles.                                                                                */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_SIZE_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_SIZE_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_SIZE_MAX_VALUE             ( 0x7FFFFFFF )


#define CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_OFFSET ( 0x00000120 )

#define CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_ADDRESS   	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_ARBITRATION_CIR_WINDOW_ADDRESS ), (v) )

typedef struct
{
	/* window_size */
	stt_uint32 size	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_CIR_WINDOW_DTE ;


/*****************************************************************************************/
/* Size_of_PIR_update_time_window                                                        */
/* All the CIR buckets of all the users are filled at the same clock once every time win */
/* dow.  This register allow configuration of the time window size in DDR bridge clock c */
/* ycles.                                                                                */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_SIZE_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_SIZE_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_SIZE_MAX_VALUE             ( 0x7FFFFFFF )


#define CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_OFFSET ( 0x00000124 )

#define CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_ADDRESS   	( CE_DDR_BRIDGE_ARBITRATION_ADDRESS + CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_OFFSET )
#define BL_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_ARBITRATION_PIR_WINDOW_ADDRESS ), (v) )

typedef struct
{
	/* window_size */
	stt_uint32 size	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_PIR_WINDOW_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* bank_map                                                                              */
/* this register map three EC address bits to be the 3 bank bits    default mapping - EC */
/*  bits 26-24 are the bank bits                                                         */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_R3_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_R3_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_2_MIN_VALUE                 ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_2_DEFAULT_VALUE             ( 0x1A )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_2_DEFAULT_VALUE_RESET_VALUE ( 0x1A )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_2_MAX_VALUE                 ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_R2_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_R2_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_1_MIN_VALUE                 ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_1_DEFAULT_VALUE             ( 0x19 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_1_DEFAULT_VALUE_RESET_VALUE ( 0x19 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_1_MAX_VALUE                 ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_R1_DEFAULT_VALUE                ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_R1_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_0_MIN_VALUE                 ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_0_DEFAULT_VALUE             ( 0x18 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_0_DEFAULT_VALUE_RESET_VALUE ( 0x18 )
#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_BIT_0_MAX_VALUE                 ( 0x1F )


#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_OFFSET ( 0x00000000 )

#define CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_ADDRESS   	( CE_DDR_BRIDGE_ADDR_MAP_ADDRESS + CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_OFFSET )
#define BL_DDR_BRIDGE_ADDR_MAP_BANK_MAP_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_ADDR_MAP_BANK_MAP_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_ADDR_MAP_BANK_MAP_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r3   	: 11 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_2 */
	stt_uint32 bit_2	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r2   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_1 */
	stt_uint32 bit_1	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r1   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_0 */
	stt_uint32 bit_0	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ADDR_MAP_BANK_MAP_DTE ;


/*****************************************************************************************/
/* row_map                                                                               */
/* this register array of 4 registers map up to 15 EC address bits to be the 15 row bits */
/* .  Each register in the array map 4 bits, meaning the first maps bit 3:0, the second  */
/* map bits 7:4, etc.    default mapping - EC bits 23-11 are the row bits                */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R4_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R4_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_3_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_3_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_3_MAX_VALUE              ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R3_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R3_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_2_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_2_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_2_MAX_VALUE              ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R2_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R2_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_1_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_1_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_1_MAX_VALUE              ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_R1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_0_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_0_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_BIT_0_MAX_VALUE              ( 0x1F )


#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_OFFSET ( 0x00000004 )

#define CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_ADDRESS        	( CE_DDR_BRIDGE_ADDR_MAP_ADDRESS + CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_OFFSET )
#define BL_DDR_BRIDGE_ADDR_MAP_ROW_MAP_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ADDR_MAP_ROW_MAP_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ADDR_MAP_ROW_MAP_ADDRESS ), (i), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r4   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_3 */
	stt_uint32 bit_3	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r3   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_2 */
	stt_uint32 bit_2	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r2   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_1 */
	stt_uint32 bit_1	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r1   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_0 */
	stt_uint32 bit_0	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ADDR_MAP_ROW_MAP_DTE ;


/*****************************************************************************************/
/* col_map                                                                               */
/* this register array of 3 registers map up to 10 EC address bits to be the 10 row bits */
/* .  Each register in the array map 4 bits, meaning the first maps bit 3:0, the second  */
/* map bits 7:4, etc.    default mapping - EC bits 10-1 are the column bits              */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R4_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R4_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_3_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_3_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_3_MAX_VALUE              ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R3_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R3_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_2_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_2_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_2_MAX_VALUE              ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R2_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R2_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_1_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_1_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_1_MAX_VALUE              ( 0x1F )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_R1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_0_MIN_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_0_MIN_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_BIT_0_MAX_VALUE              ( 0x1F )


#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_OFFSET ( 0x00000014 )

#define CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_ADDRESS        	( CE_DDR_BRIDGE_ADDR_MAP_ADDRESS + CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_OFFSET )
#define BL_DDR_BRIDGE_ADDR_MAP_COL_MAP_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_ADDR_MAP_COL_MAP_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_ADDR_MAP_COL_MAP_ADDRESS ), (i), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r4   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_3 */
	stt_uint32 bit_3	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r3   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_2 */
	stt_uint32 bit_2	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r2   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_1 */
	stt_uint32 bit_1	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r1   	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bit_0 */
	stt_uint32 bit_0	: 5 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ADDR_MAP_COL_MAP_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* msi_address                                                                           */
/* A write command is considered as MSI command if the 32 bit address of the command is  */
/* equal to this configurable address                                                    */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_ADR_DEFAULT_VALUE             ( 0x80000000 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_ADR_DEFAULT_VALUE_RESET_VALUE ( 0x80000000 )


#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_OFFSET ( 0x00000000 )

#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_ADDRESS   	( CE_DDR_BRIDGE_SPECIAL_CMDS_ADDRESS + CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_OFFSET )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_ADDRESS ), (v) )

typedef struct
{
	/* address */
	stt_uint32 adr	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_DTE ;


/*****************************************************************************************/
/* msi_data                                                                              */
/* For a write command to be considered as MSI, it should be single and not burst, the a */
/* ddress should be equal to the configured in the previous register and the data shoul  */
/* be equal to the configured in the data field in this register.  The result of the MSI */
/*  is assertion of up to 4 interrupts. The decision whether to assert an interrupt is p */
/* art f the data sent with the command, with ability to mask an interrupt by using the  */
/* mask field in this register.                                                          */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_R1_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_R1_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_DAT_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_DAT_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_MASK_DEFALUT_VALUE             ( 0xF )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_MASK_DEFALUT_VALUE_RESET_VALUE ( 0xF )


#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_OFFSET ( 0x00000004 )

#define CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_ADDRESS   	( CE_DDR_BRIDGE_SPECIAL_CMDS_ADDRESS + CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_OFFSET )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1  	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* data */
	stt_uint32 dat 	: 12 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mask */
	stt_uint32 mask	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_DTE ;


/*****************************************************************************************/
/* sync_address                                                                          */
/* For a read command to be considered as sync commaand, its 31 lsb address should be eq */
/* ual to the 31 bit address configured in this register.  The read command should be si */
/* ngle and not a burst.  The result of the sync command is a known read data of 64hffff */
/* fffffffffff.                                                                          */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_R1_DEFAULT_VALUE              ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_R1_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_ADR_DEFAULT_VALUE             ( 0x7FFF0000 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_ADR_DEFAULT_VALUE_RESET_VALUE ( 0x7FFF0000 )


#define CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_OFFSET ( 0x00000008 )

#define CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_ADDRESS   	( CE_DDR_BRIDGE_SPECIAL_CMDS_ADDRESS + CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_OFFSET )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* address */
	stt_uint32 adr	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_DTE ;


/*****************************************************************************************/
/* prefer_sync_commands                                                                  */
/* Give highest priority to sync commands in arbitration in order to make its latency sm */
/* all as possible.                                                                      */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_R1_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_R1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_EN_DISABLE_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_EN_ENABLE_VALUE              ( 0x1 )
#define CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_EN_ENABLE_VALUE_RESET_VALUE  ( 0x1 )


#define CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_OFFSET ( 0x0000000C )

#define CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_ADDRESS   	( CE_DDR_BRIDGE_SPECIAL_CMDS_ADDRESS + CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_OFFSET )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* enable */
	stt_uint32 en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* PM_EN                                                                                 */
/* Two bits:  1. indicates start of measurment  2. enables cyclic measurment             */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_PM_EN_R1_DEFAULT_VALUE                   ( 0x0 )
#define CE_DDR_BRIDGE_PM_PM_EN_R1_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_DDR_BRIDGE_PM_PM_EN_CYCLEC_EN_DISABLE_VALUE            ( 0x0 )
#define CE_DDR_BRIDGE_PM_PM_EN_CYCLEC_EN_ENABLE_VALUE             ( 0x1 )
#define CE_DDR_BRIDGE_PM_PM_EN_CYCLEC_EN_ENABLE_VALUE_RESET_VALUE ( 0x1 )
#define CE_DDR_BRIDGE_PM_PM_EN_EN_DISABLE_VALUE                   ( 0x0 )
#define CE_DDR_BRIDGE_PM_PM_EN_EN_DISABLE_VALUE_RESET_VALUE       ( 0x0 )
#define CE_DDR_BRIDGE_PM_PM_EN_EN_ENABLE_VALUE                    ( 0x1 )


#define CE_DDR_BRIDGE_PM_PM_EN_OFFSET ( 0x00000000 )

#define CE_DDR_BRIDGE_PM_PM_EN_ADDRESS   	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_PM_EN_OFFSET )
#define BL_DDR_BRIDGE_PM_PM_EN_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_PM_PM_EN_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_PM_PM_EN_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_PM_PM_EN_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1       	: 30 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Cyclic_check_en */
	stt_uint32 cyclec_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* PM_EN */
	stt_uint32 en       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_PM_EN_DTE ;


/*****************************************************************************************/
/* PM_time_window                                                                        */
/* size of measurement time window in ddr bridge clocks.    When expires one of two thin */
/* gs happen:  1. if not cyclic, the measurement stops.  2. if cyclic, the measurement s */
/* tarts again, the time window resets to its configurable value, and the measurement re */
/* sults are sampled into the last registers.                                            */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_PM_WINDOW_WINDOW_INVALID_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_PM_WINDOW_WINDOW_MIN_VALUE                 ( 0x1 )
#define CE_DDR_BRIDGE_PM_PM_WINDOW_WINDOW_DEFAULT_VALUE             ( 0xC350 )
#define CE_DDR_BRIDGE_PM_PM_WINDOW_WINDOW_DEFAULT_VALUE_RESET_VALUE ( 0xC350 )
#define CE_DDR_BRIDGE_PM_PM_WINDOW_WINDOW_MAX_VALUE                 ( 0x7FFFFFFF )
#define CE_DDR_BRIDGE_PM_PM_WINDOW_WINDOW_INFINITE_VALUE            ( 0xFFFFFFFF )


#define CE_DDR_BRIDGE_PM_PM_WINDOW_OFFSET ( 0x00000004 )

#define CE_DDR_BRIDGE_PM_PM_WINDOW_ADDRESS   	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_PM_WINDOW_OFFSET )
#define BL_DDR_BRIDGE_PM_PM_WINDOW_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_PM_PM_WINDOW_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_PM_PM_WINDOW_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_PM_PM_WINDOW_ADDRESS ), (v) )

typedef struct
{
	/* Window */
	stt_uint32 window	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_PM_WINDOW_DTE ;


/*****************************************************************************************/
/* Maximum_time_to_be_served                                                             */
/* This array of counters hold the maximum time in clock cycles the client has waited fr */
/* om the moment it had a request pending to the time the request gained arbitration.    */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_MAX_TIME_MAX_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_MAX_TIME_MAX_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_PM_MAX_TIME_MAX_MAX_VALUE             ( 0x7FFFFFFF )


#define CE_DDR_BRIDGE_PM_MAX_TIME_OFFSET ( 0x00000010 )

#define CE_DDR_BRIDGE_PM_MAX_TIME_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_MAX_TIME_OFFSET )
#define BL_DDR_BRIDGE_PM_MAX_TIME_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_MAX_TIME_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_MAX_TIME_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_MAX_TIME_ADDRESS ), (i), (v) )

typedef struct
{
	/* max_time */
	stt_uint32 max	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_MAX_TIME_DTE ;


/*****************************************************************************************/
/* Accumulated_time_to_be_served                                                         */
/* This array of counters hold the accumulated time in clock cycles the client has waite */
/* d from the moment it had a request pending to the time the request gained arbitration */
/* .                                                                                     */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_ACC_TIME_TIME_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_ACC_TIME_TIME_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_PM_ACC_TIME_TIME_MAX_VALUE             ( 0x7FFFFFFF )


#define CE_DDR_BRIDGE_PM_ACC_TIME_OFFSET ( 0x00000040 )

#define CE_DDR_BRIDGE_PM_ACC_TIME_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_ACC_TIME_OFFSET )
#define BL_DDR_BRIDGE_PM_ACC_TIME_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_ACC_TIME_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_ACC_TIME_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_ACC_TIME_ADDRESS ), (i), (v) )

typedef struct
{
	/* accumulated_time */
	stt_uint32 time	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_ACC_TIME_DTE ;


/*****************************************************************************************/
/* Lart_result_of_acc_time                                                               */
/* This array of counters hold the Result of th elast measure of accumulated time in clo */
/* ck cycles the client has waited from the moment it had a request pending to the time  */
/* the request gained arbitration.                                                       */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_LAST_ACC_TIME_TIME_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_LAST_ACC_TIME_TIME_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_PM_LAST_ACC_TIME_TIME_MAX_VALUE             ( 0x7FFFFFFF )


#define CE_DDR_BRIDGE_PM_LAST_ACC_TIME_OFFSET ( 0x00000070 )

#define CE_DDR_BRIDGE_PM_LAST_ACC_TIME_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_LAST_ACC_TIME_OFFSET )
#define BL_DDR_BRIDGE_PM_LAST_ACC_TIME_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_LAST_ACC_TIME_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_LAST_ACC_TIME_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_LAST_ACC_TIME_ADDRESS ), (i), (v) )

typedef struct
{
	/* accumulated_time */
	stt_uint32 time	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_LAST_ACC_TIME_DTE ;


/*****************************************************************************************/
/* Accumulated_number_of_requests_served                                                 */
/* This array of counters hold the accumulated number of requests that was served per us */
/* er.                                                                                   */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_ACC_REQ_REQ_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_ACC_REQ_REQ_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_PM_ACC_REQ_REQ_MAX_VALUE             ( 0x7FFFFFFF )


#define CE_DDR_BRIDGE_PM_ACC_REQ_OFFSET ( 0x000000A0 )

#define CE_DDR_BRIDGE_PM_ACC_REQ_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_ACC_REQ_OFFSET )
#define BL_DDR_BRIDGE_PM_ACC_REQ_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_ACC_REQ_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_ACC_REQ_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_ACC_REQ_ADDRESS ), (i), (v) )

typedef struct
{
	/* Number_of_requests */
	stt_uint32 req	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_ACC_REQ_DTE ;


/*****************************************************************************************/
/* Last_result_of_acc_req                                                                */
/* This array of counters hold the last result of accumulated number of requests that wa */
/* s served per user on cyclic measure.                                                  */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_LAST_ACC_REQ_REQ_MIN_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_LAST_ACC_REQ_REQ_MIN_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_PM_LAST_ACC_REQ_REQ_MAX_VALUE             ( 0x7FFFFFFF )


#define CE_DDR_BRIDGE_PM_LAST_ACC_REQ_OFFSET ( 0x000000D0 )

#define CE_DDR_BRIDGE_PM_LAST_ACC_REQ_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_LAST_ACC_REQ_OFFSET )
#define BL_DDR_BRIDGE_PM_LAST_ACC_REQ_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_LAST_ACC_REQ_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_LAST_ACC_REQ_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_LAST_ACC_REQ_ADDRESS ), (i), (v) )

typedef struct
{
	/* Number_of_requests */
	stt_uint32 req	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_LAST_ACC_REQ_DTE ;


/*****************************************************************************************/
/* Number_of_double_words_written_to_the_DDR                                             */
/* This array of counters holds the number of double words written to the DDR per client */
/* .  It holds the result of the current measure.  If the measure is a single measure, t */
/* he result will be kept until de-assertion and assertion of the SINGLE start bit.      */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_WR_CNT_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_WR_CNT_OFFSET ( 0x00000100 )

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_WR_CNT_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_ADDRESS ), (i), (v) )

typedef struct
{
	/* Double_word_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_WR_CNT_DTE ;


/*****************************************************************************************/
/* Sum_WR_CNT                                                                            */
/* This counter holds the sum of the WR_CNT array.  It holds the result of the current m */
/* easure.  If the measure is a single measure, the result will be kept until de-asserti */
/* on and assertion of the SINGLE start bit.                                             */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_ACC_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_WR_CNT_ACC_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_WR_CNT_ACC_OFFSET ( 0x0000012C )

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_ACC_ADDRESS   	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_WR_CNT_ACC_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_ACC_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_ACC_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_ACC_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_ACC_ADDRESS ), (v) )

typedef struct
{
	/* Double_word_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_WR_CNT_ACC_DTE ;


/*****************************************************************************************/
/* Last_result_of_WR_CNT                                                                 */
/* This array of counters holds the number of double words written to the DDR per client */
/* .  When the measure is cyclic, it holds the result of the last measure, sampled once  */
/* every end of a time window.                                                           */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_OFFSET ( 0x00000130 )

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_LAST_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_LAST_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ADDRESS ), (i), (v) )

typedef struct
{
	/* Double_word_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_WR_CNT_LAST_DTE ;


/*****************************************************************************************/
/* Sum_of_WR_CNT_LAST                                                                    */
/* This counter is a sum of the WR_CNT_LAST counters, which holds the number of double w */
/* ords written to the DDR per client.  When the measure is cyclic, it holds the result  */
/* of the last measure, sampled once every end of a time window.                         */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_OFFSET ( 0x0000015C )

#define CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_ADDRESS   	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_ADDRESS ), (v) )

typedef struct
{
	/* Accumulative_last_write_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_DTE ;


/*****************************************************************************************/
/* Number_of_double_words_read_from_the_DDR                                              */
/* This array of counters holds the number of double words read from the DDR per client. */
/*   It holds the result of the current measure.  If the measure is a single measure, th */
/* e result will be kept until de-assertion and assertion of the SINGLE start bit.       */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_RD_CNT_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_RD_CNT_OFFSET ( 0x00000160 )

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_RD_CNT_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_ADDRESS ), (i), (v) )

typedef struct
{
	/* Double_word_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_RD_CNT_DTE ;


/*****************************************************************************************/
/* Sum_RD_CNT                                                                            */
/* This counter holds the sum of RD_CNT array.  It holds the result of the current measu */
/* re.  If the measure is a single measure, the result will be kept until de-assertion a */
/* nd assertion of the SINGLE start bit.                                                 */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_ACC_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_RD_CNT_ACC_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_RD_CNT_ACC_OFFSET ( 0x0000018C )

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_ACC_ADDRESS   	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_RD_CNT_ACC_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_ACC_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_ACC_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_ACC_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_ACC_ADDRESS ), (v) )

typedef struct
{
	/* Double_word_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_RD_CNT_ACC_DTE ;


/*****************************************************************************************/
/* Last_result_of_RD_CNT                                                                 */
/* This array of counters holds the number of double words read from  the DDR per client */
/* .  When the measure is cyclic, it holds the result of the last measure, sampled once  */
/* every end of a time window.                                                           */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_OFFSET ( 0x00000190 )

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ADDRESS        	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_LAST_READ_I( r, i ) 	BL_READ_I_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ADDRESS ), (i), (r) )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_LAST_WRITE_I( v, i )	BL_WRITE_I_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ADDRESS ), (i), (v) )

typedef struct
{
	/* Double_word_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_RD_CNT_LAST_DTE ;


/*****************************************************************************************/
/* Sum_of_RD_CNT_LAST                                                                    */
/* This counter is a sum of the WR_CNT_LAST counters, which holds the number of double w */
/* ords written to the DDR per client.  When the measure is cyclic, it holds the result  */
/* of the last measure, sampled once every end of a time window.                         */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_CNT_DEFAULT_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_CNT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_OFFSET ( 0x000001BC )

#define CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_ADDRESS   	( CE_DDR_BRIDGE_PM_ADDRESS + CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_OFFSET )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_ADDRESS ), (v) )

typedef struct
{
	/* Accumulative_last_read_count */
	stt_uint32 cnt	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* test_config                                                                           */
/* enables using address I/Os for outputting test signals and determines which of the 3  */
/* DLLs is to be outputted.                                                              */
/*****************************************************************************************/

#define CE_DDR_BRIDGE_TEST_MODE_CFG_R1_DEFAULT_VALUE                    ( 0x0 )
#define CE_DDR_BRIDGE_TEST_MODE_CFG_R1_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_DDR_BRIDGE_TEST_MODE_CFG_DLL_SEL_DEFAULT_VALUE               ( 0x0 )
#define CE_DDR_BRIDGE_TEST_MODE_CFG_DLL_SEL_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_DDR_BRIDGE_TEST_MODE_CFG_TEST_MODE_DISABLE_VALUE             ( 0x0 )
#define CE_DDR_BRIDGE_TEST_MODE_CFG_TEST_MODE_DISABLE_VALUE_RESET_VALUE ( 0x0 )
#define CE_DDR_BRIDGE_TEST_MODE_CFG_TEST_MODE_ENABLE_VALUE              ( 0x1 )


#define CE_DDR_BRIDGE_TEST_MODE_CFG_OFFSET ( 0x00000000 )

#define CE_DDR_BRIDGE_TEST_MODE_CFG_ADDRESS   	( CE_DDR_BRIDGE_TEST_MODE_ADDRESS + CE_DDR_BRIDGE_TEST_MODE_CFG_OFFSET )
#define BL_DDR_BRIDGE_TEST_MODE_CFG_READ( r ) 	BL_READ_32( ( CE_DDR_BRIDGE_TEST_MODE_CFG_ADDRESS ), (r) )
#define BL_DDR_BRIDGE_TEST_MODE_CFG_WRITE( v )	BL_WRITE_32( ( CE_DDR_BRIDGE_TEST_MODE_CFG_ADDRESS ), (v) )

typedef struct
{
	/* reserved */
	stt_uint32 r1       	: 28 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dll_selection */
	stt_uint32 dll_sel  	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* test_mode */
	stt_uint32 test_mode	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_TEST_MODE_CFG_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* SCFG */
	DDR_CONTROLLER_OPERATIONAL_STATE_SCFG_DTE scfg __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SCTL */
	DDR_CONTROLLER_OPERATIONAL_STATE_SCTL_DTE sctl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* STAT */
	DDR_CONTROLLER_OPERATIONAL_STATE_STAT_DTE stat __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_OPERATIONAL_STATE_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* MCMD */
	DDR_CONTROLLER_INITIALIZATION_MCMD_DTE mcmd __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* POWCTL */
	DDR_CONTROLLER_INITIALIZATION_POWCTL_DTE powctl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* POWSTAT */
	DDR_CONTROLLER_INITIALIZATION_POWSTAT_DTE powstat __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_INITIALIZATION_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* MCFG */
	DDR_CONTROLLER_MEMORY_CONFIGURATION_MCFG_DTE mcfg __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* PPCFG */
	DDR_CONTROLLER_MEMORY_CONFIGURATION_PPCFG_DTE ppcfg __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* MSTAT */
	DDR_CONTROLLER_MEMORY_CONFIGURATION_MSTAT_DTE mstat __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ODTCFG */
	DDR_CONTROLLER_MEMORY_CONFIGURATION_ODTCFG_DTE odtcfg __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_MEMORY_CONFIGURATION_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* DTUPDES */
	DDR_CONTROLLER_DTU_1_DTUPDES_DTE dtupdes __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUNA */
	DDR_CONTROLLER_DTU_1_DTUNA_DTE dtuna __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUNE */
	DDR_CONTROLLER_DTU_1_DTUNE_DTE dtune __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUPRD0 */
	DDR_CONTROLLER_DTU_1_DTUPRD0_DTE dtuprd0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUPRD1 */
	DDR_CONTROLLER_DTU_1_DTUPRD1_DTE dtuprd1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUPRD2 */
	DDR_CONTROLLER_DTU_1_DTUPRD2_DTE dtuprd2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUPRD3 */
	DDR_CONTROLLER_DTU_1_DTUPRD3_DTE dtuprd3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUAWDT */
	DDR_CONTROLLER_DTU_1_DTUAWDT_DTE dtuawdt __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_1_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* TOGCNT1U */
	DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT1U_DTE togcnt1u __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TINIT */
	DDR_CONTROLLER_TIMING_REGISTERS_TINIT_DTE tinit __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRSTH */
	DDR_CONTROLLER_TIMING_REGISTERS_TRSTH_DTE trsth __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TOGCNT100N */
	DDR_CONTROLLER_TIMING_REGISTERS_TOGCNT100N_DTE togcnt100n __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TREFI */
	DDR_CONTROLLER_TIMING_REGISTERS_TREFI_DTE trefi __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TMRD */
	DDR_CONTROLLER_TIMING_REGISTERS_TMRD_DTE tmrd __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRFC */
	DDR_CONTROLLER_TIMING_REGISTERS_TRFC_DTE trfc __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRP */
	DDR_CONTROLLER_TIMING_REGISTERS_TRP_DTE trp __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRTW */
	DDR_CONTROLLER_TIMING_REGISTERS_TRTW_DTE trtw __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TAL */
	DDR_CONTROLLER_TIMING_REGISTERS_TAL_DTE tal __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TCL */
	DDR_CONTROLLER_TIMING_REGISTERS_TCL_DTE tcl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TCWL */
	DDR_CONTROLLER_TIMING_REGISTERS_TCWL_DTE tcwl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRAS */
	DDR_CONTROLLER_TIMING_REGISTERS_TRAS_DTE tras __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRC */
	DDR_CONTROLLER_TIMING_REGISTERS_TRC_DTE trc __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRCD */
	DDR_CONTROLLER_TIMING_REGISTERS_TRCD_DTE trcd __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRRD */
	DDR_CONTROLLER_TIMING_REGISTERS_TRRD_DTE trrd __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRTP */
	DDR_CONTROLLER_TIMING_REGISTERS_TRTP_DTE trtp __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TWR */
	DDR_CONTROLLER_TIMING_REGISTERS_TWR_DTE twr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TWTR */
	DDR_CONTROLLER_TIMING_REGISTERS_TWTR_DTE twtr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TEXSR */
	DDR_CONTROLLER_TIMING_REGISTERS_TEXSR_DTE texsr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TXP */
	DDR_CONTROLLER_TIMING_REGISTERS_TXP_DTE txp __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TXPDLL */
	DDR_CONTROLLER_TIMING_REGISTERS_TXPDLL_DTE txpdll __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TZQCS */
	DDR_CONTROLLER_TIMING_REGISTERS_TZQCS_DTE tzqcs __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TZQCSI */
	DDR_CONTROLLER_TIMING_REGISTERS_TZQCSI_DTE tzqcsi __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TDQS */
	DDR_CONTROLLER_TIMING_REGISTERS_TDQS_DTE tdqs __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TCKSRE */
	DDR_CONTROLLER_TIMING_REGISTERS_TCKSRE_DTE tcksre __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TCKSRX */
	DDR_CONTROLLER_TIMING_REGISTERS_TCKSRX_DTE tcksrx __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TCKE */
	DDR_CONTROLLER_TIMING_REGISTERS_TCKE_DTE tcke __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TMOD */
	DDR_CONTROLLER_TIMING_REGISTERS_TMOD_DTE tmod __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TRSTL */
	DDR_CONTROLLER_TIMING_REGISTERS_TRSTL_DTE trstl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* TZQCL */
	DDR_CONTROLLER_TIMING_REGISTERS_TZQCL_DTE tzqcl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_TIMING_REGISTERS_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* DWLCFG0 */
	DDR_CONTROLLER_DTU_2_DWLCFG0_DTE dwlcfg0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DWLCFG1 */
	DDR_CONTROLLER_DTU_2_DWLCFG1_DTE dwlcfg1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DWLCFG2 */
	DDR_CONTROLLER_DTU_2_DWLCFG2_DTE dwlcfg2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DWLCFG3 */
	DDR_CONTROLLER_DTU_2_DWLCFG3_DTE dwlcfg3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved1 [ 128 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUWACTL */
	DDR_CONTROLLER_DTU_2_DTUWACTL_DTE dtuwactl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTURACTL */
	DDR_CONTROLLER_DTU_2_DTURACTL_DTE dturactl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUCFG */
	DDR_CONTROLLER_DTU_2_DTUCFG_DTE dtucfg __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUECTL */
	DDR_CONTROLLER_DTU_2_DTUECTL_DTE dtuectl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUWD0 */
	DDR_CONTROLLER_DTU_2_DTUWD0_DTE dtuwd0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUWD1 */
	DDR_CONTROLLER_DTU_2_DTUWD1_DTE dtuwd1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUWD2 */
	DDR_CONTROLLER_DTU_2_DTUWD2_DTE dtuwd2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUWD3 */
	DDR_CONTROLLER_DTU_2_DTUWD3_DTE dtuwd3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUWDM */
	DDR_CONTROLLER_DTU_2_DTUWDM_DTE dtuwdm __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTURD0 */
	DDR_CONTROLLER_DTU_2_DTURD0_DTE dturd0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTURD1 */
	DDR_CONTROLLER_DTU_2_DTURD1_DTE dturd1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTURD2 */
	DDR_CONTROLLER_DTU_2_DTURD2_DTE dturd2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTURD3 */
	DDR_CONTROLLER_DTU_2_DTURD3_DTE dturd3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTULFSRWD */
	DDR_CONTROLLER_DTU_2_DTULFSRWD_DTE dtulfsrwd __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTULFSRRD */
	DDR_CONTROLLER_DTU_2_DTULFSRRD_DTE dtulfsrrd __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DTUEAF */
	DDR_CONTROLLER_DTU_2_DTUEAF_DTE dtueaf __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTU_2_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* PHYCR */
	DDR_CONTROLLER_PHY_STATUS_PHYCR_DTE phycr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* PHYSR */
	DDR_CONTROLLER_PHY_STATUS_PHYSR_DTE physr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* IOCR */
	DDR_CONTROLLER_PHY_STATUS_IOCR_DTE iocr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RSLR0 */
	DDR_CONTROLLER_PHY_STATUS_RSLR0_DTE rslr0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved1 [ 12 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RDGR0 */
	DDR_CONTROLLER_PHY_STATUS_RDGR0_DTE rdgr0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved2 [ 12 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ZQCR */
	DDR_CONTROLLER_PHY_STATUS_ZQCR_DTE zqcr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ZQSR */
	DDR_CONTROLLER_PHY_STATUS_ZQSR_DTE zqsr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved3 [ 12 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DLLCR */
	DDR_CONTROLLER_PHY_STATUS_DLLCR_DTE dllcr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DLLCR0 */
	DDR_CONTROLLER_PHY_STATUS_DLLCR0_DTE dllcr0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DLLCR1 */
	DDR_CONTROLLER_PHY_STATUS_DLLCR1_DTE dllcr1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved4 [ 28 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DLLCR9 */
	DDR_CONTROLLER_PHY_STATUS_DLLCR9_DTE dllcr9 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved5 [ 20 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DQTR0 */
	DDR_CONTROLLER_PHY_STATUS_DQTR0_DTE dqtr0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DQTR1 */
	DDR_CONTROLLER_PHY_STATUS_DQTR1_DTE dqtr1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved6 [ 28 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DQSTR */
	DDR_CONTROLLER_PHY_STATUS_DQSTR_DTE dqstr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DQSNTR */
	DDR_CONTROLLER_PHY_STATUS_DQSNTR_DTE dqsntr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_PHY_STATUS_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* IPVR */
	DDR_CONTROLLER_IP_CONFIGURATION_IPVR_DTE ipvr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* IPTR */
	DDR_CONTROLLER_IP_CONFIGURATION_IPTR_DTE iptr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_IP_CONFIGURATION_DTE ;

#endif  /* __MIPS */

/*****************************************************************************************/
/* general bridge configurations, such as DDR parameters and features enable             */
/*****************************************************************************************/

/*****************************************************************************************/
/* Registers array numbers                                                               */
/*****************************************************************************************/
#define CE_DDR_BRIDGE_DC_PER_U_NUMBER ( 11 )
#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* DDR_parameters */
	DDR_BRIDGE_GENERAL_CONFIG_DDR_PARAMS_DTE ddr_params __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SLOW_CLIENT_EN */
	DDR_BRIDGE_GENERAL_CONFIG_SLOW_EN_DTE slow_en __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Bridge_features_enable */
	DDR_BRIDGE_GENERAL_CONFIG_FEAT_EN_DTE feat_en __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved1 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Data_coherency_enable_per_user */
	DDR_BRIDGE_GENERAL_CONFIG_DC_PER_U_DTE dc_per_u [ CE_DDR_BRIDGE_DC_PER_U_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_GENERAL_CONFIG_DTE ;

#endif  /* __MIPS */

/*****************************************************************************************/
/* fixed priority and round robin parameters, dual token bucket parameters.    All the a */
/* rrays are designed in the same order:  User0 - MIPS C  User1 - MIPS D  user2 - MIPS D */
/*  DMA  user3 - DSP  User4 - Runner A  User5 - Runner B  User6 - PCIE A  User7 - PCIE B */
/*   User8 - USB A  User9 - USB B  User10 - DMA                                          */
/*****************************************************************************************/

/*****************************************************************************************/
/* Registers array numbers                                                               */
/*****************************************************************************************/
#define CE_DDR_BRIDGE_PRI_NUMBER ( 11 )
#define CE_DDR_BRIDGE_WEIGHT_NUMBER ( 11 )
#define CE_DDR_BRIDGE_DTB_CONFIG_NUMBER ( 11 )
#define CE_DDR_BRIDGE_CIR_NUMBER ( 11 )
#define CE_DDR_BRIDGE_PIR_NUMBER ( 11 )
#define CE_DDR_BRIDGE_COST_NUMBER ( 11 )
#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* fixed_priority */
	DDR_BRIDGE_ARBITRATION_PRI_DTE pri [ CE_DDR_BRIDGE_PRI_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved1 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Weight_of_user_in_weighted_round_robin */
	DDR_BRIDGE_ARBITRATION_WEIGHT_DTE weight [ CE_DDR_BRIDGE_WEIGHT_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved2 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Dual_token_bucket_configuration */
	DDR_BRIDGE_ARBITRATION_DTB_CONFIG_DTE dtb_config [ CE_DDR_BRIDGE_DTB_CONFIG_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved3 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* CIR_bucket_parameters */
	DDR_BRIDGE_ARBITRATION_CIR_DTE cir [ CE_DDR_BRIDGE_CIR_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved4 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* PIR_bucket_parameters */
	DDR_BRIDGE_ARBITRATION_PIR_DTE pir [ CE_DDR_BRIDGE_PIR_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved5 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Fixed_cost_size */
	DDR_BRIDGE_ARBITRATION_COST_DTE cost [ CE_DDR_BRIDGE_COST_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved6 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Size_of_CIR_update_time_window */
	DDR_BRIDGE_ARBITRATION_CIR_WINDOW_DTE cir_window __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Size_of_PIR_update_time_window */
	DDR_BRIDGE_ARBITRATION_PIR_WINDOW_DTE pir_window __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ARBITRATION_DTE ;

#endif  /* __MIPS */

/*****************************************************************************************/
/* The following registers map the 32bit EC address to row, column and bank.  Each EC bi */
/* t can be mapped to each bit in the DDR address.  The mapping can be used for address  */
/* permutation (replacing bank bits with row bits for acheiving uniform distribution of  */
/* different banks accesses), or for non continues DDR address mapping.    The 32bit EC  */
/* address support 32GIGAbit DDR mapping, but since the DDR PHY supports DDR devices of  */
/* up to 4GIGA, at least 3 bits in the EC address will not be mapped.                    */
/*****************************************************************************************/

/*****************************************************************************************/
/* Registers array numbers                                                               */
/*****************************************************************************************/
#define CE_DDR_BRIDGE_ROW_MAP_NUMBER ( 4 )
#define CE_DDR_BRIDGE_COL_MAP_NUMBER ( 3 )
#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* bank_map */
	DDR_BRIDGE_ADDR_MAP_BANK_MAP_DTE bank_map __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* row_map */
	DDR_BRIDGE_ADDR_MAP_ROW_MAP_DTE row_map [ CE_DDR_BRIDGE_ROW_MAP_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* col_map */
	DDR_BRIDGE_ADDR_MAP_COL_MAP_DTE col_map [ CE_DDR_BRIDGE_COL_MAP_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_ADDR_MAP_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* msi_address */
	DDR_BRIDGE_SPECIAL_CMDS_MSI_ADR_DTE msi_adr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* msi_data */
	DDR_BRIDGE_SPECIAL_CMDS_MSI_DAT_DTE msi_dat __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sync_address */
	DDR_BRIDGE_SPECIAL_CMDS_SYNC_ADR_DTE sync_adr __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* prefer_sync_commands */
	DDR_BRIDGE_SPECIAL_CMDS_PREFER_SYNC_DTE prefer_sync __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_SPECIAL_CMDS_DTE ;

#endif  /* __MIPS */

/*****************************************************************************************/
/* debug and pm counters.    All the arrays are designed in the same order:  User0 - MIP */
/* S C  User1 - MIPS D  user2 - MIPS D DMA  user3 - DSP  User4 - Runner A  User5 - Runne */
/* r B  User6 - PCIE A  User7 - PCIE B  User8 - USB A  User9 - USB B  User10 - DMA       */
/*****************************************************************************************/

/*****************************************************************************************/
/* Registers array numbers                                                               */
/*****************************************************************************************/
#define CE_DDR_BRIDGE_MAX_TIME_NUMBER ( 11 )
#define CE_DDR_BRIDGE_ACC_TIME_NUMBER ( 11 )
#define CE_DDR_BRIDGE_LAST_ACC_TIME_NUMBER ( 11 )
#define CE_DDR_BRIDGE_ACC_REQ_NUMBER ( 11 )
#define CE_DDR_BRIDGE_LAST_ACC_REQ_NUMBER ( 11 )
#define CE_DDR_BRIDGE_BW_WR_CNT_NUMBER ( 11 )
#define CE_DDR_BRIDGE_BW_WR_CNT_LAST_NUMBER ( 11 )
#define CE_DDR_BRIDGE_BW_RD_CNT_NUMBER ( 11 )
#define CE_DDR_BRIDGE_BW_RD_CNT_LAST_NUMBER ( 11 )
#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* PM_EN */
	DDR_BRIDGE_PM_PM_EN_DTE pm_en __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* PM_time_window */
	DDR_BRIDGE_PM_PM_WINDOW_DTE pm_window __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved1 [ 8 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Maximum_time_to_be_served */
	DDR_BRIDGE_PM_MAX_TIME_DTE max_time [ CE_DDR_BRIDGE_MAX_TIME_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved2 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Accumulated_time_to_be_served */
	DDR_BRIDGE_PM_ACC_TIME_DTE acc_time [ CE_DDR_BRIDGE_ACC_TIME_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved3 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Lart_result_of_acc_time */
	DDR_BRIDGE_PM_LAST_ACC_TIME_DTE last_acc_time [ CE_DDR_BRIDGE_LAST_ACC_TIME_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved4 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Accumulated_number_of_requests_served */
	DDR_BRIDGE_PM_ACC_REQ_DTE acc_req [ CE_DDR_BRIDGE_ACC_REQ_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved5 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Last_result_of_acc_req */
	DDR_BRIDGE_PM_LAST_ACC_REQ_DTE last_acc_req [ CE_DDR_BRIDGE_LAST_ACC_REQ_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved6 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Number_of_double_words_written_to_the_DDR */
	DDR_BRIDGE_PM_BW_WR_CNT_DTE bw_wr_cnt [ CE_DDR_BRIDGE_BW_WR_CNT_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Sum_WR_CNT */
	DDR_BRIDGE_PM_BW_WR_CNT_ACC_DTE bw_wr_cnt_acc __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Last_result_of_WR_CNT */
	DDR_BRIDGE_PM_BW_WR_CNT_LAST_DTE bw_wr_cnt_last [ CE_DDR_BRIDGE_BW_WR_CNT_LAST_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Sum_of_WR_CNT_LAST */
	DDR_BRIDGE_PM_BW_WR_CNT_LAST_ACC_DTE bw_wr_cnt_last_acc __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Number_of_double_words_read_from_the_DDR */
	DDR_BRIDGE_PM_BW_RD_CNT_DTE bw_rd_cnt [ CE_DDR_BRIDGE_BW_RD_CNT_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Sum_RD_CNT */
	DDR_BRIDGE_PM_BW_RD_CNT_ACC_DTE bw_rd_cnt_acc __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Last_result_of_RD_CNT */
	DDR_BRIDGE_PM_BW_RD_CNT_LAST_DTE bw_rd_cnt_last [ CE_DDR_BRIDGE_BW_RD_CNT_LAST_NUMBER ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Sum_of_RD_CNT_LAST */
	DDR_BRIDGE_PM_BW_RD_CNT_LAST_ACC_DTE bw_rd_cnt_last_acc __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_PM_DTE ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* test_config */
	DDR_BRIDGE_TEST_MODE_CFG_DTE cfg __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_TEST_MODE_DTE ;

#endif  /* __MIPS */

typedef struct
{
#ifdef __MIPS_C  /* only MIPS_C */

	/* operational_state function */
	DDR_CONTROLLER_OPERATIONAL_STATE_DTE operational_state __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved0 [ 52 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* initialization function */
	DDR_CONTROLLER_INITIALIZATION_DTE initialization __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved1 [ 52 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* memory_configuration function */
	DDR_CONTROLLER_MEMORY_CONFIGURATION_DTE memory_configuration __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved2 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* dtu_1 function */
	DDR_CONTROLLER_DTU_1_DTE dtu_1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved3 [ 12 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* timing_registers function */
	DDR_CONTROLLER_TIMING_REGISTERS_DTE timing_registers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved4 [ 52 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* dtu_2 function */
	DDR_CONTROLLER_DTU_2_DTE dtu_2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved5 [ 128 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* phy_status function */
	DDR_CONTROLLER_PHY_STATUS_DTE phy_status __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved6 [ 380 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* ip_configuration function */
	DDR_CONTROLLER_IP_CONFIGURATION_DTE ip_configuration __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_CONTROLLER_DTE ;

typedef struct
{
#ifdef __MIPS_C  /* only MIPS_C */

	/* general_config function */
	DDR_BRIDGE_GENERAL_CONFIG_DTE general_config __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved0 [ 8 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* arbitration function */
	DDR_BRIDGE_ARBITRATION_DTE arbitration __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved1 [ 32 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* addr_map function */
	DDR_BRIDGE_ADDR_MAP_DTE addr_map __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

	/* special_cmds function */
	DDR_BRIDGE_SPECIAL_CMDS_DTE special_cmds __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved2 [ 96 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* pm function */
	DDR_BRIDGE_PM_DTE pm __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */

	/* Reserved */
	stt_uint8 reserved3 [ 348 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#ifdef __MIPS_C  /* only MIPS_C */

	/* test_mode function */
	DDR_BRIDGE_TEST_MODE_DTE test_mode __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */
}
 __PACKING_ATTRIBUTE_STRUCT_END__
DDR_BRIDGE_DTE ;

typedef struct
{
	/* CONTROLLER */
	DDR_CONTROLLER_DTE controller __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved1 [ 2048 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* BRIDGE */
	DDR_BRIDGE_DTE bridge __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__ 
DDR_DTE ;
#endif /* DDR_H_INCLUDED */

