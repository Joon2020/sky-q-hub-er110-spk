/*
* <:copyright-BRCM:2012:DUAL/GPL:standard
* 
*    Copyright (c) 2012 Broadcom Corporation
*    All Rights Reserved
* 
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License, version 2, as published by
* the Free Software Foundation (the "GPL").
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* 
* A copy of the GPL is available at http://www.broadcom.com/licenses/GPLv2.php, or by
* writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* Boston, MA 02111-1307, USA.
* 
* :> 
*/

#ifndef __CR_H_INCLUDED
#define __CR_H_INCLUDED

/*  File automatically generated by Reggae at 09/08/2011  17:31:20   */

#include "stt_basic_defs.h"
#include "access_macros.h"
#include "packing.h"

/*****************************************************************************************/
/* Lilac                                                                                 */
/*****************************************************************************************/

/*****************************************************************************************/
/* Blocks offsets                                                                        */
/*****************************************************************************************/
#define CE_CR_CONTROL_OFFSET	( 0x190A1000 )
/*****************************************************************************************/
/* Functions offsets and addresses                                                       */
/*****************************************************************************************/
#ifdef __MIPS_C  /* only MIPS_C */

#define CE_CR_CONTROL_REGS_OFFSET 	( 0x00000000 )
#define CE_CR_CONTROL_REGS_ADDRESS	( CE_CR_CONTROL_OFFSET + CE_CR_CONTROL_REGS_OFFSET )

#endif /* __MIPS */

/*   'i' is block index    */
/*   'j' is function index */
/*   'e' is function entry */
/*   'k' is register index */

#ifdef __MIPS_C  /* only MIPS_C */

/*****************************************************************************************/
/* sw_rst_l_0                                                                            */
/* Soft reset register low(default) 0 - in default the reset is low, so the client is ou */
/* t of reset when hw reset is out of reset.                                             */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SW_RST_L_0_R1_DEFAULT_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_R1_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_OTP_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_OTP_RST_OFF_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_OTP_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_SPI_FLASH_RST_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_SPI_FLASH_RST_OFF_VALUE_RESET_VALUE  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_SPI_FLASH_RST_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_NAND_FLASH_RST_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_NAND_FLASH_RST_OFF_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_0_NAND_FLASH_RST_ON_VALUE              ( 0x1 )


#define CE_CR_CONTROL_REGS_SW_RST_L_0_OFFSET ( 0x00000000 )

#define CE_CR_CONTROL_REGS_SW_RST_L_0_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SW_RST_L_0_OFFSET )
#define BL_CR_CONTROL_REGS_SW_RST_L_0_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SW_RST_L_0_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SW_RST_L_0_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SW_RST_L_0_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1        	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* otp_sw_rst */
	stt_uint32 otp       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* spi_flash_sw_rst */
	stt_uint32 spi_flash 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nand_flash_sw_rst */
	stt_uint32 nand_flash	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SW_RST_L_0_DTE ;


/*****************************************************************************************/
/* sw_rst_l_1                                                                            */
/* Soft reset register low(default) 1 - in default the reset is low, so the client is ou */
/* t of reset when hw reset is out of reset.                                             */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SW_RST_L_1_R1_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_L_1_R1_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_SW_RST_L_1_OFFSET ( 0x00000004 )

#define CE_CR_CONTROL_REGS_SW_RST_L_1_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SW_RST_L_1_OFFSET )
#define BL_CR_CONTROL_REGS_SW_RST_L_1_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SW_RST_L_1_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SW_RST_L_1_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SW_RST_L_1_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SW_RST_L_1_DTE ;


/*****************************************************************************************/
/* sw_rst_h_0                                                                            */
/* Soft reset register high(default) 0 - in default the reset is high, so the client is  */
/* still in reset when hw reset is out of reset.                                         */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SW_RST_H_0_R1_DEFAULT_VALUE                          ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_R1_DEFAULT_VALUE_RESET_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PERIPHERAL_D_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PERIPHERAL_D_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PERIPHERAL_D_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_R2_DEFAULT_VALUE                          ( 0x3 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_R2_DEFAULT_VALUE_RESET_VALUE              ( 0x3 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_UART_D_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_UART_D_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_UART_D_RST_ON_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_TIMERS_D_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_TIMERS_D_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_TIMERS_D_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPIO_D_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPIO_D_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPIO_D_RST_ON_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_D_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_D_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_D_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PKT_SRAM_OCP_DT_RST_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PKT_SRAM_OCP_DT_RST_ON_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PKT_SRAM_OCP_DT_RST_ON_VALUE_RESET_VALUE  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_COLLECTOR_D_RST_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_COLLECTOR_D_RST_ON_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_COLLECTOR_D_RST_ON_VALUE_RESET_VALUE  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_BOOT_D_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_BOOT_D_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_BOOT_D_RST_ON_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PERIPHERAL_C_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PERIPHERAL_C_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PERIPHERAL_C_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_I2C_C_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_I2C_C_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_I2C_C_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_SPI_C_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_SPI_C_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_SPI_C_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_UART_C_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_UART_C_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_UART_C_RST_ON_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_TIMERS_C_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_TIMERS_C_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_TIMERS_C_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPIO_C_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPIO_C_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPIO_C_RST_ON_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_C_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_C_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_INT_C_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PKT_SRAM_OCP_C_RST_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PKT_SRAM_OCP_C_RST_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PKT_SRAM_OCP_C_RST_ON_VALUE_RESET_VALUE   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_SERDES_VPB_RST_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_SERDES_VPB_RST_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_SERDES_VPB_RST_ON_VALUE_RESET_VALUE   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PCI_SERDES_VPB_RST_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PCI_SERDES_VPB_RST_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_PCI_SERDES_VPB_RST_ON_VALUE_RESET_VALUE   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPON_SERDES_VPBT_RST_OFF_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPON_SERDES_VPBT_RST_ON_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_GPON_SERDES_VPBT_RST_ON_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_5_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_5_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_5_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_4_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_4_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_4_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_3_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_3_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_3_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_2_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_2_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_2_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_1_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_1_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_1_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_0_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_0_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_NIF_0_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_D_DDR_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_D_DDR_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_D_DDR_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_C_DDR_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_C_DDR_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_C_DDR_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_D_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_D_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_OCP_D_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_MIPS_D_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_MIPS_D_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_0_MIPS_D_RST_ON_VALUE_RESET_VALUE           ( 0x1 )


#define CE_CR_CONTROL_REGS_SW_RST_H_0_OFFSET ( 0x00000008 )

#define CE_CR_CONTROL_REGS_SW_RST_H_0_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SW_RST_H_0_OFFSET )
#define BL_CR_CONTROL_REGS_SW_RST_H_0_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SW_RST_H_0_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SW_RST_H_0_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SW_RST_H_0_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1              	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* peripheral_d_sw_rst */
	stt_uint32 peripheral_d    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2              	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* uart_d_sw_rst */
	stt_uint32 uart_d          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* timers_d_sw_rst */
	stt_uint32 timers_d        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpio_d_sw_rst */
	stt_uint32 gpio_d          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* int_d_sw_rst */
	stt_uint32 int_d           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pkt_sram_ocp_d_sw_rst */
	stt_uint32 pkt_sram_ocp_dt 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* int_collector_d_sw_rst */
	stt_uint32 int_collector_d 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* boot_d_sw_rst */
	stt_uint32 boot_d          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* peripheral_c_sw_rst */
	stt_uint32 peripheral_c    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* i2c_c_sw_rst */
	stt_uint32 i2c_c           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* spi_c_sw_rst */
	stt_uint32 spi_c           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* uart_c_sw_rst */
	stt_uint32 uart_c          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* timers_c_sw_rst */
	stt_uint32 timers_c        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpio_c_sw_rst */
	stt_uint32 gpio_c          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* int_c_sw_rst */
	stt_uint32 int_c           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pkt_sram_ocp_c_sw_rst */
	stt_uint32 pkt_sram_ocp_c  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_serdes_vpb_sw_rst */
	stt_uint32 nif_serdes_vpb  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_serdes_vpb_sw_rst */
	stt_uint32 pci_serdes_vpb  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpon_serdes_vpb_sw_rst */
	stt_uint32 gpon_serdes_vpbt	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_5_sw_rst */
	stt_uint32 nif_5           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_4_sw_rst */
	stt_uint32 nif_4           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_3_sw_rst */
	stt_uint32 nif_3           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_2_sw_rst */
	stt_uint32 nif_2           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_1_sw_rst */
	stt_uint32 nif_1           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_0_sw_rst */
	stt_uint32 nif_0           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ocp_d_ddr_sw_rst */
	stt_uint32 ocp_d_ddr       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ocp_c_ddr_sw_rst */
	stt_uint32 ocp_c_ddr       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ocp_d_sw_rst */
	stt_uint32 ocp_d           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_sw_rst */
	stt_uint32 mips_d          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SW_RST_H_0_DTE ;


/*****************************************************************************************/
/* sw_rst_h_1                                                                            */
/* Soft reset register high(default) 1 - in default the reset is high, so the client is  */
/* still in reset when hw reset is out of reset.                                         */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SW_RST_H_1_R1_DEFAULT_VALUE                       ( 0x3FF )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_R1_DEFAULT_VALUE_RESET_VALUE           ( 0x3FF )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_CDR_DIAG_FAST_RST_OFF_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_CDR_DIAG_FAST_RST_ON_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_CDR_DIAG_FAST_RST_ON_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_MAIN_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_MAIN_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_MAIN_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_R3_DEFAULT_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_R3_DEFAULT_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_IPCLOCK_RST_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_IPCLOCK_RST_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_IPCLOCK_RST_ON_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_CDR_DIAG_DATA_RST_OFF_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_CDR_DIAG_DATA_RST_ON_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_CDR_DIAG_DATA_RST_ON_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_RNG_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_RNG_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_RNG_RST_ON_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_8K_CLK_RST_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_8K_CLK_RST_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_8K_CLK_RST_ON_VALUE_RESET_VALUE   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_RX_RST_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_RX_RST_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_GPON_RX_RST_ON_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_R2_DEFAULT_VALUE                       ( 0x7FF )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_R2_DEFAULT_VALUE_RESET_VALUE           ( 0x7FF )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_BRIDGE_RST_OFF_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_BRIDGE_RST_ON_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_BRIDGE_RST_ON_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_RST_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_RST_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_RST_ON_VALUE_RESET_VALUE           ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_PHY_RST_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_PHY_RST_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_1_DDR_PHY_RST_ON_VALUE_RESET_VALUE       ( 0x1 )


#define CE_CR_CONTROL_REGS_SW_RST_H_1_OFFSET ( 0x0000000C )

#define CE_CR_CONTROL_REGS_SW_RST_H_1_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SW_RST_H_1_OFFSET )
#define BL_CR_CONTROL_REGS_SW_RST_H_1_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SW_RST_H_1_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SW_RST_H_1_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SW_RST_H_1_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1           	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cdr_diag_fast_sw_rst */
	stt_uint32 cdr_diag_fast	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpon_main_sw_rst */
	stt_uint32 gpon_main    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r3           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipclock_sw_rst */
	stt_uint32 ipclock      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cdr_diag_data_sw_rst */
	stt_uint32 cdr_diag_data	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rng_sw_rst */
	stt_uint32 rng          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpon_8k_clk_sw_rst */
	stt_uint32 gpon_8k_clk  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpon_rx_sw_rst */
	stt_uint32 gpon_rx      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2           	: 11 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_bridge_sw_rst */
	stt_uint32 ddr_bridge   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_sw_rst */
	stt_uint32 ddr          	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_phy_sw_rst */
	stt_uint32 ddr_phy      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SW_RST_H_1_DTE ;


/*****************************************************************************************/
/* sw_rst_h_2                                                                            */
/* Soft reset register high(default) 2 - in default the reset is high, so the client is  */
/* still in reset when hw reset is out of reset.                                         */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SW_RST_H_2_R1_DEFAULT_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_R1_DEFAULT_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IPSEC_MAIN_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IPSEC_MAIN_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IPSEC_MAIN_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_DDR_1_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_DDR_1_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_DDR_1_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_EC_RST_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_EC_RST_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_EC_RST_ON_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_AHB_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_AHB_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_AHB_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_PCS_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_PCS_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_PCS_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_R4_DEFAULT_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_R4_DEFAULT_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_CORE_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_CORE_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_1_CORE_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_DDR_0_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_DDR_0_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_DDR_0_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_EC_RST_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_EC_RST_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_EC_RST_ON_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_AHB_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_AHB_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_AHB_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_PCS_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_PCS_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_PCS_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_R3_DEFAULT_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_R3_DEFAULT_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_CORE_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_CORE_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_PCI_0_CORE_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_TDM_TX_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_TDM_TX_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_TDM_TX_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_TDM_RX_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_TDM_RX_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_TDM_RX_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DSP_DDR_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DSP_DDR_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DSP_DDR_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_VOIP_INTERFACE_RST_OFF_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_VOIP_INTERFACE_RST_ON_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_VOIP_INTERFACE_RST_ON_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DSP_CORE_RST_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DSP_CORE_RST_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DSP_CORE_RST_ON_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DMA_DDR_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DMA_DDR_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_DMA_DDR_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_MIPS_D_RNR_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_MIPS_D_RNR_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_MIPS_D_RNR_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_GENERAL_MAIN_RST_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_GENERAL_MAIN_RST_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_GENERAL_MAIN_RST_ON_VALUE_RESET_VALUE   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_R2_R_VALUE                              ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_R2_R_VALUE_RESET_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_BB_MAIN_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_BB_MAIN_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_BB_MAIN_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_BB_RNR_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_BB_RNR_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_BB_RNR_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IH_RNR_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IH_RNR_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IH_RNR_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IPSEC_RNR_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IPSEC_RNR_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_IPSEC_RNR_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_SUB_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_SUB_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_SUB_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_1_DDR_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_1_DDR_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_1_DDR_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_1_RST_OFF_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_1_RST_ON_VALUE                      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_1_RST_ON_VALUE_RESET_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_0_DDR_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_0_DDR_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_0_DDR_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_0_RST_OFF_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_0_RST_ON_VALUE                      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_2_RNR_0_RST_ON_VALUE_RESET_VALUE          ( 0x1 )


#define CE_CR_CONTROL_REGS_SW_RST_H_2_OFFSET ( 0x00000010 )

#define CE_CR_CONTROL_REGS_SW_RST_H_2_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SW_RST_H_2_OFFSET )
#define BL_CR_CONTROL_REGS_SW_RST_H_2_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SW_RST_H_2_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SW_RST_H_2_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SW_RST_H_2_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipsec_main_sw_rst */
	stt_uint32 ipsec_main    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_ddr_1_sw_rst */
	stt_uint32 pci_ddr_1     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_1_ec_sw_rst */
	stt_uint32 pci_1_ec      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_1_ahb_sw_rst */
	stt_uint32 pci_1_ahb     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_1_pcs_sw_rst */
	stt_uint32 pci_1_pcs     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r4            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_1_core_sw_rst */
	stt_uint32 pci_1_core    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_ddr_0_sw_rst */
	stt_uint32 pci_ddr_0     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_0_ec_sw_rst */
	stt_uint32 pci_0_ec      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_0_ahb_sw_rst */
	stt_uint32 pci_0_ahb     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_0_pcs_sw_rst */
	stt_uint32 pci_0_pcs     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r3            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_0_core_sw_rst */
	stt_uint32 pci_0_core    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdm_tx_sw_rst */
	stt_uint32 tdm_tx        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdm_rx_sw_rst */
	stt_uint32 tdm_rx        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_ddr_sw_rst */
	stt_uint32 dsp_ddr       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* voip_interface_sw_rst */
	stt_uint32 voip_interface	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_core_sw_rst */
	stt_uint32 dsp_core      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dma_ddr_sw_rst */
	stt_uint32 dma_ddr       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_rnr_sw_rst */
	stt_uint32 mips_d_rnr    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* general_main_sw_rst */
	stt_uint32 general_main  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* reserved */
	stt_uint32 r2            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bb_main_sw_rst */
	stt_uint32 bb_main       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* bb_rnr_sw_rst */
	stt_uint32 bb_rnr        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ih_rnr_sw_rst */
	stt_uint32 ih_rnr        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipsec_rnr_sw_rst */
	stt_uint32 ipsec_rnr     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rnr_sub_sw_rst */
	stt_uint32 rnr_sub       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rnr_1_ddr_sw_rst */
	stt_uint32 rnr_1_ddr     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rnr_1_sw_rst */
	stt_uint32 rnr_1         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rnr_0_ddr_sw_rst */
	stt_uint32 rnr_0_ddr     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rnr_0_sw_rst */
	stt_uint32 rnr_0         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SW_RST_H_2_DTE ;


/*****************************************************************************************/
/* sw_rst_h_3                                                                            */
/* Soft reset register high(default) 1 - in default the reset is high, so the client is  */
/* still in reset when hw reset is out of reset.                                         */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SW_RST_H_3_R1_DEFAULT_VALUE                               ( 0x3FF )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_R1_DEFAULT_VALUE_RESET_VALUE                   ( 0x3FF )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_CR_DLL_SEL_TX_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_CR_DLL_SEL_TX_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_CR_DLL_SEL_TX_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_CR_DLL_SEL_RX_RST_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_CR_DLL_SEL_RX_RST_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_CR_DLL_SEL_RX_RST_ON_VALUE_RESET_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_DDR_1_RST_OFF_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_DDR_1_RST_ON_VALUE                         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_DDR_1_RST_ON_VALUE_RESET_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_BRIDGE_OCP_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_BRIDGE_OCP_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_BRIDGE_OCP_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_BRIDGE_HOST_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_BRIDGE_HOST_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_BRIDGE_HOST_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_AUX_WELL_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_AUX_WELL_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_AUX_WELL_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_HOST_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_HOST_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_HOST_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_DDR_0_RST_OFF_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_DDR_0_RST_ON_VALUE                         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_DDR_0_RST_ON_VALUE_RESET_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_BRIDGE_OCP_RST_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_BRIDGE_OCP_RST_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_BRIDGE_OCP_RST_ON_VALUE_RESET_VALUE      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_BRIDGE_HOST_RST_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_BRIDGE_HOST_RST_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_BRIDGE_HOST_RST_ON_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_AUX_WELL_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_AUX_WELL_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_AUX_WELL_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_HOST_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_HOST_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_HOST_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_BRIDGE_COMMON_OCP_RST_OFF_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_BRIDGE_COMMON_OCP_RST_ON_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_BRIDGE_COMMON_OCP_RST_ON_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_R2_DEFAULT_VALUE                               ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_R2_DEFAULT_VALUE_RESET_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_COMMON_HOST_RST_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_COMMON_HOST_RST_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_COMMON_HOST_RST_ON_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_PORT_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_PORT_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_PORT_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_OHCI_PLL_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_OHCI_PLL_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_OHCI_PLL_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_PHY_RST_OFF_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_PHY_RST_ON_VALUE                         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_1_PHY_RST_ON_VALUE_RESET_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_PORT_RST_OFF_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_PORT_RST_ON_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_PORT_RST_ON_VALUE_RESET_VALUE            ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_OHCI_PLL_RST_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_OHCI_PLL_RST_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_OHCI_PLL_RST_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_PHY_RST_OFF_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_PHY_RST_ON_VALUE                         ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_0_PHY_RST_ON_VALUE_RESET_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_POWER_ON_RST_OFF_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_POWER_ON_RST_ON_VALUE                      ( 0x1 )
#define CE_CR_CONTROL_REGS_SW_RST_H_3_USB_POWER_ON_RST_ON_VALUE_RESET_VALUE          ( 0x1 )


#define CE_CR_CONTROL_REGS_SW_RST_H_3_OFFSET ( 0x00000014 )

#define CE_CR_CONTROL_REGS_SW_RST_H_3_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SW_RST_H_3_OFFSET )
#define BL_CR_CONTROL_REGS_SW_RST_H_3_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SW_RST_H_3_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SW_RST_H_3_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SW_RST_H_3_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1                   	: 10 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_dll_sel_tx_sw_rst */
	stt_uint32 cr_dll_sel_tx        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_dll_sel_rx_sw_rst */
	stt_uint32 cr_dll_sel_rx        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_ddr_1_sw_rst */
	stt_uint32 usb_ddr_1            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_bridge_ocp_sw_rst */
	stt_uint32 usb_1_bridge_ocp     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_bridge_host_sw_rst */
	stt_uint32 usb_1_bridge_host    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_aux_well_sw_rst */
	stt_uint32 usb_1_aux_well       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_host_sw_rst */
	stt_uint32 usb_1_host           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_ddr_0_sw_rst */
	stt_uint32 usb_ddr_0            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_bridge_ocp_sw_rst */
	stt_uint32 usb_0_bridge_ocp     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_bridge_host_sw_rst */
	stt_uint32 usb_0_bridge_host    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_aux_well_sw_rst */
	stt_uint32 usb_0_aux_well       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_host_sw_rst */
	stt_uint32 usb_0_host           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_bridge_common_ocp_sw_rst */
	stt_uint32 usb_bridge_common_ocp	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2                   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_common_host_sw_rst */
	stt_uint32 usb_common_host      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_port_sw_rst */
	stt_uint32 usb_1_port           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_ohci_pll_sw_rst */
	stt_uint32 usb_1_ohci_pll       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_phy_sw_rst */
	stt_uint32 usb_1_phy            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_port_sw_rst */
	stt_uint32 usb_0_port           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_ohci_pll_sw_rst */
	stt_uint32 usb_0_ohci_pll       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_phy_sw_rst */
	stt_uint32 usb_0_phy            	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_power_on_sw_rst */
	stt_uint32 usb_power_on         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SW_RST_H_3_DTE ;


/*****************************************************************************************/
/* enable_l                                                                              */
/* enable clock low. In default these clocks are disabled.                               */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_ENABLE_L_R1_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_R1_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TM_IPSEC_ENABLE_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TM_IPSEC_ENABLE_OFF_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TM_IPSEC_ENABLE_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_R2_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_R2_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_SYNCE_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_SYNCE_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_SYNCE_ENABLE_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_IPCLOCK_ENABLE_OFF_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_IPCLOCK_ENABLE_OFF_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_IPCLOCK_ENABLE_ON_VALUE                  ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_CDR_DIAG_ENABLE_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_CDR_DIAG_ENABLE_OFF_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_CDR_DIAG_ENABLE_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TDMTX_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TDMTX_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TDMTX_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TDMRX_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TDMRX_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TDMRX_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_CLUSTER_1_ENABLE_OFF_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_CLUSTER_1_ENABLE_OFF_VALUE_RESET_VALUE   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_CLUSTER_1_ENABLE_ON_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TM_ENABLE_OFF_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TM_ENABLE_OFF_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_TM_ENABLE_ON_VALUE                       ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_DSP_ENABLE_OFF_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_DSP_ENABLE_OFF_VALUE_RESET_VALUE         ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_DSP_ENABLE_ON_VALUE                      ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_CORE_ENABLE_OFF_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_CORE_ENABLE_OFF_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_CORE_ENABLE_ON_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_1_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_1_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_1_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_0_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_0_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_0_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_COMMON_ENABLE_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_COMMON_ENABLE_OFF_VALUE_RESET_VALUE  ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_USB_COMMON_ENABLE_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_SERDES_ENABLE_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_SERDES_ENABLE_OFF_VALUE_RESET_VALUE  ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_SERDES_ENABLE_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_1_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_1_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_1_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_0_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_0_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_PCI_0_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_SERDES_ENABLE_OFF_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_SERDES_ENABLE_OFF_VALUE_RESET_VALUE  ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_SERDES_ENABLE_ON_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_5_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_5_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_5_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_4_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_4_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_4_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_3_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_3_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_3_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_2_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_2_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_2_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_1_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_1_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_1_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_0_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_0_ENABLE_OFF_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_NIF_0_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_GPON_SERDES_ENABLE_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_GPON_SERDES_ENABLE_OFF_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_GPON_SERDES_ENABLE_ON_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_GPON_ENABLE_OFF_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_GPON_ENABLE_OFF_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_GPON_ENABLE_ON_VALUE                     ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_DDR_ENABLE_OFF_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_DDR_ENABLE_OFF_VALUE_RESET_VALUE         ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_DDR_ENABLE_ON_VALUE                      ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_BOOT_D_ENABLE_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_BOOT_D_ENABLE_OFF_VALUE_RESET_VALUE      ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_BOOT_D_ENABLE_ON_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_L_MIPS_D_ENABLE_OFF_VALUE                  ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_MIPS_D_ENABLE_OFF_VALUE_RESET_VALUE      ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_L_MIPS_D_ENABLE_ON_VALUE                   ( 0x1 )


#define CE_CR_CONTROL_REGS_ENABLE_L_OFFSET ( 0x00000018 )

#define CE_CR_CONTROL_REGS_ENABLE_L_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_ENABLE_L_OFFSET )
#define BL_CR_CONTROL_REGS_ENABLE_L_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_ENABLE_L_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_ENABLE_L_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_ENABLE_L_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1         	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tm_ipsec_enable */
	stt_uint32 tm_ipsec   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* synce_enable */
	stt_uint32 synce      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipclock_enable */
	stt_uint32 ipclock    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cdr_diag_enable */
	stt_uint32 cdr_diag   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdmtx_enable */
	stt_uint32 tdmtx      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdmrx_enable */
	stt_uint32 tdmrx      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cluster_1_enable */
	stt_uint32 cluster_1  	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tm_enable */
	stt_uint32 tm         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_enable */
	stt_uint32 dsp        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_core_enable */
	stt_uint32 usb_core   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_1_enable */
	stt_uint32 usb_1      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_0_enable */
	stt_uint32 usb_0      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_common_enable */
	stt_uint32 usb_common 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_serdes_enable */
	stt_uint32 pci_serdes 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_1_enable */
	stt_uint32 pci_1      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_0_enable */
	stt_uint32 pci_0      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_serdes_enable */
	stt_uint32 nif_serdes 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_5_enable */
	stt_uint32 nif_5      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_4_enable */
	stt_uint32 nif_4      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_3_enable */
	stt_uint32 nif_3      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_2_enable */
	stt_uint32 nif_2      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_1_enable */
	stt_uint32 nif_1      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nif_0_enable */
	stt_uint32 nif_0      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpon_serdes_enable */
	stt_uint32 gpon_serdes	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gpon_enable */
	stt_uint32 gpon       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_enable */
	stt_uint32 ddr        	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* boot_d_enable */
	stt_uint32 boot_d     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_enable */
	stt_uint32 mips_d     	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_ENABLE_L_DTE ;


/*****************************************************************************************/
/* enable_h                                                                              */
/* enable clock high. In default these clocks are enabled.                               */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_ENABLE_H_R1_DEFAULT_VALUE                       ( 0x1FFFFFFF )
#define CE_CR_CONTROL_REGS_ENABLE_H_R1_DEFAULT_VALUE_RESET_VALUE           ( 0x1FFFFFFF )
#define CE_CR_CONTROL_REGS_ENABLE_H_OTP_ENABLE_OFF_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_H_OTP_ENABLE_ON_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_H_OTP_ENABLE_ON_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_H_SPI_FLASH_ENABLE_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_H_SPI_FLASH_ENABLE_ON_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_H_SPI_FLASH_ENABLE_ON_VALUE_RESET_VALUE  ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_H_NAND_FLASH_ENABLE_OFF_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_ENABLE_H_NAND_FLASH_ENABLE_ON_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_ENABLE_H_NAND_FLASH_ENABLE_ON_VALUE_RESET_VALUE ( 0x1 )


#define CE_CR_CONTROL_REGS_ENABLE_H_OFFSET ( 0x0000001C )

#define CE_CR_CONTROL_REGS_ENABLE_H_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_ENABLE_H_OFFSET )
#define BL_CR_CONTROL_REGS_ENABLE_H_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_ENABLE_H_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_ENABLE_H_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_ENABLE_H_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r1        	: 29 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* otp_enable */
	stt_uint32 otp       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* spi_flash_enable */
	stt_uint32 spi_flash 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nand_flash_enable */
	stt_uint32 nand_flash	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_ENABLE_H_DTE ;


/*****************************************************************************************/
/* pll_0                                                                                 */
/* pll 0 params                                                                          */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_PLL_0_R3_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_R3_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_R3_VAL_292_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_SRC_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_SRC_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_M_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_M_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_R2_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_R2_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_R2_VAL_285_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_N_DEFAULT_VALUE                   ( 0x32 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_N_DEFAULT_VALUE_RESET_VALUE       ( 0x32 )
#define CE_CR_CONTROL_REGS_PLL_0_R1_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_R1_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_R1_VAL_283_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_K_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_0_PLL_0_K_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )


#define CE_CR_CONTROL_REGS_PLL_0_OFFSET ( 0x00000020 )

#define CE_CR_CONTROL_REGS_PLL_0_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_PLL_0_OFFSET )
#define BL_CR_CONTROL_REGS_PLL_0_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_PLL_0_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_PLL_0_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_PLL_0_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_0_src_sel */
	stt_uint32 pll_0_src_sel	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_0_m */
	stt_uint32 pll_0_m      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2           	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_0_n */
	stt_uint32 pll_0_n      	: 13 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1           	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_0_k */
	stt_uint32 pll_0_k      	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_PLL_0_DTE ;


/*****************************************************************************************/
/* pll_1                                                                                 */
/* pll 1 params                                                                          */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_PLL_1_R3_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_R3_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_R3_VAL_303_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_SRC_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_SRC_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_M_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_M_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_R2_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_R2_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_R2_VAL_296_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_N_DEFAULT_VALUE                   ( 0x28 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_N_DEFAULT_VALUE_RESET_VALUE       ( 0x28 )
#define CE_CR_CONTROL_REGS_PLL_1_R1_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_R1_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_R1_VAL_294_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_K_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_1_PLL_1_K_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )


#define CE_CR_CONTROL_REGS_PLL_1_OFFSET ( 0x00000024 )

#define CE_CR_CONTROL_REGS_PLL_1_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_PLL_1_OFFSET )
#define BL_CR_CONTROL_REGS_PLL_1_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_PLL_1_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_PLL_1_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_PLL_1_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_1_src_sel */
	stt_uint32 pll_1_src_sel	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_1_m */
	stt_uint32 pll_1_m      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2           	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_1_n */
	stt_uint32 pll_1_n      	: 13 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1           	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_1_k */
	stt_uint32 pll_1_k      	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_PLL_1_DTE ;


/*****************************************************************************************/
/* pll_2                                                                                 */
/* pll 2 params                                                                          */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_PLL_2_R3_VAL_314_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_R3_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_R3_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_SRC_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_SRC_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_M_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_M_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_R2_VAL_307_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_R2_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_R2_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_N_DEFAULT_VALUE                   ( 0xA3 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_N_DEFAULT_VALUE_RESET_VALUE       ( 0xA3 )
#define CE_CR_CONTROL_REGS_PLL_2_R1_VAL_305_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_R1_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_R1_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_K_DEFAULT_VALUE                   ( 0x2 )
#define CE_CR_CONTROL_REGS_PLL_2_PLL_2_K_DEFAULT_VALUE_RESET_VALUE       ( 0x2 )


#define CE_CR_CONTROL_REGS_PLL_2_OFFSET ( 0x00000028 )

#define CE_CR_CONTROL_REGS_PLL_2_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_PLL_2_OFFSET )
#define BL_CR_CONTROL_REGS_PLL_2_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_PLL_2_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_PLL_2_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_PLL_2_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_2_src_sel */
	stt_uint32 pll_2_src_sel	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_2_m */
	stt_uint32 pll_2_m      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2           	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_2_n */
	stt_uint32 pll_2_n      	: 13 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1           	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_2_k */
	stt_uint32 pll_2_k      	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_PLL_2_DTE ;


/*****************************************************************************************/
/* mips_c_dividers                                                                       */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_PERIPH_C_EN_M_PERIPH_OFF_VALUE         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_PERIPH_C_EN_M_PERIPH_ON_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_PERIPH_C_EN_DEFAULT_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_PERIPH_C_EN_DEFAULT_VALUE_RESET_VALUE  ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_PERIPH_C_DEFAULT_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_PERIPH_C_DEFAULT_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R3_VAL_323_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R3_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_OCP_C_DIV_2_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_OCP_C_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_OCP_C_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_OCP_C_DIV_4_VALUE                      ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R2_VAL_320_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R2_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_MIPS_C_DEFAULT_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_M_MIPS_C_DEFAULT_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R1_VAL_318_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R1_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_MIPS_C_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_MIPS_C_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_OFFSET ( 0x0000002C )

#define CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_MIPS_C_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_MIPS_C_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_MIPS_C_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* m_periph_c_en */
	stt_uint32 m_periph_c_en 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_periph_c */
	stt_uint32 m_periph_c    	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r3            	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ocp_c */
	stt_uint32 m_ocp_c       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2            	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_mips_c */
	stt_uint32 m_mips_c      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1            	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_c_pll_sel */
	stt_uint32 mips_c_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_MIPS_C_DIVIDERS_DTE ;


/*****************************************************************************************/
/* MIPS_C_PLL_Bypass                                                                     */
/* MIPS_C_PLL_Bypass                                                                     */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_RESERVED_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_RESERVED_VAL_329_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_MIPS_C_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_MIPS_C_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_MIPS_C_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_MIPS_C_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_OFFSET ( 0x00000030 )

#define CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved       	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_c_f_clk_en */
	stt_uint32 mips_c_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* nand_flash_dividers                                                                   */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R3_DEFAULT_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R3_VAL_338_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_M_NAND_FLASH_EN_M_NAND_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_M_NAND_FLASH_EN_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_M_NAND_FLASH_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_M_NAND_FLASH_EN_M_NAND_ON_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R2_DEFAULT_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R2_VAL_335_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_M_NAND_FLASH_DEFAULT_VALUE                   ( 0x7 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_M_NAND_FLASH_DEFAULT_VALUE_RESET_VALUE       ( 0x7 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R1_DEFAULT_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_R1_VAL_333_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_NAND_FLASH_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_NAND_FLASH_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_OFFSET ( 0x00000034 )

#define CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3                	: 15 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_nand_flash_en */
	stt_uint32 m_nand_flash_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2                	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_nand_flash */
	stt_uint32 m_nand_flash      	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1                	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nand_flash_pll_sel */
	stt_uint32 nand_flash_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_DTE ;


/*****************************************************************************************/
/* NAND_Flash_PLL_Bypass                                                                 */
/* NAND_Flash_PLL_Bypass                                                                 */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_RESERVED_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_RESERVED_VAL_341_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_NAND_FLASH_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_NAND_FLASH_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_NAND_FLASH_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_NAND_FLASH_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_OFFSET ( 0x00000038 )

#define CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved           	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nand_flash_f_clk_en */
	stt_uint32 nand_flash_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* spi_flash_dividers                                                                    */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R3_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R3_VAL_350_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_M_SPI_FLASH_EN_M_NAND_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_M_SPI_FLASH_EN_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_M_SPI_FLASH_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_M_SPI_FLASH_EN_M_NAND_ON_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R2_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R2_VAL_347_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_M_SPI_FLASH_DEFAULT_VALUE                   ( 0x3 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_M_SPI_FLASH_DEFAULT_VALUE_RESET_VALUE       ( 0x3 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R1_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_R1_VAL_345_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_SPI_FLASH_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_SPI_FLASH_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_OFFSET ( 0x0000003C )

#define CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3               	: 15 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_spi_flash_en */
	stt_uint32 m_spi_flash_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2               	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_spi_flash */
	stt_uint32 m_spi_flash      	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1               	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* spi_flash_pll_sel */
	stt_uint32 spi_flash_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_DTE ;


/*****************************************************************************************/
/* SPI_Flash_PLL_Bypass                                                                  */
/* SPI_Flash_PLL_Bypass                                                                  */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_RESERVED_DEFAULT_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_RESERVED_VAL_353_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_SPI_FLASH_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_SPI_FLASH_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_SPI_FLASH_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_SPI_FLASH_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_OFFSET ( 0x00000040 )

#define CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved          	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* spi_flash_f_clk_en */
	stt_uint32 spi_flash_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* mips_d_dividers                                                                       */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_PERIPH_D_EN_DEFAULT_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_PERIPH_D_EN_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_PERIPH_D_EN_M_PERIPH_OFF_VALUE         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_PERIPH_D_EN_M_PERIPH_ON_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_PERIPH_D_DEFAULT_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_PERIPH_D_DEFAULT_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R4_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R4_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R4_VAL_367_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_EN_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_EN_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_EN_M_OCP_OFF_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_EN_M_OCP_ON_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R3_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R3_VAL_364_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_DIV_2_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_DEFAULT_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_DEFAULT_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_OCP_D_DIV_4_VALUE                      ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R2_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R2_VAL_361_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_MIPS_D_EN_DEFAULT_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_MIPS_D_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_MIPS_D_EN_M_MIPS_OFF_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_MIPS_D_EN_M_MIPS_ON_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_MIPS_D_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_M_MIPS_D_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R1_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_R1_VAL_357_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_MIPS_D_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_MIPS_D_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_OFFSET ( 0x00000044 )

#define CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_MIPS_D_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_MIPS_D_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_MIPS_D_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* m_periph_d_en */
	stt_uint32 m_periph_d_en 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_periph_d */
	stt_uint32 m_periph_d    	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r4            	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ocp_d_en */
	stt_uint32 m_ocp_d_en    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r3            	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ocp_d */
	stt_uint32 m_ocp_d       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2            	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_mips_d_en */
	stt_uint32 m_mips_d_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_mips_d */
	stt_uint32 m_mips_d      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1            	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_pll_sel */
	stt_uint32 mips_d_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_MIPS_D_DIVIDERS_DTE ;


/*****************************************************************************************/
/* MIPS_D_PLL_Bypass                                                                     */
/* MIPS_D_PLL_Bypass                                                                     */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_RESERVED_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_RESERVED_VAL_373_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_MIPS_D_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_MIPS_D_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_MIPS_D_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_MIPS_D_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_OFFSET ( 0x00000048 )

#define CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved       	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_f_clk_en */
	stt_uint32 mips_d_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* tm_dividers                                                                           */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R3_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R3_VAL_385_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_TM_EN_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_TM_EN_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_TM_EN_VAL_383_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_TM_EN_VAL_384_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_TM_DEFAULT_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_TM_DEFAULT_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R2_VAL_381_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R2_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_RNR_EN_DEFAULT_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_RNR_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_RNR_EN_VAL_379_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_RNR_EN_VAL_380_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_RNR_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_M_RNR_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R1_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_R1_VAL_377_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_RNR_PLL_SEL_SEL_0_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_RNR_PLL_SEL_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_RNR_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_RNR_PLL_SEL_SEL_1_VALUE               ( 0x1 )
#define CE_CR_CONTROL_REGS_TM_DIVIDERS_RNR_PLL_SEL_SEL_2_VALUE               ( 0x2 )


#define CE_CR_CONTROL_REGS_TM_DIVIDERS_OFFSET ( 0x0000004C )

#define CE_CR_CONTROL_REGS_TM_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_TM_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_TM_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_TM_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_TM_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_TM_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3         	: 11 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_tm_en */
	stt_uint32 m_tm_en    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_tm */
	stt_uint32 m_tm       	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2         	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_rnr_en */
	stt_uint32 m_rnr_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_rnr */
	stt_uint32 m_rnr      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1         	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rnr_pll_sel */
	stt_uint32 rnr_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_TM_DIVIDERS_DTE ;


/*****************************************************************************************/
/* RNR_PLL_Bypass                                                                        */
/* RNR_PLL_Bypass                                                                        */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_RESERVED_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_RESERVED_VAL_388_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_RNR_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_RNR_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_RNR_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_RNR_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_OFFSET ( 0x00000050 )

#define CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_RNR_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_RNR_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_RNR_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved    	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rnr_f_clk_en */
	stt_uint32 rnr_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_RNR_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* ddr_dividers                                                                          */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R4_DEFAULT_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R4_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R4_VAL_405_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_XOR2_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_XOR2_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_XOR2_VAL_403_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_XOR2_VAL_404_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_BYPASS_DIV2_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_BYPASS_DIV2_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_BYPASS_DIV2_VAL_401_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_BYPASS_DIV2_VAL_402_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R3_DEFAULT_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R3_VAL_400_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_BRIDGE_EN_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_BRIDGE_EN_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_BRIDGE_EN_VAL_398_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_BRIDGE_EN_VAL_399_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_BRIDGE_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_BRIDGE_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R2_DEFAULT_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R2_VAL_396_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_EN_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_EN_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_EN_VAL_394_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_EN_VAL_395_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_DEFAULT_VALUE                       ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_M_DDR_DEFAULT_VALUE_RESET_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R1_DEFAULT_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_R1_VAL_392_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_PLL_SEL_VAL_389_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_PLL_SEL_VAL_390_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_PLL_SEL_VAL_391_VALUE                 ( 0x2 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_PLL_SEL_DEFAULT_VALUE                 ( 0x2 )
#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_DDR_PLL_SEL_DEFAULT_VALUE_RESET_VALUE     ( 0x2 )


#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_OFFSET ( 0x00000054 )

#define CE_CR_CONTROL_REGS_DDR_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_DDR_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_DDR_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_DDR_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_DDR_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_DDR_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r4             	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_xor2 */
	stt_uint32 ddr_xor2       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_bypass_div2 */
	stt_uint32 ddr_bypass_div2	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r3             	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ddr_bridge_en */
	stt_uint32 m_ddr_bridge_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ddr_bridge */
	stt_uint32 m_ddr_bridge   	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2             	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ddr_en */
	stt_uint32 m_ddr_en       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ddr */
	stt_uint32 m_ddr          	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1             	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_pll_sel */
	stt_uint32 ddr_pll_sel    	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_DDR_DIVIDERS_DTE ;


/*****************************************************************************************/
/* DDR_PLL_Bypass                                                                        */
/* DDR_PLL_Bypass                                                                        */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_RESERVED_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_RESERVED_VAL_408_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_DDR_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_DDR_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_DDR_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_DDR_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_OFFSET ( 0x00000058 )

#define CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_DDR_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_DDR_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_DDR_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved    	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_f_clk_en */
	stt_uint32 ddr_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_DDR_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* dsp_dividers                                                                          */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_R2_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_R2_VAL_416_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_M_DSP_EN_DEFAULT_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_M_DSP_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_M_DSP_EN_VAL_414_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_M_DSP_EN_VAL_415_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_M_DSP_DEFAULT_VALUE                   ( 0x2 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_M_DSP_DEFAULT_VALUE_RESET_VALUE       ( 0x2 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_R1_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_R1_VAL_412_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_DSP_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_DSP_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_DSP_PLL_SEL_VAL_409_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_DSP_PLL_SEL_VAL_410_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_DSP_PLL_SEL_VAL_411_VALUE             ( 0x2 )


#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_OFFSET ( 0x0000005C )

#define CE_CR_CONTROL_REGS_DSP_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_DSP_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_DSP_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_DSP_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_DSP_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_DSP_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r2         	: 19 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_dsp_en */
	stt_uint32 m_dsp_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_dsp */
	stt_uint32 m_dsp      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1         	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_pll_sel */
	stt_uint32 dsp_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_DSP_DIVIDERS_DTE ;


/*****************************************************************************************/
/* DSP_PLL_Bypass                                                                        */
/* DSP_PLL_Bypass                                                                        */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_RESERVED_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_RESERVED_VAL_419_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_DSP_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_DSP_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_DSP_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_DSP_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_OFFSET ( 0x00000060 )

#define CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_DSP_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_DSP_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_DSP_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved    	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_f_clk_en */
	stt_uint32 dsp_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_DSP_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* tdmrx_dividers                                                                        */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R3_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R3_VAL_431_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_M_TDMRX_EN_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_M_TDMRX_EN_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_M_TDMRX_EN_VAL_429_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_M_TDMRX_EN_VAL_430_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R2_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R2_VAL_428_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_DSP_TDM_RXCLK_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_DSP_TDM_RXCLK_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_DSP_TDM_RXCLK_SEL_VAL_426_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_DSP_TDM_RXCLK_SEL_VAL_427_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_M_TDMRX_DEFAULT_VALUE                       ( 0x15 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_M_TDMRX_DEFAULT_VALUE_RESET_VALUE           ( 0x15 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_PRE_M_TDMRX_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_PRE_M_TDMRX_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R1_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_R1_VAL_423_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_TDMRX_PLL_SEL_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_TDMRX_PLL_SEL_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_TDMRX_PLL_SEL_VAL_420_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_TDMRX_PLL_SEL_VAL_421_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_TDMRX_PLL_SEL_VAL_422_VALUE                 ( 0x2 )


#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_OFFSET ( 0x00000064 )

#define CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_TDMRX_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_TDMRX_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_TDMRX_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3               	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_tdmrx_en */
	stt_uint32 m_tdmrx_en       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2               	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_tdm_rxclk_sel */
	stt_uint32 dsp_tdm_rxclk_sel	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_tdmrx */
	stt_uint32 m_tdmrx          	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pre_m_tdmrx */
	stt_uint32 pre_m_tdmrx      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1               	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdmrx_pll_sel */
	stt_uint32 tdmrx_pll_sel    	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_TDMRX_DIVIDERS_DTE ;


/*****************************************************************************************/
/* tdmtx_dividers                                                                        */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R3_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R3_VAL_443_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_M_TDMTX_EN_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_M_TDMTX_EN_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_M_TDMTX_EN_VAL_441_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_M_TDMTX_EN_VAL_442_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R2_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R2_VAL_440_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_DSP_TDM_RXCLK_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_DSP_TDM_RXCLK_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_DSP_TDM_RXCLK_SEL_VAL_438_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_DSP_TDM_RXCLK_SEL_VAL_439_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_M_TDMTX_DEFAULT_VALUE                       ( 0x15 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_M_TDMTX_DEFAULT_VALUE_RESET_VALUE           ( 0x15 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_PRE_M_TDMTX_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_PRE_M_TDMTX_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R1_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_R1_VAL_435_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_TDMTX_PLL_SEL_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_TDMTX_PLL_SEL_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_TDMTX_PLL_SEL_VAL_432_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_TDMTX_PLL_SEL_VAL_433_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_TDMTX_PLL_SEL_VAL_434_VALUE                 ( 0x2 )


#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_OFFSET ( 0x00000068 )

#define CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_TDMTX_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_TDMTX_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_TDMTX_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3               	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_tdmtx_en */
	stt_uint32 m_tdmtx_en       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2               	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_tdm_rxclk_sel */
	stt_uint32 dsp_tdm_rxclk_sel	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_tdmtx */
	stt_uint32 m_tdmtx          	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pre_m_tdmtx */
	stt_uint32 pre_m_tdmtx      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1               	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdmtx_pll_sel */
	stt_uint32 tdmtx_pll_sel    	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_TDMTX_DIVIDERS_DTE ;


/*****************************************************************************************/
/* usb_core_dividers                                                                     */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R3_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CLK_12_EN_DEFAULT_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CLK_12_EN_DEFAULT_VALUE_RESET_VALUE  ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CLK_12_EN_VAL_453_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CLK_12_EN_VAL_454_VALUE              ( 0x1 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R2_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R2_VAL_452_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CORE_EN_DEFAULT_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CORE_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CORE_EN_VAL_450_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CORE_EN_VAL_451_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CORE_OSCILLATOR_CLOCK_VALUE          ( 0x5 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CORE_DEFAULT_VALUE                   ( 0x15 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_M_USB_CORE_DEFAULT_VALUE_RESET_VALUE       ( 0x15 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_PRE_M_USB_CORE_DEFAULT_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_PRE_M_USB_CORE_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R1_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_R1_VAL_447_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_USB_CORE_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_USB_CORE_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_USB_CORE_PLL_SEL_VAL_444_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_USB_CORE_PLL_SEL_VAL_445_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_USB_CORE_PLL_SEL_VAL_446_VALUE             ( 0x2 )


#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_OFFSET ( 0x0000006C )

#define CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_USB_CORE_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_USB_CORE_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_USB_CORE_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3              	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_usb_clk_12_en */
	stt_uint32 m_usb_clk_12_en 	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2              	: 3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_usb_core_en */
	stt_uint32 m_usb_core_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_usb_core */
	stt_uint32 m_usb_core      	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pre_m_usb_core */
	stt_uint32 pre_m_usb_core  	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1              	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_core_pll_sel */
	stt_uint32 usb_core_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_USB_CORE_DIVIDERS_DTE ;


/*****************************************************************************************/
/* usb_host_dividers                                                                     */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_R2_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_R2_VAL_463_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_EN_DEFAULT_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_EN_VAL_461_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_EN_VAL_462_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_VAL_460_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_DEFAULT_VALUE                   ( 0x5 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_DEFAULT_VALUE_RESET_VALUE       ( 0x5 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_M_USB_HOST_HOST_166MHZ_VALUE               ( 0x6 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_R1_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_R1_VAL_459_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_USB_HOST_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_USB_HOST_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_USB_HOST_PLL_SEL_VAL_456_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_USB_HOST_PLL_SEL_VAL_457_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_USB_HOST_PLL_SEL_VAL_458_VALUE             ( 0x2 )


#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_OFFSET ( 0x00000070 )

#define CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_USB_HOST_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_USB_HOST_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_USB_HOST_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r2              	: 19 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_usb_host_en */
	stt_uint32 m_usb_host_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_usb_host */
	stt_uint32 m_usb_host      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1              	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_host_pll_sel */
	stt_uint32 usb_host_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_USB_HOST_DIVIDERS_DTE ;


/*****************************************************************************************/
/* USB_Host_PLL_Bypass                                                                   */
/* USB_Host_PLL_Bypass                                                                   */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_RESERVED_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_RESERVED_VAL_466_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_USB_HOST_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_USB_HOST_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_USB_HOST_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_USB_HOST_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_OFFSET ( 0x00000074 )

#define CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved         	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_host_f_clk_en */
	stt_uint32 usb_host_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* rng_clk_ctrl                                                                          */
/* rng_clk_ctrl                                                                          */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R3_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R3_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R3_VAL_475_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_OSC_ENABLE_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_OSC_ENABLE_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_OSC_ENABLE_VAL_473_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_OSC_ENABLE_VAL_474_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R2_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R2_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R2_VAL_472_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_CLK_DLY_DEFAULT_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_CLK_DLY_DEFAULT_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R1_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R1_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_R1_VAL_470_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_CLK_SEL_VAL_467_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_CLK_SEL_VAL_468_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_CLK_SEL_DEFAULT_VALUE                ( 0x2 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_CLK_SEL_DEFAULT_VALUE_RESET_VALUE    ( 0x2 )
#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_RNG_CLK_SEL_VAL_469_VALUE                ( 0x2 )


#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_OFFSET ( 0x00000078 )

#define CE_CR_CONTROL_REGS_RNG_CLK_CTRL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_RNG_CLK_CTRL_OFFSET )
#define BL_CR_CONTROL_REGS_RNG_CLK_CTRL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_RNG_CLK_CTRL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_RNG_CLK_CTRL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_RNG_CLK_CTRL_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3            	: 15 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rng_osc_enable */
	stt_uint32 rng_osc_enable	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2            	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rng_clk_dly */
	stt_uint32 rng_clk_dly   	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1            	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rng_clk_sel */
	stt_uint32 rng_clk_sel   	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_RNG_CLK_CTRL_DTE ;


/*****************************************************************************************/
/* ipclock_dividers                                                                      */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_R2_DEFAULT_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_R2_VAL_483_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_M_IPCLOCK_EN_VAL_481_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_M_IPCLOCK_EN_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_M_IPCLOCK_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_M_IPCLOCK_EN_VAL_482_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_M_IPCLOCK_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_M_IPCLOCK_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_M_IPCLOCK_VAL_480_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_R1_DEFAULT_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE              ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_R1_VAL_479_VALUE                          ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_IPCLOCK_PLL_SEL_VAL_476_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_IPCLOCK_PLL_SEL_VAL_477_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_IPCLOCK_PLL_SEL_VAL_478_VALUE             ( 0x2 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_IPCLOCK_PLL_SEL_DEFAULT_VALUE             ( 0x3 )
#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_IPCLOCK_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x3 )


#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_OFFSET ( 0x0000007C )

#define CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_IPCLOCK_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r2             	: 19 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ipclock_en */
	stt_uint32 m_ipclock_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_ipclock */
	stt_uint32 m_ipclock      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1             	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipclock_pll_sel */
	stt_uint32 ipclock_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_IPCLOCK_DIVIDERS_DTE ;


/*****************************************************************************************/
/* ipclock_PLL_Bypass                                                                    */
/* ipclock_PLL_Bypass                                                                    */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_RESERVED_DEFAULT_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_RESERVED_VAL_486_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_IPCLOCK_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_IPCLOCK_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_IPCLOCK_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_IPCLOCK_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_OFFSET ( 0x00000080 )

#define CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved        	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipclock_f_clk_en */
	stt_uint32 ipclock_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* synce_tdm_dividers                                                                    */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_R2_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_R2_VAL_501_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_GEN_25_REF_VAL_499_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_GEN_25_REF_DEFAULT_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_GEN_25_REF_DEFAULT_VALUE_RESET_VALUE        ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_GEN_25_REF_VAL_500_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_25_EN_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_25_EN_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_25_EN_VAL_497_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_25_EN_VAL_498_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_10_EN_VAL_495_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_10_EN_DEFAULT_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_10_EN_DEFAULT_VALUE_RESET_VALUE     ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_10_EN_VAL_496_VALUE                 ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_TDM_EN_VAL_493_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_TDM_EN_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_TDM_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_TDM_EN_VAL_494_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_TDM_DEFAULT_VALUE                   ( 0xC8 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_M_SYNCE_TDM_DEFAULT_VALUE_RESET_VALUE       ( 0xC8 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_PRE_M_SYNCE_TDM_DEFAULT_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_PRE_M_SYNCE_TDM_DEFAULT_VALUE_RESET_VALUE   ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_R1_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_R1_VAL_490_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_SYNCE_TDM_PLL_SEL_VAL_487_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_SYNCE_TDM_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_SYNCE_TDM_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_SYNCE_TDM_PLL_SEL_VAL_488_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_SYNCE_TDM_PLL_SEL_VAL_489_VALUE             ( 0x2 )


#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_OFFSET ( 0x00000084 )

#define CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r2               	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* gen_25_ref */
	stt_uint32 gen_25_ref       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_synce_25_en */
	stt_uint32 m_synce_25_en    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_synce_10_en */
	stt_uint32 m_synce_10_en    	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_synce_tdm_en */
	stt_uint32 m_synce_tdm_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_synce_tdm */
	stt_uint32 m_synce_tdm      	: 16 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pre_m_synce_tdm */
	stt_uint32 pre_m_synce_tdm  	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1               	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* synce_tdm_pll_sel */
	stt_uint32 synce_tdm_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_DTE ;


/*****************************************************************************************/
/* otp_dividers                                                                          */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R3_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R3_VAL_510_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_M_OTP_EN_VAL_508_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_M_OTP_EN_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_M_OTP_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_M_OTP_EN_VAL_509_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R2_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R2_VAL_507_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_M_OTP_DEFAULT_VALUE                   ( 0x32 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_M_OTP_DEFAULT_VALUE_RESET_VALUE       ( 0x32 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R1_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_R1_VAL_505_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_OTP_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_OTP_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_OTP_PLL_SEL_VAL_502_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_OTP_PLL_SEL_VAL_503_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_OTP_PLL_SEL_VAL_504_VALUE             ( 0x2 )


#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_OFFSET ( 0x00000088 )

#define CE_CR_CONTROL_REGS_OTP_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_OTP_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_OTP_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_OTP_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_OTP_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_OTP_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3         	: 15 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_otp_en */
	stt_uint32 m_otp_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2         	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_otp */
	stt_uint32 m_otp      	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1         	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* otp_pll_sel */
	stt_uint32 otp_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_OTP_DIVIDERS_DTE ;


/*****************************************************************************************/
/* OTP_PLL_Bypass                                                                        */
/* OTP_PLL_Bypass                                                                        */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_RESERVED_DEFAULT_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE     ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_RESERVED_VAL_513_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_OTP_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_OTP_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_OTP_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )
#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_OTP_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )


#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_OFFSET ( 0x0000008C )

#define CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_OTP_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_OTP_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_OTP_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved    	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* otp_f_clk_en */
	stt_uint32 otp_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_OTP_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* pci_host_dividers                                                                     */
/* pci_host_dividers  Both for pci0 and pci1                                             */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R3_VAL_522_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R3_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_M_PCI_HOST_EN_VAL_520_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_M_PCI_HOST_EN_VAL_521_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_M_PCI_HOST_EN_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_M_PCI_HOST_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R2_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R2_VAL_519_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_M_PCI_HOST_DEFAULT_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_M_PCI_HOST_DEFAULT_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R1_VAL_517_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R1_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_PCI_HOST_PLL_SEL_VAL_514_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_PCI_HOST_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_PCI_HOST_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_PCI_HOST_PLL_SEL_VAL_515_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_PCI_HOST_PLL_SEL_VAL_516_VALUE             ( 0x2 )


#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_OFFSET ( 0x00000090 )

#define CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_PCI_HOST_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3              	: 15 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_pci_host_en */
	stt_uint32 m_pci_host_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2              	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_pci_host */
	stt_uint32 m_pci_host      	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1              	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_host_pll_sel */
	stt_uint32 pci_host_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_PCI_HOST_DIVIDERS_DTE ;


/*****************************************************************************************/
/* PCI_Host_PLL_Bypass                                                                   */
/* PCI_Host_PLL_Bypass                                                                   */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_RESERVED_DEFAULT_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE          ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_RESERVED_VAL_525_VALUE                      ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_PCI_HOST_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_PCI_HOST_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_PCI_HOST_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_PCI_HOST_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_OFFSET ( 0x00000094 )

#define CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved         	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_host_f_clk_en */
	stt_uint32 pci_host_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* cdr_diag_fast_dividers                                                                */
/* pll selection, divide factor(m), divider enable parameters                            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R3_VAL_522_VALUE                                ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R3_DEFAULT_VALUE                                ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R3_DEFAULT_VALUE_RESET_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_M_CDR_DIAG_FAST_EN_VAL_520_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_M_CDR_DIAG_FAST_EN_VAL_521_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_M_CDR_DIAG_FAST_EN_DEFAULT_VALUE                ( 0x1 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_M_CDR_DIAG_FAST_EN_DEFAULT_VALUE_RESET_VALUE    ( 0x1 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R2_DEFAULT_VALUE                                ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R2_DEFAULT_VALUE_RESET_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R2_VAL_519_VALUE                                ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_M_CDR_DIAG_FAST_DEFAULT_VALUE                   ( 0x1 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_M_CDR_DIAG_FAST_DEFAULT_VALUE_RESET_VALUE       ( 0x1 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R1_VAL_517_VALUE                                ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R1_DEFAULT_VALUE                                ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_R1_DEFAULT_VALUE_RESET_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_CDR_DIAG_FAST_PLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_CDR_DIAG_FAST_PLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_OFFSET ( 0x00000098 )

#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_OFFSET )
#define BL_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r3                   	: 15 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_cdr_diag_fast_en */
	stt_uint32 m_cdr_diag_fast_en   	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r2                   	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* m_cdr_diag_fast */
	stt_uint32 m_cdr_diag_fast      	: 4 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1                   	: 6 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cdr_diag_fast_pll_sel */
	stt_uint32 cdr_diag_fast_pll_sel	: 2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_DTE ;


/*****************************************************************************************/
/* cdr_diag_fast_PLL_Bypass                                                              */
/* cdr_diag_fast_PLL_Bypass                                                              */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_RESERVED_VAL_525_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_RESERVED_DEFAULT_VALUE                           ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_RESERVED_DEFAULT_VALUE_RESET_VALUE               ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_CDR_DIAG_FAST_F_CLK_EN_BYPASS_ON_VALUE           ( 0x0 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_CDR_DIAG_FAST_F_CLK_EN_FAST_CLK_ON_VALUE         ( 0x1 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_CDR_DIAG_FAST_F_CLK_EN_DEFAULT_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_CDR_DIAG_FAST_F_CLK_EN_DEFAULT_VALUE_RESET_VALUE ( 0x1 )


#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_OFFSET ( 0x0000009C )

#define CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_OFFSET )
#define BL_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved              	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cdr_diag_fast_f_clk_en */
	stt_uint32 cdr_diag_fast_f_clk_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_DTE ;


/*****************************************************************************************/
/* cr_strap_override_ls                                                                  */
/* strap override value for 32 LS bits                                                   */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_CR_STRAP_OVERRIDE_LS_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_CR_STRAP_OVERRIDE_LS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_OFFSET ( 0x000000A0 )

#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_OFFSET )
#define BL_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_ADDRESS ), (v) )

typedef struct
{
	/* cr_strap_override_ls */
	stt_uint32 cr_strap_override_ls	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_DTE ;


/*****************************************************************************************/
/* cr_strap_override_ms                                                                  */
/* strap override value for 32 MS bits                                                   */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_CR_STRAP_OVERRIDE_MS_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_CR_STRAP_OVERRIDE_MS_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_OFFSET ( 0x000000A4 )

#define CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_OFFSET )
#define BL_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_ADDRESS ), (v) )

typedef struct
{
	/* cr_strap_override_ms */
	stt_uint32 cr_strap_override_ms	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_DTE ;


/*****************************************************************************************/
/* cr_strap_ctrl                                                                         */
/* enables override of strap by sw                                                       */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_RESERVED_DEFAULT_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_RESERVED_DEFAULT_VALUE_RESET_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_RESERVED_VAL_530_VALUE                         ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_CR_STRAP_OVERRIDE_EN_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_CR_STRAP_OVERRIDE_EN_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_CR_STRAP_OVERRIDE_EN_VAL_528_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_CR_STRAP_OVERRIDE_EN_VAL_529_VALUE             ( 0x1 )


#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_OFFSET ( 0x000000A8 )

#define CE_CR_CONTROL_REGS_CR_STRAP_CTRL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_STRAP_CTRL_OFFSET )
#define BL_CR_CONTROL_REGS_CR_STRAP_CTRL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_STRAP_CTRL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_STRAP_CTRL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_STRAP_CTRL_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved            	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_strap_override_en */
	stt_uint32 cr_strap_override_en	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_STRAP_CTRL_DTE ;


/*****************************************************************************************/
/* cr_rgmii_master_dll                                                                   */
/* rgmii master dll: number of TAPS selection  max value is 114                          */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_RESERVED_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_RESERVED_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_RESERVED_VAL_532_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_CR_RGMII_MASTER_DLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_CR_RGMII_MASTER_DLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OFFSET ( 0x000000C8 )

#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OFFSET )
#define BL_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved               	: 25 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_master_dll_sel */
	stt_uint32 cr_rgmii_master_dll_sel	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_DTE ;


/*****************************************************************************************/
/* cr_rgmii_master_dll_out                                                               */
/* rgmii master dll output. value of phased clock, sampled with intial clock.            */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_RESERVED_DEFAULT_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_RESERVED_DEFAULT_VALUE_RESET_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_RESERVED_VAL_535_VALUE                            ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_CR_RGMII_MASTER_DLL_OUT_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_CR_RGMII_MASTER_DLL_OUT_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_OFFSET ( 0x000000CC )

#define CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_OFFSET )
#define BL_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved               	: 31 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_master_dll_out */
	stt_uint32 cr_rgmii_master_dll_out	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_DTE ;


/*****************************************************************************************/
/* cr_rgmii_rx_dll                                                                       */
/* rgmii slave rx dll: number of TAPS selection.  max value is 114                       */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_RESERVED_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_RESERVED_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_RESERVED_VAL_537_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_CR_RGMII_RX_DLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_CR_RGMII_RX_DLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_CR_RGMII_RX_DLL_SEL_VAL_536_VALUE             ( 0x0 )


#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_OFFSET ( 0x000000D0 )

#define CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_OFFSET )
#define BL_CR_CONTROL_REGS_CR_RGMII_RX_DLL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_RGMII_RX_DLL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_RGMII_RX_DLL_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved           	: 25 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_rx_dll_sel */
	stt_uint32 cr_rgmii_rx_dll_sel	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_RGMII_RX_DLL_DTE ;


/*****************************************************************************************/
/* cr_rgmii_tx_dll                                                                       */
/* rgmii slave rx dll: number of TAPS selection.  max value is 114                       */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_RESERVED_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_RESERVED_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_RESERVED_VAL_539_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_CR_RGMII_TX_DLL_SEL_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_CR_RGMII_TX_DLL_SEL_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_CR_RGMII_TX_DLL_SEL_VAL_538_VALUE             ( 0x0 )


#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_OFFSET ( 0x000000D4 )

#define CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_OFFSET )
#define BL_CR_CONTROL_REGS_CR_RGMII_TX_DLL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_RGMII_TX_DLL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_RGMII_TX_DLL_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved           	: 25 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_tx_dll_sel */
	stt_uint32 cr_rgmii_tx_dll_sel	: 7 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_RGMII_TX_DLL_DTE ;


/*****************************************************************************************/
/* rgmii_dll_ctrl                                                                        */
/* Choose whether to invert the DLL sel rx,tx clk. These clock latch only the number of  */
/* taps selection configuration                                                          */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RESERVED_VAL_550_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RESERVED_DEFAULT_VALUE                             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RESERVED_DEFAULT_VALUE_RESET_VALUE                 ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RX_DLL_ENABLE_VAL_548_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RX_DLL_ENABLE_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RX_DLL_ENABLE_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RX_DLL_ENABLE_VAL_549_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_TX_DLL_ENABLE_VAL_546_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_TX_DLL_ENABLE_DEFAULT_VALUE                        ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_TX_DLL_ENABLE_DEFAULT_VALUE_RESET_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_TX_DLL_ENABLE_VAL_547_VALUE                        ( 0x1 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_MASTER_DLL_ENABLE_DEFAULT_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_MASTER_DLL_ENABLE_DEFAULT_VALUE_RESET_VALUE        ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_MASTER_DLL_ENABLE_VAL_544_VALUE                    ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_MASTER_DLL_ENABLE_VAL_545_VALUE                    ( 0x1 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_TX_INV_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_TX_INV_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_TX_INV_VAL_542_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_TX_INV_VAL_543_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_RX_INV_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_RX_INV_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_RX_INV_VAL_540_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_RGMII_DLL_USE_SEL_RX_INV_VAL_541_VALUE             ( 0x1 )


#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_OFFSET ( 0x000000D8 )

#define CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_OFFSET )
#define BL_CR_CONTROL_REGS_RGMII_DLL_CTRL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_RGMII_DLL_CTRL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_RGMII_DLL_CTRL_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved                	: 27 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rx_dll_enable */
	stt_uint32 rx_dll_enable           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tx_dll_enable */
	stt_uint32 tx_dll_enable           	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* master_dll_enable */
	stt_uint32 master_dll_enable       	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rgmii_dll_use_sel_tx_inv */
	stt_uint32 rgmii_dll_use_sel_tx_inv	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rgmii_dll_use_sel_rx_inv */
	stt_uint32 rgmii_dll_use_sel_rx_inv	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_RGMII_DLL_CTRL_DTE ;


/*****************************************************************************************/
/* rgmii_ctrl                                                                            */
/* choose whether to invert input of rx,tx slaves                                        */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_RGMII_CTRL_RESERVED_DEFAULT_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RESERVED_DEFAULT_VALUE_RESET_VALUE         ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RESERVED_VAL_555_VALUE                     ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RGMII_TX_CLK_INV_VAL_553_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RGMII_TX_CLK_INV_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RGMII_TX_CLK_INV_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RGMII_TX_CLK_INV_VAL_554_VALUE             ( 0x1 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RGMII_RX_CLK_INV_VAL0_VALUE                ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RGMII_RX_CLK_INV_VAL0_VALUE_RESET_VALUE    ( 0x0 )
#define CE_CR_CONTROL_REGS_RGMII_CTRL_RGMII_RX_CLK_INV_VAL1_VALUE                ( 0x1 )


#define CE_CR_CONTROL_REGS_RGMII_CTRL_OFFSET ( 0x000000DC )

#define CE_CR_CONTROL_REGS_RGMII_CTRL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_RGMII_CTRL_OFFSET )
#define BL_CR_CONTROL_REGS_RGMII_CTRL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_RGMII_CTRL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_RGMII_CTRL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_RGMII_CTRL_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 reserved        	: 30 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rgmii_tx_clk_inv */
	stt_uint32 rgmii_tx_clk_inv	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rgmii_rx_clk_inv */
	stt_uint32 rgmii_rx_clk_inv	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_RGMII_CTRL_DTE ;


/*****************************************************************************************/
/* pll_power_down                                                                        */
/* power down reg. bit for each pll                                                      */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_PLL_PD_R2_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_R2_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_R2_VAL_281_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_LK_POWER_UP_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_LK_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_LK_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_LK_POWER_DOWN_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_LK_POWER_UP_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_LK_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_LK_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_LK_POWER_DOWN_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_LK_POWER_UP_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_LK_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_LK_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_LK_POWER_DOWN_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_PLL_PD_R1_DEFAULT_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_R1_DEFAULT_VALUE_RESET_VALUE       ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_R1_VAL_281_VALUE                   ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_PD_POWER_UP_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_PD_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_PD_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_2_PD_POWER_DOWN_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_PD_POWER_UP_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_PD_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_PD_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_1_PD_POWER_DOWN_VALUE          ( 0x1 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_PD_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_PD_DEFAULT_VALUE_RESET_VALUE ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_PD_POWER_UP_VALUE            ( 0x0 )
#define CE_CR_CONTROL_REGS_PLL_PD_PLL_0_PD_POWER_DOWN_VALUE          ( 0x1 )


#define CE_CR_CONTROL_REGS_PLL_PD_OFFSET ( 0x000000E0 )

#define CE_CR_CONTROL_REGS_PLL_PD_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_PLL_PD_OFFSET )
#define BL_CR_CONTROL_REGS_PLL_PD_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_PLL_PD_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_PLL_PD_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_PLL_PD_ADDRESS ), (v) )

typedef struct
{
	/* Reserved */
	stt_uint32 r2      	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_2_locked */
	stt_uint32 pll_2_lk	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_1_locked */
	stt_uint32 pll_1_lk	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_0_locked */
	stt_uint32 pll_0_lk	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint32 r1      	: 25 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_2_pd */
	stt_uint32 pll_2_pd	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_1_pd */
	stt_uint32 pll_1_pd	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_0_pd */
	stt_uint32 pll_0_pd	: 1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_PLL_PD_DTE ;


/*****************************************************************************************/
/* cr_vpb_spare                                                                          */
/* cr_vpb_spare                                                                          */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_CR_VPB_SPARE_CR_VPB_SPARE_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_CR_VPB_SPARE_CR_VPB_SPARE_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_CR_VPB_SPARE_OFFSET ( 0x000000F0 )

#define CE_CR_CONTROL_REGS_CR_VPB_SPARE_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_CR_VPB_SPARE_OFFSET )
#define BL_CR_CONTROL_REGS_CR_VPB_SPARE_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_CR_VPB_SPARE_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_CR_VPB_SPARE_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_CR_VPB_SPARE_ADDRESS ), (v) )

typedef struct
{
	/* cr_vpb_spare */
	stt_uint32 cr_vpb_spare	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_CR_VPB_SPARE_DTE ;


/*****************************************************************************************/
/* starps_low                                                                            */
/* latched straps low(32) bits  straps_low is for GPIO00-GPIO31.                         */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_STRPL_ST_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_STRPL_ST_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_STRPL_OFFSET ( 0x000000F8 )

#define CE_CR_CONTROL_REGS_STRPL_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_STRPL_OFFSET )
#define BL_CR_CONTROL_REGS_STRPL_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_STRPL_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_STRPL_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_STRPL_ADDRESS ), (v) )

typedef struct
{
	/* straps */
	stt_uint32 st	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_STRPL_DTE ;


/*****************************************************************************************/
/* starps_high                                                                           */
/* latched straps high(32) bits  straps_high is for GPIO32-GPIO63                        */
/*****************************************************************************************/

#define CE_CR_CONTROL_REGS_STRPH_ST_DEFAULT_VALUE             ( 0x0 )
#define CE_CR_CONTROL_REGS_STRPH_ST_DEFAULT_VALUE_RESET_VALUE ( 0x0 )


#define CE_CR_CONTROL_REGS_STRPH_OFFSET ( 0x000000FC )

#define CE_CR_CONTROL_REGS_STRPH_ADDRESS   	( CE_CR_CONTROL_REGS_ADDRESS + CE_CR_CONTROL_REGS_STRPH_OFFSET )
#define BL_CR_CONTROL_REGS_STRPH_READ( r ) 	BL_READ_32( ( CE_CR_CONTROL_REGS_STRPH_ADDRESS ), (r) )
#define BL_CR_CONTROL_REGS_STRPH_WRITE( v )	BL_WRITE_32( ( CE_CR_CONTROL_REGS_STRPH_ADDRESS ), (v) )

typedef struct
{
	/* straps */
	stt_uint32 st	: 32 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_STRPH_DTE ;


#endif /* __MIPS */

#ifdef __MIPS_C  /* only MIPS_C */

typedef struct
{
	/* sw_rst_l_0 */
	CR_CONTROL_REGS_SW_RST_L_0_DTE sw_rst_l_0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sw_rst_l_1 */
	CR_CONTROL_REGS_SW_RST_L_1_DTE sw_rst_l_1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sw_rst_h_0 */
	CR_CONTROL_REGS_SW_RST_H_0_DTE sw_rst_h_0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sw_rst_h_1 */
	CR_CONTROL_REGS_SW_RST_H_1_DTE sw_rst_h_1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sw_rst_h_2 */
	CR_CONTROL_REGS_SW_RST_H_2_DTE sw_rst_h_2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* sw_rst_h_3 */
	CR_CONTROL_REGS_SW_RST_H_3_DTE sw_rst_h_3 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* enable_l */
	CR_CONTROL_REGS_ENABLE_L_DTE enable_l __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* enable_h */
	CR_CONTROL_REGS_ENABLE_H_DTE enable_h __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_0 */
	CR_CONTROL_REGS_PLL_0_DTE pll_0 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_1 */
	CR_CONTROL_REGS_PLL_1_DTE pll_1 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_2 */
	CR_CONTROL_REGS_PLL_2_DTE pll_2 __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_c_dividers */
	CR_CONTROL_REGS_MIPS_C_DIVIDERS_DTE mips_c_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* MIPS_C_PLL_Bypass */
	CR_CONTROL_REGS_MIPS_C_PLL_BYPASS_DTE mips_c_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* nand_flash_dividers */
	CR_CONTROL_REGS_NAND_FLASH_DIVIDERS_DTE nand_flash_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* NAND_Flash_PLL_Bypass */
	CR_CONTROL_REGS_NAND_FLASH_PLL_BYPASS_DTE nand_flash_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* spi_flash_dividers */
	CR_CONTROL_REGS_SPI_FLASH_DIVIDERS_DTE spi_flash_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* SPI_Flash_PLL_Bypass */
	CR_CONTROL_REGS_SPI_FLASH_PLL_BYPASS_DTE spi_flash_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* mips_d_dividers */
	CR_CONTROL_REGS_MIPS_D_DIVIDERS_DTE mips_d_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* MIPS_D_PLL_Bypass */
	CR_CONTROL_REGS_MIPS_D_PLL_BYPASS_DTE mips_d_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tm_dividers */
	CR_CONTROL_REGS_TM_DIVIDERS_DTE tm_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* RNR_PLL_Bypass */
	CR_CONTROL_REGS_RNR_PLL_BYPASS_DTE rnr_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ddr_dividers */
	CR_CONTROL_REGS_DDR_DIVIDERS_DTE ddr_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DDR_PLL_Bypass */
	CR_CONTROL_REGS_DDR_PLL_BYPASS_DTE ddr_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* dsp_dividers */
	CR_CONTROL_REGS_DSP_DIVIDERS_DTE dsp_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* DSP_PLL_Bypass */
	CR_CONTROL_REGS_DSP_PLL_BYPASS_DTE dsp_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdmrx_dividers */
	CR_CONTROL_REGS_TDMRX_DIVIDERS_DTE tdmrx_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* tdmtx_dividers */
	CR_CONTROL_REGS_TDMTX_DIVIDERS_DTE tdmtx_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_core_dividers */
	CR_CONTROL_REGS_USB_CORE_DIVIDERS_DTE usb_core_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* usb_host_dividers */
	CR_CONTROL_REGS_USB_HOST_DIVIDERS_DTE usb_host_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* USB_Host_PLL_Bypass */
	CR_CONTROL_REGS_USB_HOST_PLL_BYPASS_DTE usb_host_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rng_clk_ctrl */
	CR_CONTROL_REGS_RNG_CLK_CTRL_DTE rng_clk_ctrl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipclock_dividers */
	CR_CONTROL_REGS_IPCLOCK_DIVIDERS_DTE ipclock_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* ipclock_PLL_Bypass */
	CR_CONTROL_REGS_IPCLOCK_PLL_BYPASS_DTE ipclock_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* synce_tdm_dividers */
	CR_CONTROL_REGS_SYNCE_TDM_DIVIDERS_DTE synce_tdm_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* otp_dividers */
	CR_CONTROL_REGS_OTP_DIVIDERS_DTE otp_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* OTP_PLL_Bypass */
	CR_CONTROL_REGS_OTP_PLL_BYPASS_DTE otp_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pci_host_dividers */
	CR_CONTROL_REGS_PCI_HOST_DIVIDERS_DTE pci_host_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* PCI_Host_PLL_Bypass */
	CR_CONTROL_REGS_PCI_HOST_PLL_BYPASS_DTE pci_host_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cdr_diag_fast_dividers */
	CR_CONTROL_REGS_CDR_DIAG_FAST_DIVIDERS_DTE cdr_diag_fast_dividers __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cdr_diag_fast_PLL_Bypass */
	CR_CONTROL_REGS_CDR_DIAG_FAST_PLL_BYPASS_DTE cdr_diag_fast_pll_bypass __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_strap_override_ls */
	CR_CONTROL_REGS_CR_STRAP_OVERRIDE_LS_DTE cr_strap_override_ls __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_strap_override_ms */
	CR_CONTROL_REGS_CR_STRAP_OVERRIDE_MS_DTE cr_strap_override_ms __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_strap_ctrl */
	CR_CONTROL_REGS_CR_STRAP_CTRL_DTE cr_strap_ctrl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved1 [ 28 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_master_dll */
	CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_DTE cr_rgmii_master_dll __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_master_dll_out */
	CR_CONTROL_REGS_CR_RGMII_MASTER_DLL_OUT_DTE cr_rgmii_master_dll_out __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_rx_dll */
	CR_CONTROL_REGS_CR_RGMII_RX_DLL_DTE cr_rgmii_rx_dll __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_rgmii_tx_dll */
	CR_CONTROL_REGS_CR_RGMII_TX_DLL_DTE cr_rgmii_tx_dll __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rgmii_dll_ctrl */
	CR_CONTROL_REGS_RGMII_DLL_CTRL_DTE rgmii_dll_ctrl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* rgmii_ctrl */
	CR_CONTROL_REGS_RGMII_CTRL_DTE rgmii_ctrl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* pll_power_down */
	CR_CONTROL_REGS_PLL_PD_DTE pll_pd __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved2 [ 12 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* cr_vpb_spare */
	CR_CONTROL_REGS_CR_VPB_SPARE_DTE cr_vpb_spare __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* Reserved */
	stt_uint8 reserved3 [ 4 ] __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* starps_low */
	CR_CONTROL_REGS_STRPL_DTE strpl __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

	/* starps_high */
	CR_CONTROL_REGS_STRPH_DTE strph __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
 __PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_REGS_DTE ;

#endif  /* __MIPS */

typedef struct
{
#ifdef __MIPS_C  /* only MIPS_C */

	/* regs function */
	CR_CONTROL_REGS_DTE regs __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;

#endif  /* __MIPS */
}
 __PACKING_ATTRIBUTE_STRUCT_END__
CR_CONTROL_DTE ;

typedef struct
{
	/* CONTROL */
	CR_CONTROL_DTE control __PACKING_ATTRIBUTE_FIELD_LEVEL__ ;
}
__PACKING_ATTRIBUTE_STRUCT_END__ 
CR_DTE ;
#endif /* CR_H_INCLUDED */

