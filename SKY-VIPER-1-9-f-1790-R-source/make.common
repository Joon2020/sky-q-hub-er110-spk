#***********************************************************************
#
#  Copyright (c) 2006  Broadcom Corporation
#  All Rights Reserved
#
#***********************************************************************/

#
# This makefile is included by most of the lower level makefiles
# to suck in the common defines.
#

#
# version.make has the 4.0.0 version number,
# each directory must set depth appropriately
#
include $(BUILD_DIR)/version.make

BRCM_RELEASETAG=$(BRCM_VERSION).$(BRCM_RELEASE)L.$(BRCM_EXTRAVERSION)

###########################################
# Define build environment (profile and
# toolchain)
#
###########################################

TARGETS_DIR := $(BUILD_DIR)/targets
INC_KERNEL_BASE := $(BUILD_DIR)/kernel

#
# If we don't define a PROFILE, try to figure out what the last profile
# was and use that.
#
ifneq ($(MAKECMDGOALS), menuconfig)

ifneq ($(MAKECMDGOALS), distclean)
ifneq ($(MAKECMDGOALS), cleanall)
ifneq ($(MAKECMDGOALS), binaryonly_dist_clean)

LAST_PROFILE_COOKIE := $(BUILD_DIR)/.last_profile
LAST_PROFILE        := $(strip $(shell cat $(LAST_PROFILE_COOKIE) 2>/dev/null))
ifeq ($(strip $(PROFILE)),)
PROFILE=$(LAST_PROFILE)
export PROFILE
endif #PROFILE

endif #binaryonly_dist_clean
endif #cleanall
endif #distclean


ifneq ($(strip $(PROFILE)),)

PROFILE_DIR   := $(TARGETS_DIR)/$(PROFILE)
PROFILE_FILE  := $(PROFILE_DIR)/$(PROFILE)

#
# Get Kernel and Toolchain versions based
# on profile
#

# --- KERNEL VERSION SPECIFIC INFORMATION:

DEFAULT_TOOLCHAIN_LINUX_3_4_0_RT      := /opt/toolchains/crosstools-mips-gcc-4.6-linux-3.4-uclibc-0.9.32-binutils-2.21
DEFAULT_TOOLCHAIN_VER_LINUX_3_4_0_RT  := 4.6.2
TOOLCHAIN_PREFIX_LINUX_3_4_0_RT       := mips-unknown-linux-uclibc
TOOLCHAIN_LIBDIR_LINUX_3_4_0_RT       := usr/$(TOOLCHAIN_PREFIX_LINUX_3_4_0_RT)/sysroot/lib
TOOLCHAIN_INCDIR_LINUX_3_4_0_RT       := usr/$(TOOLCHAIN_PREFIX_LINUX_3_4_0_RT)/sysroot/usr/include
LINUX_ZIP_FILE_LINUX_3_4_0_RT         := src-linux-3.4.11-rt19.tar.bz2
LINUX_SUB_DIR_LINUX_3_4_0_RT          := linux-3.4rt
KERNEL_CHECK_FILE_LINUX_3_4_0_RT      := MAINTAINERS
LINUX_VER_STR_LINUX_3_4_0_RT          := 3.4.11-rt19

# ---
PROFILE_ARCH:=$(shell sed -n "s|^PROFILE_ARCH=\(.*\)$$|\1|p" $(PROFILE_FILE))
ifneq ("$(ARCH)",$(PROFILE_ARCH))
ARCH := $(PROFILE_ARCH)
SRCARCH := $(ARCH)
endif


PROFILE_KERNEL_VER:=$(shell sed -n "s|^PROFILE_KERNEL_VER=\(.*\)$$|\1|p" $(PROFILE_FILE))
ifeq ($(PROFILE_KERNEL_VER),)
$(error KERNEL VERSION not specified in profile $(PROFILE_FILE))
endif

ifndef TOOLCHAIN_TOP
TOOLCHAIN_TOP := ${DEFAULT_TOOLCHAIN_${PROFILE_KERNEL_VER}}
endif

TOOLCHAIN_VER := ${DEFAULT_TOOLCHAIN_VER_${PROFILE_KERNEL_VER}}
TOOLCHAIN_LIBDIR := ${TOOLCHAIN_LIBDIR_${PROFILE_KERNEL_VER}}
TOOLCHAIN_PREFIX := ${TOOLCHAIN_PREFIX_${PROFILE_KERNEL_VER}}
TOOLCHAIN_INCLUDE_DIR := $(TOOLCHAIN_TOP)/${TOOLCHAIN_INCDIR_${PROFILE_KERNEL_VER}}
KERNEL_CHECK_FILE := ${KERNEL_CHECK_FILE_${PROFILE_KERNEL_VER}}
LINUX_VER_STR := ${LINUX_VER_STR_${PROFILE_KERNEL_VER}}

CONFIG_BCM_KERNEL_CUSTOM:=y
BCM_KF:=y

LINUX_ZIP_FILE := ${LINUX_ZIP_FILE_${PROFILE_KERNEL_VER}}
LINUX_SUB_DIR := ${LINUX_SUB_DIR_${PROFILE_KERNEL_VER}}

KERNEL_DIR := $(BUILD_DIR)/kernel/$(LINUX_SUB_DIR)
KERNEL_LINKS_DIR := $(INC_KERNEL_BASE)
KERNEL_INCLUDE_LINK_NAME := bcm_local_kernel_include
KERNEL_MIPS_INCLUDE_LINK_NAME := bcm_local_kernel_mips_include
#KERNEL_GEN_INCLUDE_LINK_NAME := bcm_local_kernel_gen_include
KERNEL_INCLUDE_LINK := $(KERNEL_LINKS_DIR)/$(KERNEL_INCLUDE_LINK_NAME)
KERNEL_MIPS_INCLUDE_LINK := $(KERNEL_LINKS_DIR)/$(KERNEL_MIPS_INCLUDE_LINK_NAME)
#KERNEL_GEN_INCLUDE_LINK_NAME := bcm_local_kernel_gen_include

endif # PROFILE
endif #menuconfig

#SKY specific changes here

ifneq ($(strip $(PROFILE)),)
include $(TARGETS_DIR)/$(PROFILE)/buildconfig.cfg
include $(TARGETS_DIR)/$(PROFILE)/skyversion.make
endif #PROFILE


###########################################
# Define Basic Variables
#
###########################################
export SKY_IPV6_SUPPORT:=0
export BUSY_BOX_TELNET=0
export BUSY_BOX_NFS_SUPPORT=0
export BUSY_BOX_VI_SUPPORT=0
export SKY_FLASH_API_SUPPORT:=0
export SKY_TR69_SUPPORT=0
export BUSY_BOX_TFTP_CLIENT=0
export SKY_SSL_CERTIFICATE_NAME=$(SSL_CERTIFICATE_NAME)
export SKY_FLAGS := -DSKY -DSKY_IHR

ifeq ($(strip $(ENBL_BCM_PAGES)),1)
export BCM_PAGE_SUPPORT:=1
endif

ifeq ($(strip $(SYSLOG_DIAGNOSTIC)),1)
SKY_CFLAGS += -DSYSLOG_WLLDIAG
endif

ifeq ($(strip $(ENBL_SKY_FLASH_API)),1)
export SKY_FLASH_API_SUPPORT:=1
SKY_CFLAGS += -DSKY_FLASH_API
endif

ifneq ($(strip ${SKY_UNREVOKE_IN_REPAIR}),)
SKY_CFLAGS +=  -DSKY_UNREVOKE_IN_REPAIR
endif

ifneq ($(strip ${ENABLE_REPAIR_SW}),)
SKY_CFLAGS +=  -DENABLE_REPAIR_SW
endif
SKY_CFLAGS += -DCONFIG_FLASH_CHIP_SIZE=$(BRCM_FLASH_CHIP_SIZE)
SKY_CFLAGS += -DSKY -DSKY_IHR
CONFIG_FLASH_CHIP_SIZE=$(BRCM_FLASH_CHIP_SIZE)
export CONFIG_FLASH_CHIP_SIZE=$(BRCM_FLASH_CHIP_SIZE)

ifneq (,$(findstring ROI,$(strip $(PROFILE))))
SKY_CFLAGS += -DROI
export SKY_DSL_DIAGD_CONFIG=0
endif

ifneq (,$(findstring VIPER,$(strip $(PROFILE))))
export SKY_DSL_DIAGD_CONFIG=0
endif

ifeq ($(strip $(SKY_DUAL_IMAGE_SUPPORT)),1)
# definition for hostTools
SKY_CFLAGS += -DSKY_DUAL_IMAGE_SUPPORT
endif

ifeq ($(strip $(FOURTY_MHZ_SUPPORT)),1)
SKY_CFLAGS += -DFOURTY_MHZ_SUPPORTED
endif

ifeq ($(strip $(EIGHTY_MHZ_SUPPORT)),1)
SKY_CFLAGS += -DEIGHTY_MHZ_SUPPORTED
endif

ifeq ($(strip $(ONE_HUNDRED_AND_SIXTY_MHZ_SUPPORT)),1)
SKY_CFLAGS += -DONE_HUNDRED_AND_SIXTY_MHZ_SUPPORTED
endif

ifeq ($(strip $(ENBL_SKY_WEB_IMG_UPLOAD_CTL_SUPPORT)),1)
SKY_CFLAGS += -DENBL_SKY_WEB_IMG_UPLOAD_CTL_SUPPORTED
endif

ifeq ($(strip $(NFS_SUPPORT)),1)
export BUSY_BOX_NFS_SUPPORT=1
endif

ifeq ($(strip $(VI_SUPPORT)),1)
export BUSY_BOX_VI_SUPPORT=1
endif

ifeq ($(strip $(TR69_SUPPORT)),1)
export SKY_TR69_SUPPORT=1
else ifeq ($(strip $(TR69_SUPPORT)),2)
export SKY_TR69_SUPPORT=2
endif

ifeq ($(strip $(TFTP_CLIENT)),1)
export BUSY_BOX_TFTP_CLIENT=1
endif
ifeq ($(strip $(DSL_DIAGD_CONFIG)),1)
export SKY_DSL_DIAGD_CONFIG=1
endif

ifeq ($(strip $(SKY_CORE_AUXFS_ENABLE)),1)
SKY_CFLAGS += -DSKY_CORE_DEBUG
endif

ifeq ($(strip $(SKY_5GHZ_GUI_ENABLE)),0)
# If 5GHz GUI is not enabled, explicitly define a build flag to suppress the GUI logic for 5GHz.
# This will disable (hide) the 5GHz wireless GUI, even if the hardware supports it.
SKY_CFLAGS += -DSKY_DISABLE_5GHZ_GUI_REGARDLESS
endif

ifeq ($(strip $(BRCM_UTILITY_COMMANDS)),1)
export BRCM_UTILITY_ENABLE=1
SKY_CFLAGS += -DBRCM_UTILITY_CMDS
endif
export SKY_CFLAGS
export SKY_SWVERSION_FILE_PATH=$(BUILD_DIR)/userspace/public/include/
#use this SKY_CFLAGS for release build
#export SKY_CFLAGS :=

BL_BUILD_DIR=$(BUILD_DIR)/cfe/build/broadcom/bcm63xx_rom
BRCM_BOARD := bcm963xx
BRCMDRIVERS_DIR = $(BUILD_DIR)/bcmdrivers
ORIGINAL_MDK = mdk212.tar.bz2

HOSTTOOLS_DIR = $(BUILD_DIR)/hostTools
HOSTTOOLS_PERL_LIB = $(HOSTTOOLS_DIR)/PerlLib
IMAGES_DIR = $(BUILD_DIR)/images
RELEASE_DIR = $(BUILD_DIR)/release
TARGETS_DIR = $(BUILD_DIR)/targets
DEFAULTCFG_DIR = $(TARGETS_DIR)/defaultcfg
FSSRC_DIR = $(TARGETS_DIR)/fs.src
CFE_FILE = $(TARGETS_DIR)/cfe/$(SKY_ROUTER_MODEL)/cfe$(BRCM_CHIP).bin
BOOTLOADER_FILE = $(TARGETS_DIR)/cfe/$(SKY_ROUTER_MODEL)/bootloader$(BRCM_CHIP).bin
CFE_ROM_FILE = $(TARGETS_DIR)/cfe/$(SKY_ROUTER_MODEL)/cfe$(BRCM_CHIP)rom.bin
SHARED_DIR = $(BUILD_DIR)/shared
CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
          else if [ -x /bin/bash ]; then echo /bin/bash; \
          else echo sh; fi ; fi)
GENDEFCONFIG_CMD = $(HOSTTOOLS_DIR)/scripts/gendefconfig

6510_REF_CODE=$(BUILD_DIR)/userapps/broadcom/6510refCode
USERSPACE_PUBLIC_LIBS_DIR=$(BUILD_DIR)/userspace/public/libs

KERNEL_DEBUG=0
KERNEL_KALLSYMS=0


#
# This is for CMS
# We could put this in the make menuconfig, but it might
# confuse the users.  For now, we only support one target OS.
# Everytime we see OALDIR, substitute it with linux
#
TARGET_OS = LINUX
OALDIR = $(subst LINUX,linux,$(strip $(TARGET_OS)))


export PROFILE_ARCH BL_BUILD_DIR PROFILE_KERNEL_VER KERNEL_DIR BRCMDRIVERS_DIR \
       LINUXDIR HOSTTOOLS_DIR IMAGES_DIR TARGETS_DIR DEFAULTCFG_DIR \
       FSSRC_DIR CFE_FILE BOOTLOADER_FILE SHARED_DIR GENDEFCONFIG_CMD CONFIG_BCM_KERNEL_CUSTOM BCM_KF\
       6510_REF_CODE CMS_LOG_FLAGS OALDIR USERSPACE_PUBLIC_LIBS_DIR \
       KERNEL_DEBUG ARCH


ifneq ($(MAKECMDGOALS), menuconfig)
ifneq ($(strip $(PROFILE)),)
include $(TARGETS_DIR)/$(PROFILE)/$(PROFILE)
export BRCM_CHIP
export BRCM_FLASHPSI_SIZE
export BRCM_DRIVER_WIRELESS_PCMCIA_DATASWAP BRCM_DRIVER_WIRELESS_EBI_DMA
export BRCM_DRIVER_USB BRCM_DRIVER_ETHERNET_CONFIG BRCM_DRIVER_GPON BRCM_DRIVER_XTM
export BRCM_DRIVER_LOG BRCM_GPON_FPGA BRCM_DRIVER_I2C
export BRCM_DRIVER_PKTFLOW_DEBUG BRCM_DRIVER_PKTFLOW_IPV6 BRCM_DRIVER_PKTFLOW_MCAST
export BRCM_DRIVER_MoCA_CTP_CANDIDATE BUILD_6802_MOCA MOCA_LAN_DISCONN MOCA_WAN_DISCONN
export BRCM_DRIVER_ISDN
export BRCM_DEFAULTCFG
export BRCM_CERT_FILE
export BRCM_KERNEL_NF_FIREWALL BRCM_KERNEL_NF_MANGLE BRCM_KERNEL_NF_NAT
export BRCM_KERNEL_NF_NAT_ALG_FTP BRCM_KERNEL_NF_NAT_ALG_SIP BRCM_KERNEL_NF_NAT_ALG_TFTP BRCM_KERNEL_NF_NAT_ALG_H323 BRCM_KERNEL_NF_NAT_ALG_H323_SIGNAL_PROXY
export BRCM_KERNEL_NF_NAT_ALG_IRC BRCM_KERNEL_NF_NAT_ALG_WM BRCM_KERNEL_NF_NAT_ALG_PT BRCM_KERNEL_NF_NAT_ALG_PPTP BRCM_KERNEL_NF_NAT_ALG_IPSEC
export BRCM_KERNEL_NF_NAT_ALG_RTSP BRCM_KERNEL_NF_NAT_ALG_SNMP BRCM_KERNEL_NF_NAT_ALG_TALK
export BRCM_KERNEL_NF_LAYER7_FILTER
export BRCM_EXT_SWITCH_TYPE BRCM_EXT_SWITCH_REV
export BCM_PHY_54616
export BRCM_BOARD_ID BRCM_NUM_MAC_ADDRESSES BRCM_BASE_MAC_ADDRESS BRCM_PSI_SIZE
export BRCM_AUXFS_PERCENT BRCM_GPON_SERIAL_NUMBER BRCM_GPON_PASSWORD
export BRCM_VOICE_BOARD_ID BRCM_MAIN_TP_NUM
export BRCM_DRIVER_FBOND_DEBUG
endif
endif # menuconfig

#export SKY flags
export ENABLE_REPAIR_SW=$(REPAIR)

export SKY_UNREVOKE_IN_REPAIR=$(UNREVOKE)

ifneq ($(strip $(PROFILE)),)
SKY_MODEL:=$(shell sed -n "s|^SKY_ROUTER_MODEL=\(.*\)$$|\1|p" $(PROFILE_FILE))
ifeq ($(SKY_MODEL),)
$(error SKY Model  $(SKY_MODEL) not specified in profile $(PROFILE_FILE))
endif
endif #PROFILE

ifneq ($(strip $(SKY_ROUTER_MODEL)),)
export SKY_ROUTER_MODEL
endif

ifneq ($(strip $(SKY_MODEL_SR101)),)
export SKY_MODEL_SR101
SKY_CFLAGS += -DCONFIG_SKY_MODEL_SR101
endif

ifneq ($(strip $(SKY_MODEL_SR102)),)
export SKY_MODEL_SR102
SKY_CFLAGS += -DCONFIG_SKY_MODEL_SR102
endif

ifneq ($(strip $(SKY_MODEL_NR701)),)
export SKY_MODEL_NR701
SKY_CFLAGS += -DCONFIG_SKY_MODEL_NR701
endif

ifneq ($(strip $(SKY_MODEL_ER110)),)
export SKY_MODEL_ER110
SKY_CFLAGS += -DCONFIG_SKY_MODEL_ER110
endif

ifneq ($(strip $(SKY_MODEL_EE120)),)
export SKY_MODEL_EE120
SKY_CFLAGS += -DCONFIG_SKY_MODEL_EE120
SKY_CFLAGS += -DSKY_EXTENDER
ifneq ($(strip $(BUILD_SKY_WFA_TESTING)),)
SKY_CFLAGS += -DSKY_EXTENDER_WFA
export BUILD_SKY_EXTENDER_WFA
SKY_CFLAGS += -DSKY_EXTENDER_WFA_TODO
export BUILD_SKY_EXTENDER_WFA_TODO
endif
endif

ifneq ($(strip $(BUILD_SKY_WLAN_DIAG)),)
SKY_CFLAGS += -DSKY_WLAN_DIAG
export BUILD_SKY_WLAN_DIAG
endif

ifneq ($(strip $(BUILD_SKY_WFA_TESTING)),)
SKY_CFLAGS += -DSKY_GUI_5GHZ_WL_CHANNEL_CHANGE_ALLOWED
endif

ifneq ($(strip $(BUILD_SKY_MESH_SUPPORT)),)
SKY_CFLAGS += -DSKY_MESH_SUPPORT
export BUILD_SKY_MESH_SUPPORT
else
SKY_CFLAGS += -DSKY_GUI_5GHZ_WL_CHANNEL_CHANGE_ALLOWED
endif

ifneq ($(strip $(BUILD_SKY_DIAGS_FOR_MESH_PROBLEMS)),)
SKY_CFLAGS += -DSKY_DIAGS_FOR_MESH_PROBLEMS
export BUILD_SKY_DIAGS_FOR_MESH_PROBLEMS
endif

ifneq ($(strip $(BUILD_SKY_REBOOT_DIAGNOSTICS)),)
SKY_CFLAGS += -DSKY_REBOOT_DIAGNOSTICS
export BUILD_SKY_REBOOT_DIAGNOSTICS
endif

ifneq ($(strip $(BUILD_SKY_PLC_SUPPORT)),)
# Pass a build flag to C compilations when Sky-specific Qualcomm PLC is enabled.
SKY_CFLAGS += -DSKY_PLC
# SKY_CFLAGS += -DSKY_HIDE_PLC_GUI
# export SKY_HIDE_PLC_GUI=y
export BUILD_SKY_PLC_SUPPORT
endif

#DISABLE_PMF introduced to enable/disable PMF via CLI for WFA testing
#enable this feature if needed
ifneq ($(strip $(BUILD_SKY_PMF_CONF_SUPPORT)),)
SKY_CFLAGS += -DSKY_DISABLE_PMF
endif

ifneq ($(strip $(BUILD_SKY_TR69C_XMPP_SUPPORT)),)
SKY_CFLAGS += -DSKY_TR69C_XMPP_SUPPORT
export BUILD_SKY_TR69C_XMPP_SUPPORT
endif

ifneq ($(strip $(BUILD_LIBIKSEMEL)),)
export BUILD_LIBIKSEMEL
endif

ifneq ($(strip $(BUILD_SKY_TR69C_ANTISPOOF_SUPPORT)),)
SKY_CFLAGS += -DSKY_TR69C_ANTISPOOF_SUPPORT
export BUILD_SKY_TR69C_ANTISPOOF_SUPPORT
endif

ifneq ($(strip $(SKY_CONFIG_NFC_IMPL)),)
SKY_CFLAGS += -DSKY_CONFIG_NFC_IMPL
export SKY_CONFIG_NFC_IMPL
endif

ifneq ($(strip $(BUILD_SKYDHCPC)),)
SKY_CFLAGS += -DSKY_DHCPC_SUPPORT
export BUILD_SKYDHCPC
endif

ifneq ($(strip $(BUILD_SKYUPNP)),)
SKY_CFLAGS += -DSKY_UPNP_SUPPORT
export BUILD_SKYUPNP
endif

ifneq ($(strip $(BUILD_DEVICE_MON)),)
SKY_CFLAGS += -DSKY_DEVICE_MON
export BUILD_DEVICE_MON
endif

ifneq ($(strip $(BUILD_SKYLSNET)),)
SKY_CFLAGS += -DSKY_LSNET_SUPPORT
export BUILD_SKYLSNET
endif

ifneq ($(strip $(BUILD_SKY_FEATURE_WATCHDOG)),)
SKY_CFLAGS += -DSKY_FEATURE_WATCHDOG
export BUILD_SKY_FEATURE_WATCHDOG
endif

ifneq ($(strip $(BUILD_SKY_FEATURE_ENG_DIAG)),)
SKY_CFLAGS += -DSKY_ENGDIAG
export BUILD_SKY_FEATURE_ENG_DIAG
endif

ifneq ($(strip $(BUILD_SKY_SUPPORT_TRIALS)),)
SKY_CFLAGS += -DSKY_SUPPORT_TRIALS
export BUILD_SKY_SUPPORT_TRIALS
endif

ifneq ($(strip $(BUILD_SKY_FEATURE_ACL)),)
SKY_CFLAGS += -DSKY_FEATURE_ACL
export BUILD_SKY_FEATURE_ACL
endif

ifneq ($(strip $(BUILD_SKY_CMS_LOCK_DEBUG)),)
SKY_CFLAGS += -DSKY_CMS_LOCK_DEBUG
export SKY_CMS_LOCK_DEBUG
endif

ifneq ($(strip $(BUILD_SKY_TELNET_NO_AUTH)),)
SKY_CFLAGS += -DSKY_TELNET_NO_AUTH
export BUILD_SKY_TELNET_NO_AUTH
endif

ifneq ($(strip $(BUILD_SKY_DIAGNOSTICS)),)
SKY_CFLAGS += -DSKY_DIAGNOSTICS
export BUILD_SKY_DIAGNOSTICS
endif

export DESKTOP_LINUX BRCM_BOARD BRCM_UCLIBC 

# these vars are needed by busybox
export BUILD_BUSYBOX_GUNZIP BUILD_BUSYBOX_GZIP \
       BUILD_BUSYBOX_TAR BUILD_BUSYBOX_UNTAR \
       BUILD_BUSYBOX_VI  \
       BUILD_WGET_HTTPS 




###########################################
#
# Define Toolchain
#
###########################################
ifeq ($(strip $(BRCM_UCLIBC)),y)
NTC=1
ifeq ($(strip $(NTC)),1)

TOOLCHAIN = $(TOOLCHAIN_TOP)/usr
LIBDIR = $(TOOLCHAIN_TOP)/$(TOOLCHAIN_LIBDIR)
HOSTUSRLIBDIR = $(TOOLCHAIN_TOP)/usr/lib
EXTRALIBDIR = $(TOOLCHAIN_TOP)/usr/$(TOOLCHAIN_PREFIX)/lib
EXTRAINCDIR = $(TOOLCHAIN_TOP)/usr/lib/gcc/$(TOOLCHAIN_PREFIX)/$(TOOLCHAIN_VER)/include
LIB_PATH        = $(TOOLCHAIN_TOP)/lib
LIBCDIR         = $(TOOLCHAIN_TOP)/lib

ifndef NO_WERRS
# The new compiler has a bug that if you specify -Werror=frame-larger-than=X, it treats X as 1 (and errors on all functions)
#export BRCM_WERROR_CFLAGS :=  -Werror=return-type -Werror=uninitialized -Wframe-larger-than=1024
export BRCM_WERROR_CFLAGS :=  -Werror=return-type -Werror=uninitialized
else
export BRCM_WERROR_CFLAGS :=
endif

BRCM_COMMON_CFLAGS :=  -Os -march=mips32  -fomit-frame-pointer -fno-strict-aliasing -mabi=32 -G 0 -msoft-float -pipe -Wa,-mips32 $(BRCM_WERROR_CFLAGS) -DSKY_IHR -DSKY $(SKY_CFLAGS)

export BRCM_APP_CFLAGS :=  $(BRCM_COMMON_CFLAGS) -mno-shared
export BRCM_SO_CFLAGS :=   $(BRCM_COMMON_CFLAGS)

CROSS_COMPILE = $(TOOLCHAIN)/bin/$(TOOLCHAIN_PREFIX)-
else #NTC
TOOLCHAIN=/opt/toolchains/uclibc
CROSS_COMPILE = $(TOOLCHAIN)/bin/mips-uclibc-
endif #NTC
else #BRCM_UCLIBC
TOOLCHAIN=/usr/crossdev/mips
CROSS_COMPILE = $(TOOLCHAIN)/bin/mips-linux-
endif #BRCM_UCLIBC

ifeq ($(strip $(DESKTOP_LINUX)),y)
CROSS_COMPILE = /usr/bin/
endif


AR              = $(CROSS_COMPILE)ar
AS              = $(CROSS_COMPILE)as
LD              = $(CROSS_COMPILE)ld
CC              = $(CROSS_COMPILE)gcc
CXX             = $(CROSS_COMPILE)g++
CPP             = $(CROSS_COMPILE)cpp
NM              = $(CROSS_COMPILE)nm
STRIP           = $(CROSS_COMPILE)strip
SSTRIP          = $(CROSS_COMPILE)sstrip
OBJCOPY         = $(CROSS_COMPILE)objcopy
OBJDUMP         = $(CROSS_COMPILE)objdump
RANLIB          = $(CROSS_COMPILE)ranlib

# If building on desktop, don't strip binaries
ifeq ($(strip $(DESKTOP_LINUX)),y)
STRIP  = /bin/touch
SSTRIP = /bin/touch
endif

# If building on desktop, set LIBDIR for legacy makefiles
# that still use LIBDIR (e.g. zebra)
ifeq ($(strip $(DESKTOP_LINUX)),y)
LIB_PATH        = /usr/lib
LIBDIR          = /usr/lib
LIBCDIR         = /usr/lib
endif


# STRIP is used to strip the kernel modules.  Currently, there is no
# usage scenario which requires unstripped kernel modules.

# SSTRIP is used to strip userspace apps in the final fs dir.


export TOOLCHAIN_TOP TOOLCHAIN LEGACY_TOOLCHAIN CROSS_COMPILE \
       AR AS LD CC CXX CPP NM STRIP SSTRIP OBJCOPY OBJDUMP RANLIB \
       LIB_PATH LIBDIR HOSTUSRLIBDIR EXTRALIBDIR EXTRAINCDIR LIBCDIR \
       BUILD_GDBSERVER


###########################################
#
# Application-specific settings
#
###########################################
TARGET_FS = $(TARGETS_DIR)/$(PROFILE)/fs
TARGET_BOOTFS = $(TARGETS_DIR)/$(PROFILE)/bootfs
PROFILE_DIR = $(TARGETS_DIR)/$(PROFILE)
INSTALL_DIR=$(PROFILE_DIR)/fs.install
PROFILE_PATH = $(TARGETS_DIR)/$(PROFILE)/$(PROFILE)
#VENDOR_NAME = bcm
VENDOR_NAME = SKY-

PRODUCT_NAME:="$(shell $(BUILD_DIR)/profile2product.sh $(PROFILE))"
FLASH_BASE_IMAGE_NAME = $(VENDOR_NAME)$(PRODUCT_NAME)

FS_KERNEL_IMAGE_NAME = $(FLASH_BASE_IMAGE_NAME)_fs_kernel
CFE_FS_KERNEL_IMAGE_NAME = $(FLASH_BASE_IMAGE_NAME)_cfe_fs_kernel
FLASH_IMAGE_NAME = $(FLASH_BASE_IMAGE_NAME)_flash_image_$(BRCM_BOARD_ID)
ifneq ($(strip ${ENABLE_REPAIR_SW}),)
UNLOCKSTRING:="-UNLOCK"
REPAIRSTRING:="REPAIR"
FLASH_IMAGE_NAME = $(VENDOR_NAME)-$(REPAIRSTRING)_$(BRCM_FLASH_CHIP_SIZE)MB-$(SKY_SV_INCREMENT)-$(SKY_SV_REVISION)$(UNLOCKSTRING)
else
FLASH_IMAGE_NAME = $(FLASH_BASE_IMAGE_NAME)_$(BRCM_FLASH_CHIP_SIZE)MB-$(SKY_SV_MAJOR)-$(SKY_SV_MINOR)-$(SKY_SV_INCREMENT)-$(SKY_SV_REVISION)-$(SKY_SV_TYPE)
endif

FLASH_NAND_CFEROM_FS_IMAGE_NAME_16 = $(FLASH_BASE_IMAGE_NAME)_nand_cferom_fs_image_16
FLASH_NAND_FS_IMAGE_NAME_16 = $(FLASH_BASE_IMAGE_NAME)_nand_fs_image_16
FLASH_NAND_CFEROM_FS_IMAGE_NAME_128 = $(FLASH_BASE_IMAGE_NAME)_nand_cferom_fs_image_128
FLASH_NAND_FS_IMAGE_NAME_128 = $(FLASH_BASE_IMAGE_NAME)_nand_fs_image_128
FLASH_NAND_BLOCK_16KB=16384
FLASH_NAND_BLOCK_128KB=131072
INC_BRCMDRIVER_PUB_PATH=$(BRCMDRIVERS_DIR)/opensource/include
INC_BRCMDRIVER_PRIV_PATH=$(BRCMDRIVERS_DIR)/broadcom/include
INC_ADSLDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/adsl/impl1
INC_ATMAPI_DRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/atmapi/impl1
INC_MOCACFGDRV_PATH=$(BRCMDRIVERS_DIR)/opensource/char/moca/impl2

ifeq ($(strip $(RDPA_PLATFORM)),)
RDPA_PLATFORM :=
endif		

INC_BRCMSHARED_PUB_PATH=$(SHARED_DIR)/opensource/include
INC_BRCMSHARED_PRIV_PATH=$(SHARED_DIR)/broadcom/include
INC_BRCMBOARDPARMS_PATH=$(SHARED_DIR)/opensource/boardparms
INC_FLASH_PATH=$(SHARED_DIR)/opensource/flash
INC_UTILS_PATH=$(SHARED_DIR)/opensource/utils
INC_SPI_PATH=$(SHARED_DIR)/opensource/spi
INC_SPUDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/spudd/impl1
INC_PWRMNGTDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/pwrmngt/impl1
INC_ENETDRV_PATH=$(BRCMDRIVERS_DIR)/opensource/net/enet/impl4
INC_EPONDRV_PATH=$(BRCMDRIVERS_DIR)/broadcom/char/epon/impl1
INC_RDPA_PATH=$(BRCMDRIVERS_DIR)/opensource/char/rdpa_gpl/impl1/include
INC_RDPA_MW_PATH=$(BRCMDRIVERS_DIR)/opensource/char/rdpa_mw/impl1
INC_RDPA_DRV_PATH=$(BRCMDRIVERS_DIR)/opensource/char/rdpa_drv/impl1
INC_RDPA_PATH_PLATFORM=$(INC_RDPA_PATH)/$(RDPA_PLATFORM)
INC_BDMF_PATH=$(BRCMDRIVERS_DIR)/opensource/char/bdmf/impl1
RDP_PATH=$(SHARED_DIR)/broadcom/rdp


EXTRA_CFLAGS_BDMF=-I$(INC_BDMF_PATH)/framework -I$(INC_BDMF_PATH)/platform/$(RDPA_PLATFORM) -I$(INC_BDMF_PATH)/system -I$(INC_BDMF_PATH)/system/linux -I$(INC_BDMF_PATH)/shell
EXTRA_CFLAGS_RDPA=$(EXTRA_CFLAGS_BDMF) -I$(INC_RDPA_PATH) -I$(INC_RDPA_PATH)/$(RDPA_PLATFORM) -I$(INC_RDPA_MW_PATH) -I$(INC_RDPA_DRV_PATH)

export TARGET_FS TARGET_BOOTFS PROFILE_DIR INSTALL_DIR PROFILE_PATH \
       VENDOR_NAME FLASH_BASE_IMAGE_NAME \
       FS_KERNEL_IMAGE_NAME CFE_FS_KERNEL_IMAGE_NAME FLASH_IMAGE_NAME \
       INC_BRCMDRIVER_PUB_PATH INC_BRCMDRIVER_PRIV_PATH \
       INC_ADSLDRV_PATH INC_ATMAPI_DRV_PATH \
       INC_BRCMSHARED_PUB_PATH INC_BRCMSHARED_PRIV_PATH \
       INC_BRCMBOARDPARMS_PATH INC_FLASH_PATH \
       INC_UTILS_PATH \
       INC_PWRMNGTDRV_PATH INC_ENETDRV_PATH INC_SPI_PATH \
       INC_RDPA_PATH INC_RDPA_MW_PATH INC_RDPA_DRV_PATH INC_RDPA_PATH_PLATFORM INC_BDMF_PATH \
       EXTRA_CFLAGS_BDMF EXTRA_CFLAGS_RDPA RDP_PATH RDPA_PLATFORM


##################################################################
#
# Start CMS specific defines
#
##################################################################

ifeq ($(strip $(DESKTOP_LINUX)),y)

#Defines when are are building for Desktop Linux

ifdef BRCM_CMS_COMPILER_OPTS
CMS_COMPILER_OPTS := -Wall -W $(BRCM_CMS_COMPILER_OPTS) -DDESKTOP_LINUX	-fPIC
else
# The -O is needed to detect uninitialized variables, but sometimes prevents
# gdb from printing out a variable value.  So if you need to do some serious
# debugging, set BRCM_CMS_COMPILER_OPTS=-g in your shell.
CMS_COMPILER_OPTS := -Wall -W -O -g -DDESKTOP_LINUX -fPIC
endif

# Force 32 bit compiles even if the build machine is a 64 bit system
CMS_COMPILER_OPTS += -m32

ifeq ($(strip $(TOOLCHAIN_VER)),4.6.2) 
CMS_COMMON_LIBS   := -lcms_util -lcms_boardctl -lcrypt -lrt
else
CMS_COMMON_LIBS   := -lcms_util -lcms_boardctl -lcrypt -lutil -lrt
endif

CMS_LIB_RPATH = $(ALLOWED_LIB_DIRS):$(INSTALL_DIR)$(subst :,:$(INSTALL_DIR),$(ALLOWED_LIB_DIRS))

else

# Defines when we are building for flash
CMS_COMPILER_OPTS := $(BRCM_COMMON_CFLAGS) $(SKY_CFLAGS) -Wall -Dmips -g -fPIC

ifeq ($(strip $(TOOLCHAIN_VER)),4.6.2) 
CMS_COMMON_LIBS   := -lcms_util -lcms_boardctl -lcrypt
else
CMS_COMMON_LIBS   := -lcms_util -lcms_boardctl -lcrypt -lutil
endif

CMS_LIB_RPATH =

endif


# This is the cms_core library plus all the libraries that libcms_core 
# depend on.
ifneq ($(strip $(BUILD_SKY_MESH_SUPPORT)),)
CMS_CORE_LIBS := -lcms_core -lcms_qdm -lnanoxml -ldl -lskymal -laci
else
CMS_CORE_LIBS := -lcms_core -lcms_qdm -lnanoxml -ldl
endif

ifneq ($(strip $(BRCM_DRIVER_ADSL)),)
CMS_CORE_LIBS +=  -lxdslctl
endif

ifneq ($(strip $(BRCM_DRIVER_XTM)),)
CMS_CORE_LIBS +=  -latmctl
endif

ifneq ($(strip $(BUILD_MoCACTL)),)
CMS_CORE_LIBS +=  -lmocactl -lm
endif

ifneq ($(strip $(BUILD_MoCACTL2)),)
CMS_CORE_LIBS +=  -lpthread
endif

ifneq ($(strip $(BUILD_HOMEPLUG)),)
CMS_CORE_LIBS +=  -lhomeplugctl -lhomeplugctl_drv
endif

ifneq ($(strip $(BUILD_GPONCTL)),)
CMS_CORE_LIBS +=  -lgponctl -lgponif
endif

ifneq ($(strip $(BUILD_OMCI)),)
CMS_CORE_LIBS +=  -lomci -lomcipm_drv -lm
endif

ifneq ($(strip $(BUILD_VLANCTL)),)
CMS_CORE_LIBS +=  -lvlanctl
endif

ifneq ($(strip $(SKY_CONFIG_VDSL)),)
SKY_CFLAGS += -DCONFIG_SKY_VDSL
SKY_CFLAGS += -DVDSL_VLAN_SUPPORT
endif

ifneq ($(strip $(SKY_CONFIG_ETHAN)),)
SKY_CFLAGS += -DCONFIG_SKY_ETHAN
ifeq (,$(findstring EXTENDER,$(strip $(PROFILE))))
# For non Extender profiles enable VDSL
SKY_CFLAGS += -DCONFIG_SKY_VDSL
SKY_CFLAGS += -DVDSL_VLAN_SUPPORT
#SKY_CFLAGS += -DCONFIG_DEFAULT_WANMODE_ADSL
endif
endif

ifneq ($(strip $(BUILD_SPUCTL)),)
CMS_CORE_LIBS +=  -lspuctl
endif

ifneq ($(strip $(BUILD_PWRCTL)),)
CMS_CORE_LIBS +=  -lpwrctl
endif

ifneq ($(strip $(BUILD_ETHSWCTL)),)
CMS_CORE_LIBS += -lethswctl
endif

ifneq ($(strip $(BUILD_EPONCTL)),)
CMS_CORE_LIBS +=  -leponctl
endif

ifneq ($(strip $(BUILD_CMFAPI)),)
CMS_CORE_LIBS += -lcmfapi
endif

ifneq ($(strip $(BUILD_FAPCTL)),)
CMS_CORE_LIBS += -lfapctl
endif

ifneq ($(strip $(BUILD_CLI_CMD)),)
CMS_CORE_LIBS += -lm
endif

CMS_LIB_PATH = $(patsubst %,-L$(INSTALL_DIR)%,$(subst :, ,$(ALLOWED_LIB_DIRS)))

CMS_COMPILER_OPTS += -DMDM_SHARED_MEM
CMS_COMPILER_OPTS += -DCMS_MEM_DEBUG

export CMS_COMMON_LIBS CMS_CORE_LIBS CMS_COMPILER_OPTS CMS_COMPILE_FLAGS


#
# Several features will trigger the building of libpcap.
export BUILD_LIBPCAP
ifneq ($(strip $(BUILD_TCPDUMP)),)
BUILD_LIBPCAP=y
endif

ifneq ($(strip $(BUILD_SENDPACKETS)),)
BUILD_LIBPCAP=y
endif


#
# Many features will trigger the building of OpenSSL.
# OpenSSL is both a library and an app.
# We could distinguish betwen building OpenSSL lib and OpenSSL app,
# but for now, we always build and install both.  I have a plan to
# get rid of the app completely.
#
ifneq ($(strip $(BUILD_CERT)),)
DO_BUILD_OPENSSL=y
endif

ifneq ($(strip $(BUILD_TR69C_SSL)),)
DO_BUILD_OPENSSL=y
endif

ifneq ($(strip $(BUILD_HTTPD_SSL)),)
DO_BUILD_OPENSSL=y
endif

ifneq ($(strip $(BUILD_IPSEC_TOOLS)),)
DO_BUILD_OPENSSL=y
endif

export DO_BUILD_OPENSSL



#
# Top level decisions about which Data Model(s) we are going to use
#
CMS_DMP_FLAGS :=

BUILD_TR98_PROFILES :=
BUILD_HYBRID181_PROFILES :=
BUILD_PURE181_PROFILES :=

ifneq ($(strip $(BUILD_DM_LEGACY98)),)
BUILD_TR98_PROFILES := y
CMS_DMP_FLAGS += -DSUPPORT_DM_LEGACY98
endif

ifneq ($(strip $(BUILD_DM_HYBRID)),)
BUILD_TR98_PROFILES := y
BUILD_HYBRID181_PROFILES := y
CMS_DMP_FLAGS += -DSUPPORT_DM_HYBRID
endif

ifneq ($(strip $(BUILD_DM_PURE181)),)
BUILD_HYBRID181_PROFILES := y
BUILD_PURE181_PROFILES := y
CMS_DMP_FLAGS += -DSUPPORT_DM_PURE181
endif

ifneq ($(strip $(BUILD_DM_DETECT)),)
BUILD_TR98_PROFILES := y
BUILD_HYBRID181_PROFILES := y
BUILD_PURE181_PROFILES := y
CMS_DMP_FLAGS += -DSUPPORT_DM_DETECT
endif

#
# ==> These TR98 profiles are always defined when the root
#     of the data model is InternetGatewayDevice, i.e. when we are in
#     Legacy TR98 and Hybrid98+181 modes.
#
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_BASELINE_1 -DDMP_X_BROADCOM_COM_BASELINE_1
CMS_DMP_FLAGS += -DDMP_ETHERNETLAN_1
CMS_DMP_FLAGS += -DDMP_DEVICEASSOCIATION_1
CMS_DMP_FLAGS += -DDMP_IPPING_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DEBUG_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_SECURITY_1
endif


#
# ==> This is a small subset of the TR181 profiles which are always
#     defined in both Hybrid98+181 and Pure TR181 modes.
#
ifneq ($(strip $(BUILD_HYBRID181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_BASELINE_1 -DDMP_DEVICE2_X_BROADCOM_COM_BASELINE_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_BASELINE_2
CMS_DMP_FLAGS += -DDMP_DEVICE2_BASELINE_3
CMS_DMP_FLAGS += -DDMP_DEVICE2_IPINTERFACE_1 -DDMP_DEVICE2_IPINTERFACE_2 
CMS_DMP_FLAGS += -DDMP_DEVICE2_ETHERNETINTERFACE_1 -DDMP_DEVICE2_ETHERNETLINK_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_PPPINTERFACE_1 -DDMP_DEVICE2_PPPINTERFACE_2
CMS_DMP_FLAGS += -DDMP_DEVICE2_IPPING_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_ROUTING_1 -DDMP_DEVICE2_ROUTING_2
endif


#
# ==> These TR181 profiles are always defined in Pure TR181 mode (but
#     not in Hybrid98+181 mode)
#
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_BRIDGE_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_ROUTING_1 -DDMP_DEVICE2_ROUTING_2
CMS_DMP_FLAGS += -DDMP_DEVICE2_NAT_1 -DDMP_DEVICE2_PROCESSORS_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_HOSTS_1 -DDMP_DEVICE2_HOSTS_2
CMS_DMP_FLAGS += -DDMP_DEVICE2_DEVICEASSOCIATION_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DEBUG_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_SECURITY_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_BASELINE_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_SIMPLEFIREWALL_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_MEMORYSTATUS_1 -DDMP_DEVICE2_PROCESSSTATUS_1
endif


#
# ADSLWAN_1 profile is used to mean presence of xDSL technology on 
# the modem, the presence of ATM technology, and presence of ADSL.
# BUILD_DSL is a pre-requisit for loop diag, atm loopback, bonding,
# vdsl phy, and multi-mode phy.  ATM WAN and PTM WAN have their own
# controls in make menuconfig, so users should be smart enough to
# unselect that if DSL driver is not built.
#
ifneq ($(strip $(BUILD_DSL)),)

CMS_DMP_FLAGS += -DSUPPORT_DSL

ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_DSL_1 -DDMP_DEVICE2_DSLDIAGNOSTICS_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DSL_1 
endif

ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_ADSLWAN_1 -DDMP_X_BROADCOM_COM_ADSLWAN_1 
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_XTMSTATS_1
endif

ifneq ($(strip $(BUILD_DSL_LOOP_DIAG)),)
CMS_DMP_FLAGS += -DDMP_DSLDIAGNOSTICS_1
endif

ifeq ($(strip $(BRCM_PHY_BONDING)),y)
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DSUPPORT_DSL_BONDING -DDMP_X_BROADCOM_COM_DSLBONDING_1
endif
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_BONDEDDSL_1 -DSUPPORT_DSL_BONDING
endif
export BRCM_PHY_BONDING=y
endif

ifeq ($(strip $(BRCM_PHY_LOOPBACK)),y)
CMS_DMP_FLAGS += -DSUPPORT_DSL_LOOPBACK
export BRCM_PHY_LOOPBACK=y
endif

ifeq ($(strip $(BRCM_MULTI_PHY)),y)
CMS_DMP_FLAGS += -DSUPPORT_MULTI_PHY
export BRCM_MULTI_PHY=y
endif

ifeq ($(strip $(BRCM_PHY_BONDING5B)),y)
CMS_DMP_FLAGS += -DSUPPORT_DSL_BONDING5B
export BRCM_PHY_BONDING5B=y
endif

ifeq ($(strip $(BRCM_PHY_BONDING_C0)),y)
CMS_DMP_FLAGS += -DSUPPORT_DSL_BONDING -DDMP_X_BROADCOM_COM_DSLBONDING_1
export BRCM_PHY_BONDING_C0=y
endif

ifeq ($(strip $(BRCM_ANNEXAB_COMBO)),y)
CMS_DMP_FLAGS += -DSUPPORT_ANNEXAB_COMBO
export BRCM_ANNEXAB_COMBO=y
endif

DSL_GINP_RTX_DRIVER_DEFINES := -DNONE

ifeq ($(strip $(BRCM_PHY_GINP_RTX)),y)
ifeq ($(strip $(BRCM_CHIP)),63268)
CMS_DMP_FLAGS += -DSUPPORT_DSL_GINP_RTX
DSL_GINP_RTX_DRIVER_DEFINES += -DSUPPORT_DSL_GINP_RTX
export BRCM_PHY_GINP_RTX=y
endif
endif
export DSL_GINP_RTX_DRIVER_DEFINES

DSL_EXT_BONDING_DRIVER_DEFINES := -DNONE

ifeq ($(strip $(BRCM_EXT_PHY_BONDING)),y)
ifeq ($(strip $(BRCM_CHIP)),63268)
CMS_DMP_FLAGS += -DSUPPORT_EXT_DSL_BONDING -DDMP_X_BROADCOM_COM_DSLBONDING_1 -DSUPPORT_DSL_BONDING
endif
ifeq ($(strip $(BRCM_CHIP)),6368)
CMS_DMP_FLAGS += -DSUPPORT_EXT_DSL_BONDING
endif
DSL_EXT_BONDING_DRIVER_DEFINES += -DSUPPORT_EXT_DSL_BONDING
export BRCM_EXT_PHY_BONDING=y
endif

export DSL_EXT_BONDING_DRIVER_DEFINES


# VDSL flags have to be turned on for VDSL and Multimode phy
ifneq ($(strip $(BUILD_PHY_VDSL)),)
CMS_DMP_FLAGS += -DDMP_VDSL2WAN_1 -DDMP_X_BROADCOM_COM_VDSL2WAN_1
endif

ifneq ($(strip $(BUILD_PHY_MULTIMODE)),)
CMS_DMP_FLAGS += -DDMP_VDSL2WAN_1 -DDMP_X_BROADCOM_COM_VDSL2WAN_1
endif

export BUILD_PHY_ADSL BUILD_PHY_VDSL BUILD_PHY_MULTIMODE
endif
# ==== end of BUILD_DSL section ====


# 
# Various technologies as WAN interface selections
#

# this means the user wants to have a ATM WAN interface
# We don't have a SUPPORT_ATM flag.  It is implied by SUPPORT_DSL.
ifneq ($(strip $(BUILD_ATMWAN)),)

export BUILD_WAN_HTML=y

ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_ATMWAN_1
endif
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_ATMLINK_1 -DDMP_DEVICE2_X_BROADCOM_COM_ATMLINK_1
endif

endif


# ATMLOOPBACK is automatically selected in config.in when ATM WAN is selected
ifneq ($(strip $(BUILD_ATMLOOPBACK)),)
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_ATMLOOPBACK_1 -DDMP_X_BROADCOM_COM_ATMLOOPBACK_1 
endif

ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_ATMLOOPBACK_1 -DDMP_DEVICE2_X_BROADCOM_COM_ATMLOOPBACK_1 
endif
endif

# this means the modem has PTM technology and user wants to have
# a PTM WAN interface
ifneq ($(strip $(BUILD_PTMWAN)),)
export BUILD_WAN_HTML=y
CMS_DMP_FLAGS += -DSUPPORT_PTM

ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_PTMWAN_1 -DDMP_X_BROADCOM_COM_PTMWAN_1
endif

ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_PTMLINK_1 -DDMP_DEVICE2_X_BROADCOM_COM_PTMLINK_1 
endif

endif

# this means the user wants to have a Moca WAN interface
ifneq ($(strip $(BUILD_MOCAWAN)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_MOCAWAN_1
export BUILD_WAN_HTML=y
endif

# this means user wants to have a ethernet WAN interface
ifneq ($(strip $(BUILD_ETHWAN)),)
export BUILD_WAN_HTML=y
CMS_DMP_FLAGS += -DSUPPORT_ETHWAN

ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_ETHERNETWAN_1
endif
# TR181 does not have a separate Data Model define for ethwan

endif

# this means user wants to have FAP TM
ifneq ($(strip $(BUILD_FAPCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_FAPCTL
endif

# this means user wants to have RDD related features as us such as TM
ifeq ($(BUILD_RDPA),y)
CMS_DMP_FLAGS += -DSUPPORT_RDPA
export BUILD_RDPA_QOS=y
CMS_CORE_LIBS += -lrdpactl
endif

# this means the user wants to have a EPON WAN interface
ifneq ($(strip $(BUILD_EPONWAN)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_PONWAN_1 -DDMP_X_BROADCOM_COM_EPONWAN_1
export BUILD_WAN_HTML=y
endif

# this means user wants to have a wifi WAN interface
# Note this option depends on the general Wifi feature being enabled, which
# is done elsewhere
ifneq ($(strip $(BUILD_WIFIWAN)),)
CMS_DMP_FLAGS += -DSUPPORT_WIFIWAN
export BUILD_WAN_HTML=y
endif

# this means the user wants to have a GponRG Light Omci build
ifneq ($(strip $(BUILD_GPONRG_OMCI_LIGHT)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_PONWAN_1 -DDMP_X_BROADCOM_COM_GPONWAN_1 -DDMP_X_BROADCOM_COM_GPONRG_OMCI_LIGHT_1 
endif

# this means the user wants to have a  GponRG Full Omci build
ifneq ($(strip $(BUILD_GPONRG_OMCI_FULL)),)
CMS_DMP_FLAGS +=  -DDMP_X_BROADCOM_COM_PONWAN_1 -DDMP_X_BROADCOM_COM_GPONWAN_1 -DDMP_X_BROADCOM_COM_GPONRG_OMCI_FULL_1
endif

# this means the user wants to have a GPON OMCI TR69 dual stack
ifneq ($(strip $(BUILD_OMCI_TR69_DUAL_STACK)),)
CMS_DMP_FLAGS += -DOMCI_TR69_DUAL_STACK
endif

ifneq ($(strip $(BUILD_OMCI)),)
ifeq ($(strip $(BUILD_GPONRG_OMCI_LIGHT)),)
ifeq ($(strip $(BUILD_GPONRG_OMCI_FULL)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_GPONONT_1
endif
endif
endif

# this means user wants to have a L2TP AC (PPPoL2TPAC) WAN service
ifneq ($(strip $(BUILD_L2TPAC)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_L2TPAC_1
endif

ifneq ($(strip $(BUILD_GRE_TUNNEL)),)
CMS_DMP_FLAGS += -DSUPPORT_GRE_TUNNEL
# Add data model specific flags later
endif

ifneq ($(strip $(BUILD_MoCACTL)),)
CMS_DMP_FLAGS += -DSUPPORT_MOCA -DDMP_X_BROADCOM_COM_MOCALAN_1
endif

ifneq ($(strip $(BUILD_MoCACTL2)),)
CMS_DMP_FLAGS += -DBRCM_MOCA_DAEMON
endif

# eanble DMP_X_BROADCOM_COM_BPAAPI_1 under the following conditions
# Both ETHWAN and MOCAWAN are enabled, or
# some other condition TBD by Anil

ifneq ($(strip $(BUILD_ETHWAN)),)
ifneq ($(strip $(BUILD_MOCAWAN)),)
ifneq ($(strip $(BUILD_CMFAPI)),)
BUILD_BPAAPI := 1
endif
endif
endif

ifneq ($(strip $(BUILD_BPAAPI)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_BPAAPI_1
endif

ifneq ($(strip $(BUILD_SOAP)),)
CMS_DMP_FLAGS += -DSUPPORT_SOAP
endif

ifneq ($(strip $(BUILD_IPSEC_TOOLS)),)
CMS_DMP_FLAGS += -DSUPPORT_IPSEC -DDMP_X_BROADCOM_COM_IPSEC_1
endif
ifneq ($(strip $(BUILD_SNMP)),)
CMS_DMP_FLAGS += -DSUPPORT_SNMP -DDMP_X_BROADCOM_COM_SNMP_1
endif

ifneq ($(strip $(BUILD_TR64)),)
CMS_DMP_FLAGS += -DSUPPORT_TR64C -DDMP_X_BROADCOM_COM_TR64_1
endif

ifneq ($(strip $(BUILD_SKY_TR69C_XMPP_SUPPORT)),)
CMS_DMP_FLAGS += -DDMP_XMPPCONNREQ_1
endif

ifneq ($(strip $(BUILD_SKY_TR69C_ANTISPOOF_SUPPORT)),)
CMS_DMP_FLAGS += -DDMP_X_SKY_COM_ANTISPOOF_1
endif

ifneq ($(strip $(SKY_MODEL_EE120)),)
CMS_DMP_FLAGS += -DDMP_X_SKY_EXTENDER_1
endif

ifneq ($(strip $(SKY_MODEL_NR701)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_BASELINE_NOWTV_1
else
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_BASELINE_SKY_1
endif

ifneq ($(strip $(BUILD_IPV6)),)
CMS_DMP_FLAGS += -DSUPPORT_IPV6
export SKY_IPV6_SUPPORT=1
SKY_CFLAGS += -DSKY_IPV6
ifneq ($(strip $(BUILD_DM_LEGACY98)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_IPV6_1
else
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_IPV6_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DEV2_IPV6_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_DSLITE_1 -DDMP_DEVICE2_DSLITE_2
CMS_DMP_FLAGS += -DDMP_DEVICE2_IPV6RD_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_IPV6INTERFACE_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_IPV6ROUTING_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_DHCPV6CLIENT_1 -DDMP_DEVICE2_DHCPV6CLIENTSERVERIDENTITY_1 
CMS_DMP_FLAGS += -DDMP_DEVICE2_DHCPV6SERVER_1  -DDMP_DEVICE2_DHCPV6SERVERADV_1 -DDMP_DEVICE2_DHCPV6SERVERCLIENTINFO_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_NEIGHBORDISCOVERY_1 -DDMP_DEVICE2_ROUTERADVERTISEMENT_1
endif
endif

ifneq ($(strip $(BUILD_TR69C)),)
CMS_DMP_FLAGS += -DSUPPORT_TR69C
endif

ifneq ($(strip $(BUILD_TR69C_SSL)),)
CMS_DMP_FLAGS += -DSUPPORT_TR69C
endif

ifneq ($(strip $(BUILD_TR69C_BCM_SSL)),)
CMS_DMP_FLAGS += -DSUPPORT_TR69C
endif

ifneq ($(strip $(BUILD_TR69_TR143)),)
CMS_DMP_FLAGS += -DDMP_DOWNLOAD_1
CMS_DMP_FLAGS += -DDMP_UPLOAD_1
CMS_DMP_FLAGS += -DDMP_DOWNLOADTCP_1
CMS_DMP_FLAGS += -DDMP_UPLOADTCP_1
CMS_DMP_FLAGS += -DDMP_UDPECHO_1
CMS_DMP_FLAGS += -DDMP_UDPECHOPLUS_1
endif

ifneq ($(strip $(BUILD_EPON_SDK_VOICE_OAM)),)
CMS_DMP_FLAGS +=   -DDMP_X_CT_ORG_EPON_1 -DDMP_ENDPOINT_1 -DDMP_EPON_VOICE_OAM -DDMP_X_BROADCOM_COM_EPON_1
endif

ifneq ($(strip $(BUILD_GPON)),)

CMS_DMP_FLAGS += -DDMP_X_ITU_ORG_GPON_1 -DDMP_X_BROADCOM_COM_GPON_1
export BUILD_WAN_HTML=y

ifeq ($(strip $(BUILD_DM_LEGACY98)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_OPTICAL_1
endif

ifneq ($(filter y,$(BUILD_EPONWAN) $(BUILD_GPON)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_XPON_1
endif

ifeq ($(strip $(BRCM_APP_PHONE)),sip)
CMS_DMP_FLAGS += -DDMP_X_ITU_ORG_VOICE_1 -DDMP_X_ITU_ORG_VOICE_SIP_1
endif

ifeq ($(strip $(BRCM_APP_PHONE)),mgcp)
#CMS_DMP_FLAGS += -DDMP_X_ITU_ORG_VOICE_1 -DDMP_X_ITU_ORG_VOICE_MGC_1
endif

endif

ifneq ($(strip $(BUILD_OMCI)),)
CMS_DMP_FLAGS += -DBRCM_OMCI
endif

ifneq ($(strip $(BUILD_HTTPD)),)
CMS_DMP_FLAGS += -DSUPPORT_HTTPD
endif

ifneq ($(strip $(BUILD_QUICKSETUP)),)
CMS_DMP_FLAGS += -DSUPPORT_QUICKSETUP -DDMP_X_BROADCOM_COM_QUICKSETUP_1
endif

ifneq ($(strip $(BUILD_HTTPD_SSL)),)
CMS_DMP_FLAGS += -DSUPPORT_HTTPD -DSUPPORT_HTTPD_SSL
endif

ifneq ($(strip $(BUILD_CLI_MENU)),)
CMS_DMP_FLAGS += -DSUPPORT_CLI_MENU
endif

ifneq ($(strip $(BUILD_CLI_CMD)),)
CMS_DMP_FLAGS += -DSUPPORT_CLI_CMD -DCLI_CMD_EDIT
endif

ifneq ($(strip $(BUILD_CONSOLED)),)
CMS_DMP_FLAGS += -DSUPPORT_CONSOLED
endif


ifneq ($(strip $(BUILD_TELNETD)),)
CMS_DMP_FLAGS += -DSUPPORT_TELNETD
endif

ifneq ($(strip $(BUILD_SSHD)),)
CMS_DMP_FLAGS += -DSUPPORT_SSHD
endif

ifneq ($(strip $(BUILD_FTPD)),)
CMS_DMP_FLAGS += -DSUPPORT_FTPD
endif

ifneq ($(strip $(BUILD_EBTABLES)),)
CMS_DMP_FLAGS += -DSUPPORT_EBTABLES
endif

ifneq ($(strip $(BUILD_TOD)),)
CMS_DMP_FLAGS += -DSUPPORT_TOD -DDMP_X_BROADCOM_COM_ACCESSTIMERESTRICTION_1
endif

ifneq ($(strip $(BUILD_URLFILTER)),)
CMS_DMP_FLAGS += -DSUPPORT_URLFILTER
endif

ifneq ($(strip $(BUILD_IPROUTE2)),)
CMS_DMP_FLAGS += -DSUPPORT_POLICYROUTING
endif

ifneq ($(strip $(BUILD_UPNP)),)
CMS_DMP_FLAGS += -DSUPPORT_UPNP -DDMP_X_BROADCOM_COM_UPNP_1
endif

ifneq ($(strip $(BUILD_HASHED_PASSWORDS)),)
CMS_DMP_FLAGS += -DSUPPORT_HASHED_PASSWORDS
endif

ifneq ($(strip $(BUILD_DDNSD)),)
CMS_DMP_FLAGS += -DSUPPORT_DDNSD -DDMP_X_BROADCOM_COM_DYNAMICDNS_1
endif

ifneq ($(strip $(BUILD_TINYSVCMDNS)),)
SKY_CFLAGS += -DSUPPORT_TINYSVCMDNS
export BUILD_TINYSVCMDNS
endif

ifneq ($(strip $(BUILD_DPROXY)),)
CMS_DMP_FLAGS += -DSUPPORT_DNSPROXY -DDMP_X_BROADCOM_COM_DNSPROXY_1
endif

ifneq ($(strip $(BUILD_DNSPROBE)),)
CMS_DMP_FLAGS += -DSUPPORT_DNSPROBE
endif

ifneq ($(strip $(BUILD_DPROXYWITHPROBE)),)
CMS_DMP_FLAGS += -DSUPPORT_DNSPROXYWITHPROBE -DDMP_X_BROADCOM_COM_DNSPROXY_1
endif

ifneq ($(strip $(BUILD_SUPERDMZ)),)
CMS_DMP_FLAGS += -DSUPPORT_ADVANCED_DMZ
endif

ifneq ($(strip $(BUILD_IPPD)),)
CMS_DMP_FLAGS += -DSUPPORT_IPP -DDMP_X_BROADCOM_COM_IPPRINTING_1
endif

ifneq ($(strip $(BUILD_DLNA)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DLNA_1
export BUILD_DLNA
endif

ifneq ($(strip $(BUILD_HOMEPLUG)),)
CMS_DMP_FLAGS += -DSUPPORT_HOMEPLUG -DDMP_DEVICE2_HOMEPLUG_1
endif

ifeq ($(strip $(BUILD_HOMEPLUG)),)
ifneq ($(strip $(BUILD_SKY_PLC_SUPPORT)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_HOMEPLUG_1
endif
endif

ifneq ($(strip $(BUILD_FBCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_FBCTL
endif

ifneq ($(strip $(BUILD_FCCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_FCCTL
endif

ifneq ($(strip $(BUILD_DSLDIAGD)),)
CMS_DMP_FLAGS += -DSUPPORT_DSLDIAGD
endif

ifneq ($(strip $(BUILD_SNTP)),)
CMS_DMP_FLAGS += -DSUPPORT_SNTP
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_TIME_1
endif
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_TIME_1
endif
endif

ifneq ($(strip $(BUILD_UDHCP)),)
CMS_DMP_FLAGS += -DSUPPORT_UDHCP

ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_DHCPV4_1 -DDMP_DEVICE2_DHCPV4CLIENT_1 -DDMP_DEVICE2_DHCPV4SERVER_1
endif
endif

ifneq ($(strip $(BUILD_UDHCP_RELAY)),)
CMS_DMP_FLAGS += -DDHCP_RELAY
endif

ifneq ($(strip $(BRCM_DRIVER_P8021AG)),)
CMS_DMP_FLAGS += -DSUPPORT_P8021AG -DDMP_X_BROADCOM_COM_P8021AG_1
endif

ifneq ($(strip $(BUILD_TMS)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_ETHERNETOAM_1
endif

ifneq ($(strip $(BUILD_SPUCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_SPUCTL 
endif

ifneq ($(strip $(BUILD_PWRCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_PWRMNGT -DDMP_X_BROADCOM_COM_PWRMNGT_1
endif

ifneq ($(strip $(BRCM_HOSTMIPS_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_HOSTMIPS_PWRSAVE
endif

ifneq ($(strip $(BRCM_DDR_SELF_REFRESH_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_DDR_SELF_REFRESH_PWRSAVE
endif

ifneq ($(strip $(BRCM_ETH_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_ETH_PWRSAVE
endif

ifneq ($(strip $(BRCM_AVS_PWRSAVE)),)
CMS_DMP_FLAGS += -DSUPPORT_AVS_PWRSAVE
else
  ifeq ($(strip $(BRCM_CHIP)),6318)
    $(error ERROR: AVS Must be enabled on 6318)
  endif
endif

ifneq ($(strip $(BUILD_IPERF)),)
export BUILD_LIB_STLPORT=y
endif

ifneq ($(strip $(BUILD_BRCM_OMCI)),)
CMS_DMP_FLAGS += -DSUPPORT_BRCM_OMCI
endif

ifneq ($(strip $(BUILD_PONWIZ)),)
export BUILD_LIB_STLPORT=y
CMS_DMP_FLAGS += -DSUPPORT_PONWIZ
endif

ifneq ($(strip $(BUILD_BMU)),)
CMS_DMP_FLAGS += -DSUPPORT_BMU
export BUILD_LIB_STLPORT=y
endif

ifneq ($(strip $(BRCM_STANDBY)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_STANDBY_1
endif

ifneq ($(strip $(BUILD_CMFD)),)
CMS_DMP_FLAGS += -DSUPPORT_CMFD
endif

ifneq ($(strip $(BUILD_GPONCTL)),)
CMS_DMP_FLAGS += -DSUPPORT_GPONCTL 
endif

ifneq ($(strip $(BUILD_RNGD)),)
CMS_DMP_FLAGS += -DSUPPORT_HWRANDOM
endif

ifneq ($(strip $(BUILD_EPON_SDK)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_EPON_1
endif

# TR140 Storage Service

ifneq ($(strip $(BUILD_STORAGESERVICE)),)
CMS_DMP_FLAGS += -DSUPPORT_STORAGESERVICE -DDMP_STORAGESERVICE_1
endif

ifneq ($(strip $(BUILD_NTFS_3G)),)
CMS_DMP_FLAGS += -DSUPPORT_NTFS_3G
endif

ifneq ($(strip $(BUILD_SAMBA)),)
CMS_DMP_FLAGS += -DSUPPORT_SAMBA
endif

# end Storage Service

#
# Multicast related defines
#
ifneq ($(strip $(BUILD_MCAST_SNOOP)),)
   CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_MCAST_1
   CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_IGMPSNOOP_1
   ifneq ($(strip $(BUILD_IPV6)),)
      CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_MLDSNOOP_1
   endif
endif

ifneq ($(strip $(BUILD_MCAST_PROXY)),)
   CMS_DMP_FLAGS += -DSUPPORT_IGMP -DDMP_X_BROADCOM_COM_IGMP_1
   ifneq ($(strip $(BUILD_IPV6)),)
      CMS_DMP_FLAGS += -DSUPPORT_MLD -DDMP_X_BROADCOM_COM_MLD_1
   endif
endif

# end Multicast

ifneq ($(strip $(BUILD_AUTODETECTION)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_AUTODETECTION_1
endif



#
#  =============== Begin Modular Software Section ===========
#

# was BUILD_OSGI_JVM
# Now all the various pieces are individually controlled for maximum flexibility
#
ifneq ($(strip $(BUILD_JVM_JAMVM)),)
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_JAMVM_1
CMS_DMP_FLAGS += -DJAMVM_MIN_HEAP=$(JAMVM_MIN_HEAP_SIZE)
CMS_DMP_FLAGS += -DJAMVM_MAX_HEAP=$(JAMVM_MAX_HEAP_SIZE)
CMS_DMP_FLAGS += -DJAMVM_STACK=$(JAMVM_STACK_SIZE_PER_THREAD)
endif

ifneq ($(strip $(BUILD_OSGI_FELIX)),)
CMS_DMP_FLAGS += -DSUPPORT_OSGI_FELIX
endif

ifneq ($(strip $(BUILD_MODSW_EE)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_SM_BASELINE_1
endif

ifneq ($(strip $(BUILD_MODSW_OSGIEE)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_X_BROADCOM_COM_MODSW_OSGIEE_1
endif

ifneq ($(strip $(BUILD_MODSW_LINUXEE)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_X_BROADCOM_COM_MODSW_LINUXEE_1
endif

ifneq ($(strip $(BUILD_MODSW_LINUXPFP)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_X_BROADCOM_COM_MODSW_LINUXPFP_1
endif

# If either LINUXEE or LINUXPFP is enabled, we need linmosd
# linmosd is not directly controlled by the user via make menuconfig.
# We set it based on the settings of LINUXEE or LINUXPFP.
ifneq ($(strip $(BUILD_MODSW_LINUXEE)),)
BUILD_LINMOSD := 1
export BUILD_LINMOSD
endif

ifneq ($(strip $(BUILD_MODSW_LINUXPFP)),)
BUILD_LINMOSD := 1
export BUILD_LINMOSD
endif

ifneq ($(strip $(BUILD_LINMOSD)),)
CMS_DMP_FLAGS += -DSUPPORT_LINMOSD
endif

# osgid and linmosd needs libmodsw, so if either of these two things
# are defined, then build libmodsw. 
ifneq ($(strip $(BUILD_OSGI_FELIX)),)
BUILD_LIBMODSW := 1
export BUILD_LIBMODSW
endif

ifneq ($(strip $(BUILD_LINMOSD)),)
BUILD_LIBMODSW := 1
export BUILD_LIBMODSW
endif

ifneq ($(strip $(BUILD_LIBMODSW)),)
CMS_DMP_FLAGS += -DSUPPORT_LIBMODSW
endif


ifneq ($(strip $(BUILD_MODSW_CLI)),)
CMS_DMP_FLAGS += -DSUPPORT_MODSW_CLI
endif

ifneq ($(strip $(BUILD_MODSW_WEBUI)),)
CMS_DMP_FLAGS += -DSUPPORT_MODSW_WEBUI
endif

ifneq ($(strip $(BUILD_MODSW_WEBUI_ADMIN)),)
CMS_DMP_FLAGS += -DSUPPORT_MODSW_WEBUI_ADMIN
endif

ifneq ($(strip $(BUILD_PCP)),)
CMS_DMP_FLAGS += -DSUPPORT_PCP
endif

ifneq ($(strip $(BUILD_MODSW_WEBUI_SUPPORT)),)
CMS_DMP_FLAGS += -DSUPPORT_MODSW_WEBUI_SUPPORT
endif


#
#  =============== End Modular Software Section ===========
#



#
# netfilter modules 
#

ifneq ($(strip $(BRCM_KERNEL_NF_NAT_ALG_IPSEC)),)
	CMS_DMP_FLAGS += -DSUPPORT_IPSEC_PASSTHROUGH
endif

ifneq ($(strip $(BRCM_KERNEL_NF_NAT_ALG_PPTP)),)
	CMS_DMP_FLAGS += -DSUPPORT_PPTP
endif

ifneq ($(strip $(BRCM_KERNEL_NF_NAT_ALG_SIP)),)
	CMS_DMP_FLAGS += -DSUPPORT_SIP
endif

ifneq ($(strip $(BRCM_KERNEL_NF_LAYER7_FILTER)),)
	CMS_DMP_FLAGS += -DSUPPORT_L7_FILTER
endif

ifneq ($(strip $(BUILD_CONNTRACK_TOOLS)),)
CMS_DMP_FLAGS += -DSUPPORT_CONNTRACK_TOOLS
endif

#
# netfilter modules end
#


# Somehow this VCONFIG is tangled up with the broadcom port mapping and
# VLAN mux features.  Will have to sort it out later.
#
ifneq ($(strip $(BUILD_VCONFIG)),)
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DSUPPORT_PORT_MAP -DDMP_BRIDGING_1 
endif
# In Pure TR181 mode, portmapping and bridging is always enabled.
endif

ifneq ($(strip $(BUILD_WANVLANMUX)),)
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DSUPPORT_WANVLANMUX
endif
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
# Pure TR181 mode: always enable VLANMUX, so no defines needed?
CMS_DMP_FLAGS += -DSUPPORT_WANVLANMUX -DDMP_DEVICE2_VLANTERMINATION_1
endif
endif

ifneq ($(strip $(BUILD_LANVLAN)),)
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DSUPPORT_LANVLAN
endif
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_VLANTERMINATION_1
endif
endif

#ifneq ($(strip $(BUILD_BCM_ALLOW_REAL_HW_SWITCHING)),)
#CMS_DMP_FLAGS += -DSUPPORT_CMS_ALLOW_REAL_HW_SWITCHING
#endif

# Temporarily blocking this configuration from menuconfig until Ethernet Driver is ready for this.
ifneq ($(BUILD_RDPA),y)
CMS_DMP_FLAGS += -DSUPPORT_CMS_ALLOW_REAL_HW_SWITCHING
endif

ifneq ($(strip $(BRCM_DRIVER_USB)),)
CMS_DMP_FLAGS += -DSUPPORT_USB
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_USBLAN_1
endif
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_USBHOSTSBASIC_1
CMS_DMP_FLAGS += -DDMP_DEVICE2_USBINTERFACE_1
endif
endif



# ==== Begin QoS, rate shaping, policing config section ====

# Currently, all builds support QoS, but maybe in the future we could
# disable QoS for some very simple devices?
CMS_DMP_FLAGS += -DSUPPORT_QOS

# Enable various Data Model related QoS defines based on what profiles
# we are compiling
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_QOS_1 -DDMP_QOSDYNAMICFLOW_1
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_QOS_1
endif

ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
CMS_DMP_FLAGS += -DDMP_DEVICE2_QOS_1 -DDMP_DEVICE2_QOS_2
CMS_DMP_FLAGS += -DDMP_X_BROADCOM_COM_DEVICE2_QOS_1
endif

ifneq ($(strip $(BRCM_TC_RATE_LIMIT)),)
CMS_DMP_FLAGS += -DSUPPORT_RATE_LIMIT
endif

ifneq ($(strip $(BRCM_TC_POLICING)),)
CMS_DMP_FLAGS += -DSUPPORT_POLICING
endif

# ==== End QoS, rate shaping, policing config section ====
ifneq ($(strip $(BRCM_KERNEL_FTRACE)),)
CMS_DMP_FLAGS += -DSUPPORT_FTRACE
endif

ifneq ($(strip $(BUILD_VLAN_AGGR)),)
CMS_DMP_FLAGS += -DCONFIG_BCM_VLAN_AGGREGATION -DCONFIG_BCM_KF_VLAN_AGGREGATION
endif

#
# These variables come from the debug section of make menuconfig
#
ifeq ($(strip $(CMS_LOG_DEBUG)),)
CMS_LOG_FLAGS := -DCMS_LOG0
else
ifneq ($(strip $(CMS_LOG_LEVEL_1)),)
CMS_LOG_FLAGS := -DCMS_LOG2
endif
ifneq ($(strip $(CMS_LOG_LEVEL_2)),)
CMS_LOG_FLAGS := -DCMS_LOG3
endif
ifneq ($(strip $(CMS_STARTUP_DEBUG)),)
CMS_DMP_FLAGS += -DCMS_STARTUP_DEBUG
endif
endif

ifneq ($(strip $(CMS_SECURITY_LOG)),)
CMS_DMP_FLAGS += -DCMS_SECURITY_LOG
endif

ifneq ($(strip $(CMS_MEM_BOUNDARY_CHECK)),)
CMS_DMP_FLAGS += -DCMS_MEM_BOUNDARY_CHECK
endif

ifneq ($(strip $(CMS_MEM_POISON_ALLOC_FREE)),)
CMS_DMP_FLAGS += -DCMS_MEM_POISON_ALLOC_FREE
endif

ifneq ($(strip $(CMS_MEM_LEAK_TRACING)),)
CMS_DMP_FLAGS += -DCMS_MEM_LEAK_TRACING
endif

ifneq ($(strip $(CMS_FATAL_ASSERT)),)
CMS_DMP_FLAGS += -DCMS_FATAL_ASSERT
endif

ifneq ($(strip $(BUILD_DEBUG_TOOLS)),)
CMS_DMP_FLAGS += -DSUPPORT_DEBUG_TOOLS
endif

ifneq ($(strip $(CMS_BYPASS_LOGIN)),)
CMS_DMP_FLAGS += -DCMS_BYPASS_LOGIN
endif

ifneq ($(strip $(BRCM_GMAC)),)
CMS_DMP_FLAGS += -DCMS_BRCM_GMAC
endif


#
# This needs a little cleanup also.  Instead of explicitly checking for BUILD_CERT,
# this check should be if (BUILD_HTTPD_SSL or BUILD_TR69_SSL or any other feature
# that requires SSL).
#
ifneq ($(strip $(BUILD_CERT)),)
CMS_DMP_FLAGS += -DSUPPORT_CERT -DDMP_X_BROADCOM_COM_DIGITALCERTIFICATES_1
endif

ifneq ($(strip $(BUILD_ZEBRA)),)
CMS_DMP_FLAGS += -DSUPPORT_RIP
endif

ifneq ($(strip $(COMPRESSED_CONFIG_FILE)),)
CMS_DMP_FLAGS += -DCOMPRESSED_CONFIG_FILE
endif

ifneq ($(strip $(BUILD_BACKUP_PSI)),)
CMS_DMP_FLAGS += -DSUPPORT_BACKUP_PSI
endif

ifneq ($(strip $(BUILD_BACKUP_PSI_MIRROR_MODE)),)
CMS_DMP_FLAGS += -DSUPPORT_BACKUP_PSI_MIRROR_MODE
endif

ifneq ($(strip $(BUILD_BACKUP_PSI_DEVICE_DEFAULT)),)
CMS_DMP_FLAGS += -DSUPPORT_BACKUP_PSI_DEVICE_DEFAULT
endif

ifneq ($(strip $(CMS_CONFIG_COMPAT)),)
CMS_DMP_FLAGS += -DCMS_CONFIG_COMPAT
endif

ifneq ($(strip $(CMS_CONFIG_IGNORE_UNRECOGNIZED)),)
CMS_DMP_FLAGS += -DCMS_CONFIG_IGNORE_UNRECOGNIZED
endif

# ==== Wifi (WLAN) config section ====
# If Wireless driver is selected from menuconfig, that means we want to enable
# the Wifi feature
ifneq ($(strip $(BRCM_DRIVER_WIRELESS)), )
CMS_WLAN_FLAGS += -DBRCM_WLAN -DWIRELESS
export WIRELESS=1
ifeq ($(BRCM_WAPI),y)
CMS_WLAN_FLAGS += -DBCMWAPI_WPI -DBCMWAPI_WAI
endif
ifneq ($(strip $(BUILD_TR98_PROFILES)),)
# These flags enable TR98 based Wifi objects
ifneq ($(strip $(BUILD_SKY_MESH_SUPPORT)),)
CMS_DMP_FLAGS += -DDMP_WIFILAN_1 -DDMP_X_SKY_WIFILAN_1
ifneq ($(strip $(BUILD_SKY_FEATURE_ACL)),)
CMS_DMP_FLAGS += -DDMP_X_SKY_WIFILAN_MAC_FLT_1
endif
#default value of DISABLE_PMF for WFA profile is FALSE and DEV profile is TRUE
ifneq ($(strip $(BUILD_SKY_WFA_TESTING)),)
CMS_DMP_FLAGS += -DDMP_X_SKY_WIFILAN_WFA_1
else
CMS_DMP_FLAGS += -DDMP_X_SKY_WIFILAN_DEV_1
endif

else
CMS_DMP_FLAGS += -DDMP_WIFILAN_1 -DDMP_X_BROADCOM_COM_WIFILAN_1
endif
endif
ifneq ($(strip $(BUILD_PURE181_PROFILES)),)
# In Pure TR181 mode, we use the standard TR181 wifi objects
CMS_DMP_FLAGS += -DDMP_DEVICE2_WIFIRADIO_1 -DDMP_DEVICE2_WIFISSID_1
# Do we have a define for AP mode?  Always assume it is enabled?
CMS_DMP_FLAGS += -DDMP_DEVICE2_WIFIACCESSPOINT_1 
# XXX later: if wifi as wan is enabled, define WIFIENDPOINT
endif

endif
# ==== End Wifi (WLAN) config section

ifneq ($(strip $(BUILD_SKY_DIAGNOSTICS)),)
CMS_DMP_FLAGS += -DDMP_X_SKY_DIAGNOSTICS_1
endif

ifneq ($(strip $(BCM_CGROUPS)),)
CMS_DMP_FLAGS += -DSUPPORT_CGROUPS
endif

ifneq ($(strip $(BCM_CGROUP_BCM)),)
CMS_DMP_FLAGS += -DSUPPORT_CGROUP_BCM
endif

ifeq ($(BUILD_IEEE1905),y)
CMS_DMP_FLAGS += -DSUPPORT_IEEE1905

ifeq ($(BRCM_1905_FM),y)
CMS_DMP_FLAGS += -DSUPPORT_IEEE1905_FM

ifeq ($(BRCM_1905_AUTO_WDS),y)
ifneq ($(strip $(BRCM_DRIVER_WIRELESS)),)
CMS_DMP_FLAGS += -DSUPPORT_IEEE1905_AUTO_WDS
endif

endif
endif
endif


CMS_COMPILE_FLAGS := $(DBGFLAGS) $(CMS_LOG_FLAGS) $(PROFILERFLAGS) \
                    -D$(TARGET_OS) $(CMS_COMPILER_OPTS) $(CMS_DMP_FLAGS) \
                    -DCHIP_$(BRCM_CHIP)	-DCONFIG_BCM9$(BRCM_CHIP)

ifneq ($(strip $(BUILD_BRCM_CMS)),)
CMS_COMPILE_FLAGS += -DBRCM_CMS_BUILD
endif

###### Need to export kernel config to userspace as well
ifeq ($(BRCM_GPON_DDRO), y)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_GPON_DDRO -DCONFIG_BCM_GPON_DDRO_SIZE=$(BRCM_GPON_DDRO_SIZE)
endif
ifeq ($(BCM_GPON_802_1Q_ENABLED),y)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_GPON_802_1Q_ENABLED
endif
ifeq ($(BRCM_PORTS_ON_INT_EXT_SW),y)
CMS_COMPILE_FLAGS += -DBRCM_PORTS_ON_INT_EXT_SW
endif
ifeq ($(BCM_GPON_AE_AUTO_SWITCH),y)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_GPON_AE_AUTO_SWITCH
endif
ifeq ($(BCM_GPON_TODD),y)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_GPON_TODD
endif
ifeq ($(strip $(BRCM_CHIP)),6818)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_MAX_GEM_PORTS=$(BCM_MAX_GEM_PORTS)
else
ifeq ($(strip $(BRCM_CHIP)),68500)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_MAX_GEM_PORTS=$(BCM_MAX_GEM_PORTS)
else
ifeq ($(strip $(BRCM_CHIP)),6838)
CMS_COMPILE_FLAGS += -DCONFIG_BCM_MAX_GEM_PORTS=$(BCM_MAX_GEM_PORTS)
else
# This is just to hide the error in rut_gponrg_light.c; this file should not compile for non-gpon
CMS_COMPILE_FLAGS += -DCONFIG_BCM_MAX_GEM_PORTS=1
endif
endif
endif

ifneq ($(strip $(BRCM_MIPS_RATE_LIMIT)),)
CMS_COMPILE_FLAGS += -DCONFIG_MIPS_RATE_LIMIT=$(BRCM_MIPS_RATE_LIMIT)
endif

ifneq ($(strip $(EPON_ONU_TYPE)),)
CMS_COMPILE_FLAGS +=   -D$(EPON_ONU_TYPE)
endif

ifneq ($(strip $(GPON_ONU_TYPE)),)
CMS_COMPILE_FLAGS +=   -D$(GPON_ONU_TYPE)
endif



ifneq ($(strip $(BCM_JUMBO_FRAME)),)
export BCM_JUMBO_FRAME
endif

ifneq ($(strip $(BUILD_EPON_SDK)),)
CMS_COMPILE_FLAGS +=   -DEPON_SDK_BUILD
endif

ifneq ($(strip $(OVERRIDE_EPON_MAC_ADDR)),)
CMS_COMPILE_FLAGS +=   -DOVERRIDE_EPON_MAC_ADDR
endif

ifneq ($(strip $(EPON_UNI_UNI_ENABLED)),)
CMS_COMPILE_FLAGS +=   -DEPON_UNI_UNI_ENABLED
endif

ifneq ($(strip $(MLLID_SUPPORTED)),)
CMS_COMPILE_FLAGS +=   -DMLLID_SUPPORTED
endif

CFLAGS = $(CMS_COMPILE_FLAGS) $(CUSTOM_CFLAGS) $(ALLOWED_INCLUDE_PATHS) $(CMS_WLAN_FLAGS)  $(SKY_CFLAGS) -DSKY -DSKY_IHR
CFLAGS += -I$(TOOLCHAIN)/include -L$(TOOLCHAIN)/lib
CFLAGS += $(BRCM_WERROR_CFLAGS)

export CMS_COMPILE_FLAGS


#BUILD VIODSL
ifneq ($(strip $(BUILD_VODSL)),)
export BUILD_VODSL
endif


ifneq ($(strip $(BUILD_GPONRG_OMCI_FULL)),)
export BUILD_GPONRG_OMCI_FULL
endif

###########################################
#
# Generic/common rules which are used by lower layer Makefiles
#
###########################################


# Every target should have a dependency on this target to make sure
# the user has specified a profile.
profile_defined_check: 
	@if [ "$(PROFILE)" = "" ]; then \
          echo You need to specify build profile name from $(TARGETS_DIR) using 'make PROFILE=<profile name>...'; exit 1; \
	fi

# See LAST_PROFILE at the top of this file.
profile_changed_check: profile_defined_check
ifneq ($(strip $(IGNORE_LAST_PROFILE)),1)
	@if [ "$(LAST_PROFILE)" = "" ]; then \
		echo "$(PROFILE)" > $(LAST_PROFILE_COOKIE); \
	else \
		if [ "$(LAST_PROFILE)" != "$(PROFILE)" ]; then \
			echo "The specified profile, $(PROFILE), differs from the last one built, $(LAST_PROFILE)."; \
			echo "The entire image must be rebuilt from the top of CommEngine."; \
			echo "To skip this check, build with IGNORE_LAST_PROFILE=1."; \
			read -p "Press ENTER to rebuild the entire image or CTRL-C to abort. " resp; \
			$(MAKE) PROFILE=$(LAST_PROFILE) clean; \
			echo "$(PROFILE)" > $(LAST_PROFILE_COOKIE); \
			$(MAKE) PROFILE=$(PROFILE); \
			echo "Ignore the make exit error, Error 1"; \
			exit 1; \
		fi \
	fi
else
	echo "$(PROFILE)" > $(LAST_PROFILE_COOKIE);
endif


REQUIRED_MAKE_VERSION := 3.81
REQUIRED_HOST_KERNEL_VERSION := 2.6
REQUIRED_AUTOMAKE_VERSION := 1.10.2
REQUIRED_AUTOCONF_VERSION := 2.59
REQUIRED_BCMTOOL_VERSION := Rel1.0

HOST_KERNEL_VERSION := $(shell uname -r)
BCMTOOL_VERSION := `echo "BCM_TOOLCHAIN_VERSION" | gcc -E -P -o- -include $${TOOLCHAIN_TOP}/usr/include/bcm_toolver.h -xc - | sed 's/^"\(.*\)"$$/\1/'`


prebuild_checks:
	@echo "shell is $(SHELL).  Bash version is $(shell echo $$BASH_VERSION)"
	@if [ -z "$(shell echo $$BASH_VERSION)" ]; then \
		echo "***************************************************"; \
		echo "ERROR: $(SHELL) does not invoke bash shell"; \
		echo "***************************************************"; \
		exit 1; \
	fi
	@if [ ! -d $(TOOLCHAIN_TOP) ]; then \
		echo "****************************************************"; \
		echo "ERROR: could not find Toolchain"; \
		echo "$(TOOLCHAIN_TOP)"; \
		echo "****************************************************"; \
		exit 1; \
	fi
	@if [ ! -d $(KERNEL_DIR) ]; then \
		echo "****************************************************"; \
		echo "ERROR: Could not find kernel directory:             "; \
		echo "$(KERNEL_DIR) "; \
		echo "****************************************************"; \
		exit 1; \
	fi
	@if ! xxd -v 2>/dev/null; then \
		echo "ERROR: xxd is required for build                   "; \
		exit 1; \
	fi
	@echo "Checking bcm tools version"
	@$(HOSTTOOLS_DIR)/scripts/checkver.pl -s $(BCMTOOL_VERSION) -r $(REQUIRED_BCMTOOL_VERSION) --quiet; \
	 if [ $$? != 0 ]; then \
	 	echo "****************************************************"; \
	 	echo "* WARNING:  "; \
	 	echo "* A newer version of the bcm toolchain is available."; \
	 	echo "* It is recomended you upgrade to $(REQUIRED_BCMTOOL_VERSION)."; \
	 	echo "****************************************************"; \
	 fi; \
	 echo "$(BCMTOOL_VERSION)"; 
	@echo "Checking make version"
	@$(HOSTTOOLS_DIR)/scripts/checkver.pl -s $(MAKE_VERSION) -r $(REQUIRED_MAKE_VERSION);
	@echo "Checking host kernel version"
	@$(HOSTTOOLS_DIR)/scripts/checkver.pl -s $(HOST_KERNEL_VERSION) -r $(REQUIRED_HOST_KERNEL_VERSION);
	@echo "Checking automake version:"
	@$(HOSTTOOLS_DIR)/scripts/checkver.pl -e automake -r $(REQUIRED_AUTOMAKE_VERSION);
	@if [ "`which automake`" -ef "$TOOLCHAIN_TOP/usr/bin/automake" ]; then \
		echo "----------------------------------------------------------------"; \
		echo "| ERROR: automake is being run from the cross-compile directory."; \
		echo "| Please install a local copy on your build machine."; \
		echo "----------------------------------------------------------------"; \
		exit 1; \
	fi
	@echo "Checking autoconf version:"
	@$(HOSTTOOLS_DIR)/scripts/checkver.pl -e autoconf -r $(REQUIRED_AUTOCONF_VERSION);
	@if [ "`which autoconf`" -ef "$TOOLCHAIN_TOP/usr/bin/autoconf" ]; then \
		echo "----------------------------------------------------------------"; \
		echo "| ERROR: autoconf is being run from the cross-compile directory."; \
		echo "| Please install a local copy on your build machine."; \
		echo "----------------------------------------------------------------"; \
		exit 1; \
	fi
	@echo "Checking tar version:"
	@tarVer=`$(HOSTTOOLS_DIR)/scripts/checkver.pl -e tar`; \
	echo "$$tarVer"; \
	if [ $$tarVer == "1.23" ]; then \
		echo "----------------------------------------------------------------"; \
		echo "| There is a known bug in tar 1.23 which causes build failures."; \
		echo "| 1.22 and 1.24 are known to be OK.  Please upgrade your tar to "; \
		echo "| another version"; \
		echo "----------------------------------------------------------------"; \
		exit 1; \
	fi

	@if ! echo "#include <lzo/lzo1x.h>" | gcc -E - >/dev/null; then \
		echo "ERROR: lzo/lzo1x.h development library is required for build"; \
		echo "       usually, this is provided by the liblzo2-dev library"; \
		exit 1; \
	fi
	@if ! echo "#include <uuid/uuid.h>" | gcc -E - >/dev/null; then \
		echo "ERROR: libuuid development library is required for build"; \
		exit 1; \
	fi
	@echo "Checking patch version:";
	@$(HOSTTOOLS_DIR)/scripts/checkver.pl -e patch;

$(PROFILE_DIR)/vmlinux: $(PROFILE_DIR)/$(PROFILE)
ifneq ($(strip $(DONT_CLEAN)),1)
	@if [ -e $(PROFILE_DIR)/vmlinux ]; then \
	  echo "The specified profile, $(PROFILE), has been modified since the last build."; \
	  echo "The entire image must be rebuilt from the top of CommEngine."; \
	  echo "To skip this check, build with DONT_CLEAN=1."; \
	  read -p "Press ENTER to rebuild the entire image or CTRL-C to abort. " resp; \
	  rm $(PROFILE_DIR)/vmlinux; \
	  $(MAKE) PROFILE=$(PROFILE) clean; \
	  $(MAKE) PROFILE=$(PROFILE); \
	  echo "Ignore the make exit error, Error 1"; \
	  exit 1; \
	fi
endif


sanity_check: profile_changed_check


profile_saved_check: $(PROFILE_DIR)/vmlinux


$(LAST_PROFILE_COOKIE): sanity_check


# This next rule has a surprising but beneficial side effect.
# I am transitioning to a single Makefile that supports full source
# and binary only releases.  But in a binary only release, there are no
# .o's and no .c's.  But the Makefile defines OBJS = file1.c file2.c etc,
# and the OBJS are always prereq's to the EXE.  Normally, this would cause
# make to fail because of no rule to make the .o's.  However, this next rule
# fools make into thinking that the .o's depend on the
# LAST_PROFILE_COOKIE and sanity_check, so it goes off evaluating them
# and thinks it has satisified the prereqs for the .o's.  In reality, it
# hasn't, but that's OK, because this is a binary only release and the
# pre-built binary should be used anyways.
# In a full source release, detection of changed .c's still work correctly
# due to the dependency files (.d's) that are generated.

$(OBJS) : $(LAST_PROFILE_COOKIE)


generic_oaldir:
	$(MAKE) -C $(OALDIR)

oal.a: $(OBJS)
	$(AR) -rcs $@ $(OBJS)

generic_exe_install: $(EXE)
	mkdir -p $(INSTALL_DIR)/bin
	install -m 755 $(EXE) $(INSTALL_DIR)/bin

generic_public_lib_install: $(LIB)
	mkdir -p $(INSTALL_DIR)/lib/public
	install -m 755 $(LIB) $(INSTALL_DIR)/lib/public

generic_private_lib_install: $(LIB)
	mkdir -p $(INSTALL_DIR)/lib/private
	install -m 755 $(LIB) $(INSTALL_DIR)/lib/private
	
generic_eid_file_install:
	@mkdir -p $(INSTALL_DIR)/etc/cms_entity_info.d
	@if [ -e scripts/$(EID_FILE).custom ]; then \
	  echo installing $(EID_FILE).custom to $(INSTALL_DIR)/etc/cms_entity_info.d/$(EID_FILE); \
	  install -m 644 scripts/$(EID_FILE).custom $(INSTALL_DIR)/etc/cms_entity_info.d/$(EID_FILE); \
	else \
	  echo installing $(EID_FILE) to $(INSTALL_DIR)/etc/cms_entity_info.d/; \
	  install -m 644 scripts/$(EID_FILE) $(INSTALL_DIR)/etc/cms_entity_info.d; \
	fi
	
generic_eid_file_clean:
	rm -f $(INSTALL_DIR)/etc/cms_entity_info.d/$(EID_FILE)

generic_clean:
	rm -f *.o *.d *.d.* core.* *.a output.txt $(EXE) $(LIB)
	rm -rf output

generic_oalclean:
	$(MAKE) -C $(OALDIR) clean
	
generic_binaryonly_dist_clean:
	rm -rf *.c *.h linux

# See example in GNU Make, 4.6
generic_subdir_clean:
	for dir in $(SUBDIRS); do \
		if [ -d $$dir ] ; then \
			if [ -f $$dir/Makefile ] ; then \
				$(MAKE) -C $$dir clean; \
			fi \
		fi \
	done

# this rule makes the individual makefiles cleaner, but at the cost
# of single threading the makes to one directory at a time.
generic_subdir_make_default:
	for dir in $(SUBDIRS); do \
		$(MAKE) -C $$dir; \
	done


# these are the generic rules dealing with modular software
include $(BUILD_DIR)/make.modsw


#
# Some debug targets, to dump out various variables
#
show_build_vars:
	@echo "BUILD_DIR=$(BUILD_DIR)"
	@echo "KERNEL_VER=$(PROFILE_KERNEL_VER)"
	@echo "TARGETS_DIR=$(TARGETS_DIR)"
	@echo "PROFILE=$(PROFILE)"
	
show_subdirs:
	@echo HARDCODED_SUBDIRS=$(HARDCODED_SUBDIRS)
	@echo AUTODETECT_SUBDIRS=$(AUTODETECT_SUBDIRS)
	@echo MODSW_SUBDIRS=$(MODSW_SUBDIRS)
	@echo SUBDIRS=$(SUBDIRS)
	
show_contrib_libs:
	@echo MODSW_CONTRIB_LIBS=$(MODSW_CONTRIB_LIBS)
	@echo MODSW_CONTRIB_LIBS_DIRS=$(MODSW_CONTRIB_LIBS_DIRS)


