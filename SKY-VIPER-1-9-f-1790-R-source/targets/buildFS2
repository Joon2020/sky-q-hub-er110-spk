#!/bin/bash

# This script runs under fakeroot.  The fakeroot utility has 
# problems under 64-bit/multi-processor/preemptive kernel, so
# we run it only when necessary.

source $KERNEL_DIR/.config

# Create devices
# (Swited from device table to fakeroot for device nodes - always use makeDevs)
./makeDevs

# make root file system images for squashfs, jffs2 and ubifs

#### SQUASHFS 
if [ "$BRCM_KERNEL_AUXFS_JFFS2" == "y" ] ; then
    chmod +w $TARGET_FS/etc/fstab
    echo -e "mtd:data\t/data\tjffs2\t,\t\t0\t0\n" >> $TARGET_FS/etc/fstab
    chmod -w $TARGET_FS/etc/fstab
fi

$HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/rootfs.img -noappend -comp xz

if [ "$BRCM_KERNEL_ROOTFS" = "all" ]; then

#### JFFS2 RootFS
    cp $KERNEL_DIR/vmlinux $PROFILE_DIR/.
    $STRIP --remove-section=.note --remove-section=.comment $PROFILE_DIR/vmlinux
    $OBJCOPY -O binary $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux.bin
    $HOSTTOOLS_DIR/cmplzma -k -2 $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux.bin $PROFILE_DIR/vmlinux.lz
    cp $PROFILE_DIR/../cfe/cfe${BRCM_CHIP}ram.bin $TARGET_FS/cferam.000
    cp $PROFILE_DIR/vmlinux.lz $TARGET_FS/.
    echo -e "/cferam.000" > $HOSTTOOLS_DIR/nocomprlist
    echo -e "/vmlinux.lz" >> $HOSTTOOLS_DIR/nocomprlist
    echo $IMAGE_VERSION > $TARGET_FS/etc/image_version
    if [ "$BRCM_KERNEL_AUXFS_JFFS2" != "y" ] ; then
        chmod +w $TARGET_FS/etc/fstab
        echo -e "mtd:data\t/data\tjffs2\t,\t\t0\t0\n" >> $TARGET_FS/etc/fstab
        chmod -w $TARGET_FS/etc/fstab
    fi
    $HOSTTOOLS_DIR/mkfs.jffs2 -b -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs16kb.img -N $HOSTTOOLS_DIR/nocomprlist
    $HOSTTOOLS_DIR/mkfs.jffs2 -b -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs128kb.img -N $HOSTTOOLS_DIR/nocomprlist

#### JFFS2 BootFS/UBI RootFS
    # Create boot file system dir
    rm -rf $TARGET_BOOTFS
    mkdir $TARGET_BOOTFS
    chmod 777 $TARGET_BOOTFS
    mv $TARGET_FS/cferam.000 $TARGET_BOOTFS/.
    mv $TARGET_FS/vmlinux.lz $TARGET_BOOTFS/.
    mkdir $TARGET_FS/bootfs
    mkdir $TARGET_BOOTFS/etc
    cp $TARGET_FS/etc/image_version $TARGET_BOOTFS/etc/image_version
    chmod +w $TARGET_FS/etc/fstab
    echo -e "mtd:bootfs\t/bootfs\tjffs2\tro\t\t0\t0\n" >> $TARGET_FS/etc/fstab
    chmod -w $TARGET_FS/etc/fstab
    echo -e "[ubifs]"                 > $PROFILE_DIR/ubi.ini
    echo -e "mode=ubi"               >> $PROFILE_DIR/ubi.ini
    echo -e "image=$PROFILE_DIR/rootfs.ubifs" >> $PROFILE_DIR/ubi.ini
    echo -e "vol_id=0"               >> $PROFILE_DIR/ubi.ini
    echo -e "vol_type=dynamic"       >> $PROFILE_DIR/ubi.ini
    echo -e "vol_name=rootfs_ubifs"  >> $PROFILE_DIR/ubi.ini
    echo -e "vol_flags=autoresize"   >> $PROFILE_DIR/ubi.ini

#### 16KB block flash
    $HOSTTOOLS_DIR/mkfs.jffs2 -b -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs16kb.img -N $HOSTTOOLS_DIR/nocomprlist
    $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 512 -e 15360 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
    $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs16kb.img -m 512 -p $FLASH_NAND_BLOCK_16KB $PROFILE_DIR/ubi.ini
    rm $PROFILE_DIR/rootfs.ubifs

#### 128KB block flash
    $HOSTTOOLS_DIR/mkfs.jffs2 -b -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs128kb.img -N $HOSTTOOLS_DIR/nocomprlist

    if [ "$BRCM_CHIP" = "68500" ]; then
        $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 2048 -e 129024 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
        $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs128kb.img -m 2048 -s 512 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi.ini
    else
        $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 2048 -e 126976 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
        $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs128kb.img -m 2048 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi.ini
    fi

    rm $PROFILE_DIR/rootfs.ubifs

    rm $HOSTTOOLS_DIR/nocomprlist
    rm $PROFILE_DIR/ubi.ini
fi

