#!/usr/bin/perl
use strict;
use warnings;
use FindBin qw($Bin);
use lib "$Bin/../../PerlLib";
use BRCM::GenConfig;

# $p will allow us to GET values from the PROFILE
# $c will allow us to SET (and GET and DRIVER_SETUP) on the config
# file as we transform it from a template to the final config

# arguments 
# * profile file
# * config  file
my $p    = new BRCM::GenConfig(shift);
my $chip = $p->get('BRCM_CHIP');
my $c    = new BRCM::GenConfig( shift, Chip => $chip, Profile => $p );
my $vdsl = $p->get('SKY_CONFIG_VDSL') // '';
my $ethan = $p->get('SKY_CONFIG_ETHAN') // '';
my $flash_chip_size = $p->get('BRCM_FLASH_CHIP_SIZE');
my $default_console_uart = $p->get('SKY_CONFIG_DEFAULT_CONSOLE_UART') // 0;
my $mesh_support = $p->get('BUILD_SKY_MESH_SUPPORT') // '';
my $sky_nfc = $p->get('SKY_CONFIG_NFC_IMPL') // '';
my $ipv6 = $p->get('BUILD_IPV6') // '';
my $router_model = $p->get('SKY_ROUTER_MODEL') // '';
my $sky_watchdog = $p->get('BUILD_SKY_FEATURE_WATCHDOG') // '';
my $sky_timedoctor = $p->get('BUILD_SKY_FEATURE_TIMEDOCTOR') // '';
my $sky_reboot_diagnostics = $p->get('BUILD_SKY_REBOOT_DIAGNOSTICS') // '';

$router_model =~ s/\"//g;

if ($router_model eq "SR101") {
    print "ROUTER_MODEL SR101\n";
    $c->set( "CONFIG_SKY_MODEL_SR101", 'y');
}
elsif ($router_model eq "SR102") {
    print "ROUTER_MODEL SR102\n";
    $c->set( "CONFIG_SKY_MODEL_SR102", 'y');
}
elsif ($router_model eq "NR701") {
    print "ROUTER_MODEL NR701\n";
    $c->set( "CONFIG_SKY_MODEL_NR701", 'y');
}
if ($router_model eq "ER110") {
    print "ROUTER_MODEL ER110\n";
    $c->set( "CONFIG_SKY_MODEL_ER110", 'y');
}
elsif ($router_model eq "EE120") {
    print "ROUTER_MODEL EE120\n";
    $c->set( "CONFIG_SKY_MODEL_EE120", 'y');
}

#add SKY specific configurations here

$c->set( "CONFIG_NETFILTER_XT_MATCH_IPRANGE", 'y' );
$c->set( "CONFIG_NETFILTER_XT_MATCH_TIME", 'y' );

$c->set( "CONFIG_ELF_CORE", 'y' );
$c->set( "CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS", 'y' );

#set the chip size
printf "flash chip size = $flash_chip_size\n";
$c->set( "CONFIG_FLASH_CHIP_SIZE", $p->get('BRCM_FLASH_CHIP_SIZE'));

print "UART for default console: $default_console_uart\n";
$c->set( "CONFIG_SKY_DEFAULT_CONSOLE_UART", $default_console_uart );

if ($ipv6 eq 'y') {
	print "IPv6 modules configuration\n";
	$c->set('CONFIG_NETFILTER_TPROXY', 'm');
	$c->set('CONFIG_NETFILTER_XT_TARGET_TPROXY', 'm' );
	$c->set('CONFIG_NETFILTER_XT_MATCH_SOCKET', 'm');
	$c->set('CONFIG_SKY_IPV6', 'y')
}

if ( $vdsl eq 'y' ) {
	print "VDSL  router\n";
	$c->set( "CONFIG_SKY_VDSL", 'y');
}

if ( $ethan eq 'y' ) {
	print "ETHAN  device\n";
	$c->set( "CONFIG_SKY_ETHAN", 'y');
}

if ( $mesh_support eq 'y' ) {
	print "SKY MESH Support \n";
	$c->set( "CONFIG_SKY_MESH_SUPPORT", 'y');
#airties config	
	$c->set( "CONFIG_WIRELESS", 'y');
	$c->set( "CONFIG_WIRELESS_EXT", 'y');
	$c->set( "CONFIG_WEXT_CORE", 'y');
	$c->set( "CONFIG_WEXT_PROC", 'y');
	$c->set( "CONFIG_WEXT_SPY", 'y');
	$c->set( "CONFIG_WEXT_PRIV", 'y');
	$c->set( "CONFIG_WIRELESS_EXT_SYSFS", 'y');
}

if ( $sky_nfc eq 'y' ) {
	print "\nSKY NFC Implementation\n";
	$c->set('CONFIG_SKY_I2C_SOFT', 'm');
	$c->set('CONFIG_SKY_NT3H1201', 'm');
}


if ( $sky_reboot_diagnostics eq 'y' ) {
	print "\nSKY Reboot diagnostics\n";
	$c->set('CONFIG_SKY_REBOOT_DIAGNOSTICS', 'y');
}


if ($sky_watchdog eq 'y') {
	print "\nSKY FEATURE WATCHDOG\n";
	$c->set('CONFIG_SKY_FEATURE_WATCHDOG', 'y');
}

if ($sky_timedoctor eq 'y') {
	print "\nSKY FEATURE TIMEDOCTOR\n";
	$c->set('CONFIG_SKY_FEATURE_TIMEDOCTOR', 'y');
}
# LAST LINE: ADD ABOVE!
$c->write( );

